/*
ADOBE SYSTEMS INCORPORATED
Copyright 2007-2008 Adobe Systems Incorporated. All Rights Reserved.
 
NOTICE:   Adobe permits you to modify and distribute this file only in accordance with
the terms of Adobe AIR SDK license agreement.  You may have received this file from a
source other than Adobe.  Nonetheless, you may modify or
distribute this file only in accordance with such agreement. 
*/

var air;(function(){typeof air=="undefined"&&(air={}),air.Introspector={};if(typeof window.runtime!="undefined"&&typeof window.nativeWindow!="undefined")var e=!0;else var e=!1;air.Introspector.Console={log:function(){air.Introspector.logArguments(arguments,{htmlLoader:e?window.htmlLoader:null})},warn:function(){air.Introspector.logArguments(arguments,{htmlLoader:e?window.htmlLoader:null,type:"warn"})},info:function(){air.Introspector.logArguments(arguments,{htmlLoader:e?window.htmlLoader:null,type:"info"})},error:function(){air.Introspector.logArguments(arguments,{htmlLoader:e?window.htmlLoader:null,type:"error"})},dump:function(t,n){air.Introspector.logArguments(air.Introspector.dump(t,n),{htmlLoader:e?window.htmlLoader:null,usePre:!0})}},air.Introspector.config={showTimestamp:!0,showSender:!0,wrapColumns:2e3,flashTabLabels:!0,closeIntrospectorOnExit:!0,debugRuntimeObjects:!0,introspectorKey:122,debuggerKey:123,useAirDebugHtml:!1},air.Introspector.extend=function(e,t){for(var n in t)e[n]=t[n]},typeof AIRIntrospectorConfig!="undefined"&&air.Introspector.extend(air.Introspector.config,AIRIntrospectorConfig);var t=[];e||(air.Introspector.config.debugRuntimeObjects=!1),air.Introspector.__defineGetter__("inspect",function(){return air.Introspector._inspect}),air.Introspector.__defineSetter__("inspect",function(t){air.Introspector._inspect=t;if(!e)setTimeout(function(){air.Introspector.noBridge(function(){parentSandboxBridge.air_Introspector_setInspect(t)})},0);else if(!t)try{air.Introspector.hideHighlight()}catch(n){}}),air.Introspector.extend(air.Introspector,{runtime:e?{HTMLLoader:window.runtime.flash.html.HTMLLoader,Event:window.runtime.flash.events.Event,IOErrorEvent:window.runtime.flash.events.IOErrorEvent,NativeApplication:window.runtime.flash.desktop.NativeApplication,URLLoader:window.runtime.flash.net.URLLoader,URLRequest:window.runtime.flash.net.URLRequest,NativeWindowInitOptions:window.runtime.flash.display.NativeWindowInitOptions,Capabilities:window.runtime.flash.system.Capabilities,trace:window.runtime.trace}:null,_inspect:!1,remoteInspect:!1,canClick:!1,bridgeCallbacks:[],highlightBgColors:{"default":16763904},trimRegExp:/^[\s\r\n]*([\s\S]*?)[\s\r\n]*$/g,trim:function(e){return e.replace(air.Introspector.trimRegExp,"$1")},blockWrap:function(e){var t=air.Introspector.config.wrapColumns,n=e.split(/\n/),r=[],i=n.length,s=[];for(var o=0;o<i;o++){s.push(o+1);var u=n[o];while(u.length>t)r.push(u.substr(0,t)),u=u.substr(t),s.push("");r.push(u)}return s.push("EOF"),[r.join("\n"),s.join("\n")]},createTextField:function(t,n,r){if(e){var i=new runtime.flash.text.TextField;i.embedFonts=!1,i.autoSize=runtime.flash.text.TextFieldAutoSize.LEFT,i.antiAliasType=runtime.flash.text.AntiAliasType.ADVANCED,i.defaultTextFormat=air.Introspector.getTextFormat(n,r),i.selectable=!1,i.mouseEnabled=!0,i.x=4,i.text="";if(t.numChildren>0){var s=t.getChildAt(t.numChildren-1);i.y=s.y+s.height+15}return t.addChild(i),i}return null},getTextFormat:function(t,n){if(e){var r=new runtime.flash.text.TextFormat;return r.size=t,r.font="Tahoma",r.bold=n,r.color=3342438,r}return null},extendRect:function(e,t){e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e.scaleX=t.scaleX,e.scaleY=t.scaleY},showHighlight:function(t){if(e){var n=air.Introspector.getHtmlWindows();for(var r=n.length-1;r>=0;r--)try{n[r].htmlLoader.window.air.Introspector.hideHighlight()}catch(i){}air.Introspector.extendRect(air.Introspector.highlightSprite,t)}else setTimeout(function(){air.Introspector.noBridge(function(){parentSandboxBridge.air_Introspector_showHighlight(t)})},0)},hideHighlight:function(){e?(air.Introspector.extendRect(air.Introspector.highlightSprite,{x:0,y:0,width:0,height:0,scaleX:0,scaleY:0}),air.Introspector.highlightText.visible=!1):setTimeout(function(){try{parentSandboxBridge.air_Introspector_hideHighlight()}catch(e){}},0)},remoteClick:function(){air.Introspector.debugWindow.finishInspect(!1),air.Introspector.hideHighlight()},createHighlight:function(){if(e){var t=new runtime.flash.display.Sprite;t.mouseEnabled=!1,t.width=0,t.height=0,t.buttonMode=!0;var n=function(e,n,r){air.Introspector.addEventListener(e,n,function(e){if((air.Introspector.inspect||air.Introspector.remoteInspect)&&t.hitTestPoint(e.stageX,e.stageY)){e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation();if(r&&air.Introspector.canClick)if(air.Introspector.remoteInspect)try{air.Introspector.inspectFrame.contentWindow.childSandboxBridge.air_Introspector_remoteClick()}catch(e){air.Introspector.noChildBridge(air.Introspector.inspectFrame)}else air.Introspector.debugWindow.finishInspect(!1),air.Introspector.hideHighlight()}},!0,2e6)},r=function(e,t){air.Introspector.addEventListener(e,t,function(e){(air.Introspector.inspect||air.Introspector.remoteInspect)&&nativeWindow.active&&setTimeout(function(){air.Introspector.canClick=!0},100)},!0,2e5)},i=function(e,t){air.Introspector.addEventListener(e,t,function(e){air.Introspector.inspect||air.Introspector.remoteInspect?(air.Introspector.highlightText.x=e.stageX+15,air.Introspector.highlightText.y=e.stageY+15):air.Introspector.highlightText.visible=!1},!0,2e5)};n(htmlLoader.stage,runtime.flash.events.MouseEvent.CLICK,!0),n(htmlLoader.stage,runtime.flash.events.MouseEvent.MOUSE_DOWN),n(htmlLoader.stage,runtime.flash.events.MouseEvent.MOUSE_UP),n(htmlLoader.stage,runtime.flash.events.MouseEvent.DOUBLE_CLICK),r(htmlLoader.stage,runtime.flash.events.MouseEvent.MOUSE_MOVE),r(nativeWindow,runtime.flash.events.Event.ACTIVATE),i(htmlLoader.stage,runtime.flash.events.MouseEvent.MOUSE_MOVE),window.htmlLoader.stage.addChild(t),air.Introspector.highlightSprite=t,air.Introspector.highlightText=new runtime.flash.display.Sprite,window.htmlLoader.stage.addChild(air.Introspector.highlightText),air.Introspector.highlightText.graphics.beginFill(15658734,.8),air.Introspector.highlightText.graphics.lineStyle(1,15658734,.9,!1),air.Introspector.highlightText.graphics.drawRect(0,0,250,40),air.Introspector.highlightText.visible=!1,air.Introspector.highlightLine1=air.Introspector.createTextField(air.Introspector.highlightText,16,!0),air.Introspector.highlightLine2=air.Introspector.createTextField(air.Introspector.highlightText,10,!1)}},addEventListener:function(e,n,r,i,s){t.push([e,n,r,i]),e.addEventListener(n,r,i,s)},removeEventListener:function(e,n,r,i){for(var s=t.length-1;s>=0;s--){var o=t[s];if(o[0]==e&&o[1]==n&&o[2]==r&&o[3]==i){t.splice(s,1);break}}e.removeEventListener(n,r,i)},drawRect:function(e,t){var n=htmlLoader.getBounds(htmlLoader.stage);e.x+=n.x,e.y+=n.y,e.scaleX=1,e.scaleY=1,air.Introspector.showHighlight(e),air.Introspector.highlightSprite.graphics.clear();var r=air.Introspector.highlightBgColors[t.toLowerCase()];typeof r=="undefined"&&(r=air.Introspector.highlightBgColors["default"]),air.Introspector.highlightSprite.graphics.beginFill(r,.2),air.Introspector.highlightSprite.graphics.lineStyle(3,r,.9,!1),air.Introspector.highlightSprite.graphics.drawRect(0,0,e.width,e.height)},highlightElement:function(t,n){var r=air.Introspector.getBorderBox(t);if(r==0)return;e?air.Introspector.drawRect(r,t.tagName):setTimeout(function(){try{!isNaN(r.width)&&!isNaN(r.x)&&air.Introspector.noBridge(function(){parentSandboxBridge.air_Introspector_drawRect(r,e.tagName)})}catch(e){}typeof n!="undefined"&&n()},0)},addKeyboardEvents:function(e){air.Introspector.addEventListener(e,runtime.flash.events.KeyboardEvent.KEY_DOWN,function(e){if(e.keyCode==air.Introspector.config.introspectorKey){if(typeof air.Introspector.lastElement!="undefined"&&(air.Introspector.lastElement.nodeName=="IFRAME"||air.Introspector.lastElement.nodeName=="FRAME"))try{var t=air.Introspector.lastElement.contentWindow;if(typeof t.childSandboxBridge!="undefined"&&typeof t.childSandboxBridge.air_Introspector_isDebugOpen!="undefined"&&typeof t.childSandboxBridge.air_Introspector_toggleInspect!="undefined"&&t.childSandboxBridge.air_Introspector_isDebugOpen()){t.childSandboxBridge.air_Introspector_toggleInspect(),e.preventDefault(),e.stopPropagation();return}}catch(e){}air.Introspector.init(!1,!0,function(){air.Introspector.debugWindow.toggleInspect()}),e.preventDefault(),e.stopPropagation()}else if(e.keyCode==air.Introspector.config.debuggerKey)air.Introspector.toggleWindow(),e.preventDefault(),e.stopPropagation();else if(e.keyCode==27&&air.Introspector.inspect)air.Introspector.debugWindow.finishInspect(),air.Introspector.hideHighlight(),e.preventDefault(),e.stopPropagation();else if(e.ctrlKey==1&&e.altKey==0){var n=null;switch(e.keyCode){case runtime.flash.ui.Keyboard.NUMBER_1:n=0;break;case runtime.flash.ui.Keyboard.NUMBER_2:n=1;break;case runtime.flash.ui.Keyboard.NUMBER_3:n=2;break;case runtime.flash.ui.Keyboard.NUMBER_4:n=3;break;case runtime.flash.ui.Keyboard.NUMBER_5:n=4;break;case runtime.flash.ui.Keyboard.NUMBER_6:n=5}n!=null&&(air.Introspector.init(!1,!0,function(){air.Introspector.debugWindow.setTab(n)}),e.preventDefault(),e.stopPropagation())}},!0,1e6)},showHighlightLabels:function(e,t,n){typeof e!="undefined"&&e.length!=0?air.Introspector.highlightLine1.text=t+" - "+e:air.Introspector.highlightLine1.text=t,air.Introspector.canClick?air.Introspector.highlightLine2.text=n.substr(0,40).replace(/\n/g,"\\n")+"...":(air.Introspector.highlightLine2.text="Click to activate window",window.clearTimeout(air.Introspector.clickToActivateTimeout),air.Introspector.clickToActivateTimeout=setTimeout(function(){air.Introspector.highlightLine2.text=n.substr(0,40).replace(/\n/g,"\\n")+"..."},400)),air.Introspector.highlightText.visible=!0},registerUncaughtExceptionListener:function(){air.Introspector.addEventListener(window.htmlLoader,runtime.flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION,function(e){if(e.exceptionValue&&e.exceptionValue.air_Introspector_setParentSandboxBridge==1&&e.exceptionValue.air_Introspector_version==air.Introspector.version){air.Introspector.registerFramesParentSandboxBridge(),e.preventDefault();return}air.Introspector.logError(e.exceptionValue,{htmlLoader:window.htmlLoader})})},registerCloseEventListener:function(){air.Introspector.addEventListener(window.nativeWindow,air.Introspector.runtime.Event.CLOSE,function(){var e=air.Introspector.findDebugWindow();e!=null&&e.closedWindow(window.htmlLoader)})},registerCompleteEventListener:function(){air.Introspector.addEventListener(window.htmlLoader,air.Introspector.runtime.Event.COMPLETE,function(){air.Introspector.removeEventListener(window.htmlLoader,air.Introspector.runtime.Event.COMPLETE,arguments.callee);try{var e=air.Introspector.findDebugWindow();e!=null&&e.isLoaded&&e.completeWindow(window.htmlLoader),air.Introspector.registerFramesParentSandboxBridge()}catch(t){runtime.trace(t),runtime.trace(t.line),air.Introspector.Console.log(t)}})},registerFramesParentSandboxBridge:function(){var e=document.getElementsByTagName("iframe");for(var t=e.length-1;t>=0;t--)air.Introspector.registerFrame(e[t]);var n=document.getElementsByTagName("frame");for(var t=n.length-1;t>=0;t--)air.Introspector.registerFrame(n[t])},registerDeactivateEventListener:function(){air.Introspector.addEventListener(window.nativeWindow,air.Introspector.runtime.Event.DEACTIVATE,function(){air.Introspector.hideHighlight(),air.Introspector.canClick=!1})},registerChildSandboxBridge:function(){typeof childSandboxBridge=="undefined"&&(childSandboxBridge={});try{childSandboxBridge.air_Introspector_remoteClick=function(){try{air.Introspector.remoteClick()}catch(e){alert(e+" "+e.line)}},childSandboxBridge.air_Introspector_isDebugOpen=function(){return typeof air.Introspector.debugWindow!="undefined"},childSandboxBridge.air_Introspector_toggleInspect=function(){air.Introspector.init(!1,!0,function(){air.Introspector.debugWindow.toggleInspect()})},childSandboxBridge.air_Introspector_bridgeLoaded=function(){var e=air.Introspector.bridgeCallbacks;for(var t=0;t<e;t++)try{air.Introspector.bridgeCallbacks[t]()}catch(n){air.Introspector.logError(n)}air.Introspector.bridgeCallbacks=[]}}catch(e){}},createOpenConsoleButton:function(){var e=document.createElement("input");e.onclick=function(){air.Introspector.init(!0,!0,function(){})},e.style.zIndex=1e6,e.style.position="fixed",e.style.right="10px",e.style.top="10px",e.type="button",e.value="Open Introspector",document.body.appendChild(e)},registerDOMEventListeners:function(){var t=null;document.addEventListener("DOMSubtreeModified",function(e){var t=air.Introspector.findDebugWindow();t!=null&&t.isLoaded&&t.dom3Event(e)}),document.addEventListener("DOMCharacterDataModified",function(e){var t=air.Introspector.findDebugWindow();t!=null&&t.isLoaded&&t.dom3Event(e)}),document.body.addEventListener("mouseover",function(n){air.Introspector.inspect?setTimeout(function(){e&&(nativeWindow.active||nativeWindow.activate()),n.srcElement?(e?(air.Introspector.highlightElement(n.srcElement),air.Introspector.showHighlightLabels(n.srcElement.id,n.srcElement.nodeName,n.srcElement.outerHTML)):air.Introspector.highlightElement(n.srcElement,function(){air.Introspector.noBridge(function(){parentSandboxBridge.air_Introspector_showHighlightLabels(n.srcElement.id,n.srcElement.nodeName,n.srcElement.outerHTML)})}),t&&clearTimeout(t),t=setTimeout(function(){air.Introspector.init(!1,!0,function(){air.Introspector.debugWindow.setInspectElement(n.srcElement)})},100)):air.Introspector.hideHighlight()},0):e&&(air.Introspector.lastElement=n.srcElement)},!0)},cleanup:function(){for(var e=t.length-1;e>=0;e--){var n=t[e];try{n[0].removeEventListener(n[1],n[2],n[3])}catch(r){}}t=[];try{window.htmlLoader.stage.removeChild(air.Introspector.highlightText)}catch(r){}},register:function(){window.XMLHttpRequest&&window.XMLHttpRequest.prototype&&(window.XMLHttpRequest.prototype.debugopen=window.XMLHttpRequest.prototype.open,window.XMLHttpRequest.prototype.debugsend=window.XMLHttpRequest.prototype.send,window.XMLHttpRequest.prototype.open=function(e,t,n,r,i){if(typeof this.doNotDebug=="undefined"){var s=air.Introspector.findDebugWindow();s!=null&&s.logNet(this,e,t,n)}return this.debugopen(e,t,n,r,i)},window.XMLHttpRequest.prototype.send=function(e){if(typeof this.doNotDebug=="undefined"){var t=this,n=air.Introspector.findDebugWindow();if(n!=null){var r=this.onreadystatechange;this.onreadystatechange=function(){typeof r=="function"&&r.call(t),n.logNet(t,"unknown","",!1)},typeof t.doNotDebug=="undefined"&&n.logNetSend(this,e)}var i=this.debugsend(e);return n!=null&&n.logNetSend(this,e),i}return this.debugsend(e)}),e?(air.Introspector.addKeyboardEvents(window.htmlLoader),air.Introspector.registerUncaughtExceptionListener(),air.Introspector.registerCloseEventListener(),air.Introspector.registerCompleteEventListener(),air.Introspector.registerDeactivateEventListener(),air.Introspector.createHighlight()):air.Introspector.registerChildSandboxBridge(),air.Introspector.waitForBody(document,function(){try{e||air.Introspector.createOpenConsoleButton(),air.Introspector.registerDOMEventListeners(),window.addEventListener("unload",function(){try{air.Introspector.cleanup(),e||air.Introspector.debugWindow.window.close()}catch(t){}})}catch(t){e&&(runtime.trace(t),runtime.trace(t.line)),air.Introspector.Console.log(t)}})},registerFrame:function(e){typeof e.contentWindow.parentSandboxBridge=="undefined"&&(e.contentWindow.parentSandboxBridge={}),e.contentWindow.parentSandboxBridge.air_Introspector_hideHighlight=function(){air.Introspector.hideHighlight()},e.contentWindow.parentSandboxBridge.air_Introspector_showHighlight=function(e){air.Introspector.showHighlight(e)},e.contentWindow.parentSandboxBridge.air_Introspector_drawRect=function(t,n){var r=air.Introspector.getBorderBox(e),i=air.Introspector.getIntProp(e,"border-left-width"),s=air.Introspector.getIntProp(e,"border-top-width");if(r==null)return;t.x+=r.x+2*i,t.y+=r.y+2*s,air.Introspector.drawRect(t,n)},e.contentWindow.parentSandboxBridge.air_Introspector_setInspect=function(t){air.Introspector.inspectFrame=t?e:null,air.Introspector.remoteInspect=t,t||air.Introspector.hideHighlight()},e.contentWindow.parentSandboxBridge.air_Introspector_getWindowTitle=function(){return document.title},e.contentWindow.parentSandboxBridge.air_Introspector_checkNativeWindow=function(e){var t=air.Introspector.runtime.NativeApplication.nativeApplication.openedWindows;for(var n=t.length-1;n>=0;n--)if(t[n].title==e)return!0;return!1},e.contentWindow.parentSandboxBridge.air_Introspector_writeConsoleToClipboard=function(e){air.Introspector.writeConsoleToClipboard(e)},e.contentWindow.parentSandboxBridge.air_Introspector_writeConsoleToFile=function(e){air.Introspector.writeConsoleToFile(e)},e.contentWindow.parentSandboxBridge.air_Introspector_writeConfigFile=function(e){return air.Introspector.writeConfigFile(e,!0)},e.contentWindow.parentSandboxBridge.air_Introspector_readConfigFile=function(){return air.Introspector.readConfigFile(!0)},e.contentWindow.parentSandboxBridge.air_Introspector_showHighlightLabels=function(e,t,n){air.Introspector.showHighlightLabels(e,t,n)},e.contentWindow.parentSandboxBridge.air_Introspector_getFrameId=function(){return e.id},e.contentWindow.parentSandboxBridge.air_Introspector_getNextWindowId=function(){return++air.Introspector.times},typeof e.contentWindow.childSandboxBridge!="undefined"&&typeof e.contentWindow.childSandboxBridge.air_Introspector_bridgeLoaded!="undefined"&&e.contentWindow.childSandboxBridge.air_Introspector_bridgeLoaded()},waitForBody:function(e,t){e.body?t():setTimeout(air.Introspector.waitForBody,10,e,t)},toggleWindow:function(){air.Introspector.init(!0,!1,function(e){e||(air.Introspector.debugWindow.nativeWindow.visible^=!0)})},init:function(t,n,r){if(!air.Introspector.canInit())return;typeof t=="undefined"&&(t=!1),typeof n=="undefined"&&(n=!0);if(e)if(typeof air.Introspector.debugWindow=="undefined"||air.Introspector.debugWindow.nativeWindow.closed){delete air.Introspector.debugWindow;var i=air.Introspector.findDebugWindow();i!=null&&!i.nativeWindow.closed?(air.Introspector.debugWindow=i,n&&(air.Introspector.debugWindow.nativeWindow.visible=!0,t||nativeWindow.activate()),r(!1)):air.Introspector.loadDebugger(function(e){air.Introspector.debugWindow=e,r(!0)},t)}else n&&t&&air.Introspector.debugWindow.nativeWindow.activate(),r(!1);else{typeof activeWindow=="undefined"&&air.Introspector.registerChildSandboxBridge();if(typeof air.Introspector.debugWindow=="undefined"||typeof air.Introspector.debugWindow.window.air=="undefined")delete air.Introspector.debugWindow,air.Introspector.loadDebugger(function(e){air.Introspector.debugWindow=e,r(!0)});else{if(!air.Introspector.debugWindow.isWindowCreated)return;r(!1)}}},times:0,tryCreateWindow:function(t){var n=this,r,i;return air.Introspector.parentWindowTitle=parentSandboxBridge.air_Introspector_getWindowTitle(),typeof parentSandboxBridge!="undefined"&&typeof parentSandboxBridge.air_Introspector_getFrameId!="undefined"&&(i=parentSandboxBridge.air_Introspector_getFrameId()),typeof parentSandboxBridge!="undefined"&&typeof parentSandboxBridge.air_Introspector_getNextWindowId!="undefined"?air.Introspector.times=parentSandboxBridge.air_Introspector_getNextWindowId():air.Introspector.times++,typeof air.Introspector.config.useAirDebugHtml=="undefined"||air.Introspector.config.useAirDebugHtml==0?(r=window.open("about:blank","debugger"+air.Introspector.times,"width=640,height=480,resizable=1"),r&&r.document&&(r.isAppSandbox=e,r.opener=window,r.iframeId=i,r.initCallbacks=t,r.activeWindow=window,r.isLoaded=!1,r.config=air.Introspector.config,r.document.open(),r.document.write(air.Introspector.contentString),r.document.close())):(r=window.open("DebugUI.html","debugger"+air.Introspector.times,"width=640,height=480,resizable=1"),r&&r.document&&(r.opener=window,r.iframeId=i,r.activeWindow=window,r.config=air.Introspector.config,r.initCallbacks=t,r.isLoaded=!1,r.isAppSandbox=e)),r},loadDebugger:function(t,n){var r,i=arguments.callee;if(i.htmlLoader&&typeof i.htmlLoader.window.isLoaded!="undefined"){i.htmlLoader.window.isLoaded?t(i.htmlLoader.window.debugWindow):i.htmlLoader.window.initCallbacks?i.htmlLoader.window.initCallbacks.push(t):i.initCallbacks.push(t);return}typeof i.initCallbacks=="undefined"?i.initCallbacks=[function(){delete i.initCallbacks},t]:i.initCallbacks.push(t);if(e){r=air.Introspector.runtime.HTMLLoader.createRootWindow(!1),air.Introspector.addEventListener(r,air.Introspector.runtime.Event.HTML_DOM_INITIALIZE,function(){try{air.Introspector.removeEventListener(r,air.Introspector.runtime.Event.HTML_DOM_INITIALIZE,arguments.callee),r.window.initCallbacks=i.initCallbacks,r.window.isLoaded=!1,r.window.config=air.Introspector.config,r.window.activateDebug=n,r.window.isAppSandbox=e}catch(t){air.Introspector.runtime.trace(t),air.Introspector.runtime.trace(t.line)}}),r.window.isLoaded=!1;var s=r.stage.nativeWindow;s.width=640,s.height=480,air.Introspector.addEventListener(r,runtime.flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION,function(e){air.Introspector.logError(e.exceptionValue,{htmlLoader:self.htmlLoader}),e.preventDefault()}),typeof air.Introspector.config.useAirDebugHtml=="undefined"||air.Introspector.config.useAirDebugHtml==0?(typeof r.placeLoadStringContentInApplicationSandbox!="undefined"&&(r.placeLoadStringContentInApplicationSandbox=!0),r.loadString(air.Introspector.contentString),typeof r.placeLoadStringContentInApplicationSandbox!="undefined"&&(r.placeLoadStringContentInApplicationSandbox=!1)):r.load(new air.Introspector.runtime.URLRequest("app:/DebugUI.html"))}else air.Introspector.noBridge(function(){var e=air.Introspector.tryCreateWindow(i.initCallbacks);if(e){var t={window:e};i.htmlLoader=t}});i.htmlLoader=r},findDebugWindow:function(){if(!e)return air.Introspector.debugWindow;try{if(air.Introspector.debugWindow&&air.Introspector.debugWindow.nativeWindow.closed==0)return air.Introspector.debugWindow}catch(t){}try{var n=air.Introspector.getHtmlWindows(!0);for(var r=n.length-1;r>=0;r--)try{if(typeof n[r].htmlLoader.window.air!="undefined"&&typeof n[r].htmlLoader.window.air.Introspector!="undefined"&&typeof n[r].htmlLoader.window.air.Introspector.debugWindow!="undefined"&&n[r].htmlLoader.window.air.Introspector.debugWindow.nativeWindow.closed==0&&n[r].htmlLoader.window.isAppSandbox)return n[r].htmlLoader.window.air.Introspector.debugWindow}catch(t){}}catch(t){}return null},formats:{png:1,gif:1,zip:1,air:1,jpg:1,jpeg:1,txt:0,html:0,js:0,xml:2,opml:2,css:0,htm:0,"":0},canInit:function(){return!0},logArguments:function(e,t){if(!air.Introspector.canInit())return;t.timestamp=new Date,air.Introspector.init(t.type=="error",!0,function(){air.Introspector.debugWindow.logArguments(e,t)})},logError:function(e,t){air.Introspector.init(!1,!0,function(){air.Introspector.debugWindow.logError(e,t)})},showCssElement:function(e){var t=air.Introspector.findDebugWindow();t&&t.showCssElement(e)},checkIfIsInstanceOfHTMLLoader:function(e){var t=runtime.flash.utils.getQualifiedClassName(e);return t=="flash.html::HTMLLoader"?!0:t=="mx.core::FlexHTMLLoader"?!0:!1},findLoader:function(e,t){try{for(var n=e.numChildren-1;n>=0;n--){var r=e.getChildAt(n);air.Introspector.checkIfIsInstanceOfHTMLLoader(r)?t.push([r]):r.htmlLoader!=null&&air.Introspector.checkIfIsInstanceOfHTMLLoader(r.htmlLoader)?t.push([r.htmlLoader,r.id||r.toString()]):air.Introspector.findLoader(r,t)}}catch(i){}return null},getHtmlWindows:function(t){if(e){var n=[],r=air.Introspector.runtime.NativeApplication.nativeApplication.openedWindows;for(var i=r.length-1;i>=0;i--){var s=[];air.Introspector.findLoader(r[i].stage,s);for(var o=s.length-1;o>=0;o--){var u=s[o],a=u[0],f=u[1];if(typeof t=="undefined"&&typeof a.window!="undefined"&&typeof a.window.air!="undefined"&&typeof a.window.air.Introspector!="undefined"&&typeof a.window.air.Introspector.localIframeDebug!="undefined")continue;n.push({nativeWindow:r[i],stage:r[i].stage,htmlLoader:a,label:f})}}return n}return[]},twoDigits:function(e){return e<10?"0"+e:e+""},escapeHtml:function(e){return(e+"").replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},tree:{},isNumberObject:function(e){try{return e+0==e&&!isNaN(e)}catch(t){}return!1},isStringObject:function(e){try{return typeof e.match!="undefined"&&e.match.toString().indexOf("[native code]")>0}catch(t){}return!1},isDateObject:function(e){try{return typeof e.getDate!="undefined"&&e.getDate.toString().indexOf("[native code]")>0}catch(t){}return!1},isArgumentsObject:function(e){try{return e.toString()=="[object Arguments]"}catch(t){}return!1},isXMLObject:function(e){try{if(e.xmlVersion&&e.firstChild!=null)return e.xmlVersion!=""}catch(t){}return!1},isArrayObject:function(e){try{return typeof e.push!="undefined"&&e.push.toString().indexOf("[native code]")>0}catch(t){}return!1},isItemNative:function(e){try{return typeof e.item!="undefined"&&e.item.toString().indexOf("[native code]")>0}catch(t){}return!1},dump:function(e,t,n){if(air.Introspector.isArgumentsObject(e)&&e.length==1)return air.Introspector.dump(e[0]);typeof t=="undefined"&&(t=1),typeof n=="undefined"&&(n=0);try{if(typeof e=="undefined")return"[undefined]";if(e==null)return"[null]";var r=[];if(air.Introspector.isStringObject(e)||air.Introspector.isNumberObject(e)||air.Introspector.isDateObject(e)){if(n==0)try{return e+""}catch(i){return i+""}return""}var s=air.Introspector.isItemNative(e),o=air.Introspector.isArrayObject(e)||air.Introspector.isArgumentsObject(e)||s,u=!o||s;if(o){var a=e.length;for(var f=0;f<a;f++){var l;try{l=e[f],typeof l=="undefined"&&(l="[undefined]")}catch(i){l=i+""}r.push([f,l])}}if(u)for(var f in e){var l;try{l=e[f],typeof l=="undefined"&&(l="[undefined]")}catch(i){l=i+""}r.push([f,l])}if(air.Introspector.config.debugRuntimeObjects&&!o)try{var c=runtime.flash.utils.describeType(e);this.domParser||(this.domParser=new DOMParser);var h=this.domParser.parseFromString(c,"text/xml"),p=h.firstChild.firstChild;while(p){if(p.nodeName=="accessor"||p.nodeName=="constant"||p.nodeName=="method"||p.nodeName=="variable"){var d=p.getAttribute("name");if(d!=null&&d!="prototype")try{r.push([d,e[d]])}catch(i){r.push([d,""]+"")}}p=p.nextSibling}}catch(i){}r.sort(function(e,t){var n=parseInt(e[0])==e[0],r=parseInt(t[0])==t[0];return n&&r?parseInt(e[0])-parseInt(t[0]):n?-1:r?1:e[0].toLowerCase()==t[0].toLowerCase()?0:e[0].toLowerCase()<t[0].toLowerCase()?-1:1});if(r.length){var v="";for(var f=n;f>0;f--)v+="    ";var a=r.length,m=[];o?m.push(v+"[\r\n"):m.push(v+"{\r\n");for(var f=0;f<a;f++){try{var g=(r[f][0]+"").length+1,y="";for(var b=0;b<g;b++)y+=" ";typeof r[f][1]=="function"?m.push(v+"  "+r[f][0]+"=[function]\r\n"):air.Introspector.isDateObject(r[f][1])?m.push(v+"  "+r[f][0]+"="+(new Date(r[f][1])+"").replace(/\n/g,"\r\n"+v+y)+",\r\n"):m.push(v+"  "+r[f][0]+"="+(r[f][1]+"").replace(/\n/g,"\r\n"+v+y)+"\r\n")}catch(i){m.push(v+"  "+r[f][0]+"="+i+"\r\n")}n<t&&m.push(air.Introspector.dump(r[f][1],t,n+1))}return o?m.push(v+"]\r\n"):m.push(v+"}\r\n"),n?m.join(""):m.join("")}}catch(i){air.Introspector.Console.error(i)}return""},camelize:function(e){if(e.indexOf("-")==-1)return e;var t=e.split("-"),n=!0,r="";for(var i=0;i<t.length;i++)if(t[i].length>0)if(n)r=t[i],n=!1;else{var s=t[i];r+=s.charAt(0).toUpperCase()+s.substring(1)}return r},getStyleProp:function(e,t){var n;try{e.style&&(n=e.style[air.Introspector.camelize(t)]);if(!n)if(document.defaultView&&document.defaultView.getComputedStyle){var r=document.defaultView.getComputedStyle(e,null);n=r?r.getPropertyValue(t):null}else e.currentStyle&&(n=e.currentStyle[air.Introspector.camelize(t)])}catch(i){}return n=="auto"?null:n},getIntProp:function(e,t){var n=parseInt(air.Introspector.getStyleProp(e,t),10);return isNaN(n)?0:n},getBorderBox:function(e,t){t=t||document,typeof e=="string"&&(e=t.getElementById(e));if(!e)return!1;if(e.parentNode===null||air.Introspector.getStyleProp(e,"display")=="none")return!1;var n={x:0,y:0,width:0,height:0},r=null,i,s=e.nodeName;n.x=e.offsetLeft,n.y=e.offsetTop,n.width=e.offsetWidth,n.height=e.offsetHeight,r=e.offsetParent;if(r!=e)while(r)n.x+=r.offsetLeft,n.y+=r.offsetTop,n.x+=air.Introspector.getIntProp(r,"border-left-width"),n.y+=air.Introspector.getIntProp(r,"border-top-width"),s+=":"+r.nodeName,r=r.offsetParent;switch(air.Introspector.getStyleProp(e,"position")){case"absolute":n.y-=t.body.offsetTop;break;case"fixed":n.y+=t.body.scrollTop,n.x+=t.body.scrollLeft}e.parentNode?r=e.parentNode:r=null;if(r!=null&&r.nodeName){var o=r.nodeName.toUpperCase();while(r&&o!="HTML")o=r.nodeName.toUpperCase(),n.x-=r.scrollLeft,n.y-=r.scrollTop,r.parentNode?r=r.parentNode:r=null}var u=air.Introspector.getIntProp,a=u(e,"margin-top"),f=u(e,"margin-left"),l=u(e,"margin-bottom"),c=u(e,"margin-right");return n.x-=f,n.y-=a,n.height+=a+l,n.width+=f+c,n},writeConfigFile:function(t,n){if(e){var r=runtime.flash.filesystem.File.applicationStorageDirectory.resolvePath("AIRIntrospector"+(n?"Remote":"")+".cfg"),i=new runtime.flash.filesystem.FileStream;i.open(r,runtime.flash.filesystem.FileMode.WRITE),i.writeObject(t),i.close()}else typeof activeWindow=="undefined"?air.Introspector.noBridge(function(){parentSandboxBridge.air_Introspector_writeConfigFile(t)}):activeWindow.setTimeout(function(){try{activeWindow.air.Introspector.writeConfigFile(t)}catch(e){}},0)},readConfigFile:function(t,n){if(e){var r=runtime.flash.filesystem.File.applicationStorageDirectory.resolvePath("AIRIntrospector"+(t?"Remote":"")+".cfg");if(r.exists){var i=new runtime.flash.filesystem.FileStream;i.open(r,runtime.flash.filesystem.FileMode.READ);var s=i.readObject();return i.close(),s}}else typeof activeWindow=="undefined"?air.Introspector.noBridge(function(){var e=parentSandboxBridge.air_Introspector_readConfigFile();n(e)}):activeWindow.setTimeout(function(){try{activeWindow.air.Introspector.readConfigFile(!0,function(e){setTimeout(function(){n(e)},0)})}catch(e){}},0);return{}},writeConsoleToClipboard:function(t){e?(runtime.flash.desktop.Clipboard.generalClipboard.clear(),runtime.flash.desktop.Clipboard.generalClipboard.setData(runtime.flash.desktop.ClipboardFormats.TEXT_FORMAT,t,!1)):typeof activeWindow=="undefined"?air.Introspector.noBridge(function(){parentSandboxBridge.air_Introspector_writeConsoleToClipboard(t)}):activeWindow.setTimeout(function(){try{activeWindow.air.Introspector.writeConsoleToClipboard(t)}catch(e){}})},writeConsoleToFile:function(t){if(e){var n=runtime.flash.filesystem.File.desktopDirectory,r=this;n.addEventListener(runtime.flash.events.Event.SELECT,function(e){var n=e.target,r=new runtime.flash.filesystem.FileStream;r.open(n,runtime.flash.filesystem.FileMode.WRITE),r.writeUTFBytes(t),r.close()}),n.browseForSave("Console dump file...")}else typeof activeWindow=="undefined"?air.Introspector.noBridge(function(){parentSandboxBridge.air_Introspector_writeConsoleToFile(t)}):activeWindow.setTimeout(function(){try{activeWindow.air.Introspector.writeConsoleToFile(t)}catch(e){}})},noBridge:function(e){try{e();return}catch(t){air.Introspector.bridgeCallbacks.push(e),air.Introspector.registerChildSandboxBridge(),setTimeout(function(){throw{air_Introspector_setParentSandboxBridge:!0,air_Introspector_version:air.Introspector.version,toString:function(){return"You need to include AIRIntrospector.js in your application sandbox."}}},0)}},noChildBridge:function(e){if(!air.Introspector.secondBridgeTry){var t="";typeof e!="undefined"&&(t=" Check the following iframe [id: "+e.id+"]"),alert("Child sandbox bridge is not defined or has been rewritten. You need to include AIRIntrospector.js in child sandbox."+t),air.Introspector.secondBridgeTry=!0}}}),air.Introspector.version="1.5"})(),air.Introspector.contentString="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<title>ADOBE AIR HTML/JS Application Introspector</title>\n<style>\n	body{\n		overflow:hidden;\n		-khtml-user-select:none;\n	    font-size: 11px;\n	}\n	\n	*{ -khtml-user-drag:none; }\n\n	a:focus{outline:none;}\n\n	#tabPages{\n	position:absolute;\n	left:0px;\n	top:80px;\n	right:0px;\n	bottom:0px;\n	border-top:1px solid #999999;\n	}\n	\n	#preventClickingTabLabels{\n		  position:absolute;\n		  left:0px;\n		  top:60px;\n		  height:10px;\n		  right:0px;\n		  background:#666666;\n	}\n	\n	#tabPages>div{\n		position:absolute;\n		left:0px;\n		top:0px;\n		bottom:0px;\n		right:0px;\n		visibility:hidden;\n		overflow:auto;\n	}\n	\n	#tabPages>div.selected{\n		visibility:visible;\n	}\n	\n	#windowSelector{\n	position:absolute;\n	top:0px;\n	right:0px;\n	text-align:right;\n	background:#4F4F4F;\n	left:300px;\n	padding: 10px;\n	vertical-align: middle;\n	height: 30px;\n	\n	}\n	\n	#domTab{\n		overflow:auto;\n	}\n	\n	#console {\n		position:absolute;\n		left:0px;\n		top:0px;\n		bottom:30px;\n		right:0px;\n		margin:0px;\n		padding:0px;\n		list-style-image:none;\n		list-style-type:none;\n		overflow:auto;\n	}\n	\n	\n	#console > li{\n		border-bottom:1px solid #CCCCCC;\n		position:relative;\n	}\n\n	\n	.typeBox{\n		position:absolute;\n		left:0px;\n		top:0px;\n		width:10px;\n		margin-left:0px !important;\n		height:13px;\n		text-align:center;\n		padding:3px;\n		padding-top:0px;\n		font-family:Verdana;\n		border:1px solid #000000;\n		-webkit-border-top-left-radius:9px;\n		-webkit-border-top-right-radius:9px;		\n		-webkit-border-bottom-left-radius:9px;		\n		-webkit-border-bottom-right-radius:9px;		\n	}\n	\n	#console > li > *{\n		margin-left:10px;\n	}\n	\n	.consoleFrom, .consoleTimestamp{\n		color:#999999;\n	}\n	.consoleItemText{\n		color:#003366;\n	     /*font-weight:bold;*/\n		margin-left:2px ! important;\n		padding:3px;\n		-khtml-user-select:auto;\n	}\n	\n	.error .consoleItemText{\n        background:#FFFFE0;\n        color:#FF3030;\n    }\n    \n    .warn .consoleItemText{\n        background:#00FFFF;\n        color: #000000;\n    }\n\n	.warn .typeBox{\n		border:1px solid #8db047;\n		color:#000000;\n		background:#ffff00;\n	}\n	.error .typeBox{\n		border:1px solid #c00504;\n		color:#ffffff;\n		font-weight:bold;\n		background:#fe0000;\n	}\n	.info .typeBox{\n		border:1px solid #113c9f;\n		color:#ffffff;\n		font-style:italic;\n		background:#0053fe;\n	}\n	.warn .consoleItemText, .info .consoleItemText, .error .consoleItemText{\n		margin-left:20px ! important;\n	}\n	\n	#evalConsole{\n		position:absolute;\n		left:0px;\n		bottom:0px;\n		height:30px;\n		right:0px;\n		border-top:1px solid #999999;\n	}\n	#evalConsoleText{\n		position:absolute;\n		left:30px;bottom:0px;\n		top:0px;right:0px;\n		border:none;\n	}\n	#evalConsoleLabel{\n		position:absolute;\n		left:0px;bottom:0px;\n		top:0px;\n		padding-top:5px;\n		border:none;\n	}\n	#tabLabels{\n		overflow:hidden;\n	margin:0px;\n	list-style-image:none;\n	list-style-type:none;\n	position:absolute;\n	top:50px;\n	left:70px;\n	right:0px;\n	height:30px;\n	padding-left:5px;\n	border-top-width: 0px;\n	border-top-style: solid;\n	border-top-color: #999999;\n	background-color: #BBBBBB;\n	border-left-width: 2px;\n	border-left-style: solid;\n	border-left-color: #4F4F4F;\n	padding-top: 0px;\n	padding-right: 0px;\n	padding-bottom: 0px;\n	}\n	#tabLabels>li, #tabLabels>li.bounceOff{\n	display:block;\n	padding:5px;\n	cursor:pointer;\n	float:left;\n	height:12px;\n	-webkit-border-top-left-radius:5px;\n	-webkit-border-top-right-radius:5px;\n	font-family: Arial, Helvetica, sans-serif;\n	font-size: 11px;\n	font-style: normal;\n	font-weight: 600;\n	color: #5A6F7F;\n	line-height: normal;\n	margin-top: 5px;\n	margin-right: 2px;\n	margin-bottom: 2px;\n	margin-left: 2px;\n	text-transform: uppercase;\n	}\n	\n	\n	#tabLabels>li.bounceOn{\n		background:#BDB0FF;\n		border-bottom:none;\n		xcolor:#ffffff;\n	}\n	\n	#tabLabels>li.selected{\n		background:#DADADA;\n		color:#0066CC;\n	}\n	\n	#tabLabels>li:hover{\n	background-color: #DADADA;\n	color: #0066CC;\n	}\n	\n	\n	#toolToggle{\n	margin:0px;\n	list-style-image:none;\n	list-style-type:none;\n	position:absolute;\n	top:50px;\n	left:-2px;\n	right:0px;\n	height:30px;\n	padding-left:5px;\n	border-top-width: 0px;\n	border-top-style: solid;\n	border-top-color: #999999;\n	background-color: #BBBBBB;\n	border-left-width: 2px;\n	border-left-style: solid;\n	border-left-color: #4F4F4F;\n	padding-top: 0px;\n	padding-right: 0px;\n	padding-bottom: 0px;\n	width: 95px;\n	}\n	\n	#toolToggle>li, #tabLabels>li.bounceOff{\n	display:block;\n	padding:5px;\n	cursor:pointer;\n	float:left;\n	height:12px;\n	-webkit-border-top-left-radius:5px;\n	-webkit-border-top-right-radius:5px;\n	font-family: Arial, Helvetica, sans-serif;\n	font-size: 11px;\n	font-style: normal;\n	font-weight: bold;\n	color: #4F4F4F;\n	line-height: normal;\n	margin-top: 5px;\n	margin-right: 2px;\n	margin-bottom: 2px;\n	margin-left: 2px;\n	text-transform: uppercase;\n	}\n	\n	#toolToggle>li.selected{\n		background:#DADADA;\n		color:#333333;\n	}\n	\n	#toolToggle>li:hover{\n	background-color: #DADADA;\n	color: #333333;\n	}\n	\n	.selected2Tree > .treeLabel{\n		font-weight:bold;\n	}\n	.selected2Tree {\n		border:1px solid #eeeeee;\n		margin:-1px;\n	}\n	\n	\n	#toolsLabels{\n	margin:0px;\n	list-style-image:none;\n	list-style-type:none;\n	position:absolute;\n	top:0px;\n	left:0px;\n	padding-left:10px;\n	width:320px;\n	height:40px;\n	background:#4F4F4F;\n	padding-top: 10px;\n	padding-right: 10px;\n	padding-bottom: 5px;\n	color:#FFFFFF;\n	font-size:14px;\n	font-family:Verdana, Arial, Helvetica, sans-serif;\n	font-weight:bold;\n	text-shadow:2px 2px 2px black;\n	}\n	#toolsLabels span{\n			position:relative;\n			top:-3px;\n			left:1px;\n			font-size:10px;\n			font-weight:normal;\n		}\n	\n	#toolsLabels>li{\n	padding:5px;\n	margin:3px;\n	margin-right:0px;\n	float:left;\n	height:12px;\n	background-color: #3C3C3C;\n	}\n	\n	#toolsLabels>li.selected{\n		background:#666666;\n		color:#FFFFFF;\n	}\n	\n	#toolsLabels>li:hover{\n		text-decoration:underline;\n	}\n	\n	\n	.treeNode{\n		display:block;\n		position:relative;\n		padding-top:20px;\n		text-decoration:none;\n		color:#000000;\n	}\n	\n	.selected3Tree > .treeLabel{\n		font-weight: normal !important;\n		background: #FFCC00 !important;\n	}\n	\n\n	.hover > .treeLabel, .hover  >.treeLabel2{\n		background:#FFFFCC;\n		-khtml-user-select:text;\n	}\n	\n	.treeLabel{\n		position:absolute;\n		top:0px;\n		left:20px;\n		width:200px;\n		overflow:visible;\n		cursor:pointer;\n		white-space:nowrap;\n	}\n	\n	.noLabel2 > .treeLabel{\n		width:auto !important;\n		overflow:auto !important;\n	}\n	\n	.treeLabel2, .treeEdit{\n		position:absolute;\n		top:0px;\n		left:220px;\n		padding-left:2px;\n		cursor:pointer;\n		white-space:nowrap;\n	}	\n	\n\n	.editing > .treeEdit{\n		display:block !important;\n		width:400px;\n		left:220px;\n		right:0px;\n	}\n	\n	.treeNode > .treeEdit{\n		display:none;\n	}\n	\n	.tagDomNodeName{\n		color:#ee00ee;\n	}\n	\n	.domTreeNode .treeLabel{\n		width:auto;\n	}\n	\n	.tagDomNodeAttribute{\n        color:#0000ee;\n    }\n	\n	.editing > .treeLabel2{\n		display:none !important;\n	}\n	.treeNode > .treeLabel2{\n		display:block;\n	}\n		\n	.treeAnchorMac{\n		position:absolute;\n		top:0px;\n		left:0px;\n		margin:1px;\n		width:12px;\n		height:12px;\n		cursor:pointer;\n		font-size:13px;\n		overflow:hidden;\n		color:#ffffff;\n		background:#cccccc;\n		-webkit-border-radius:6px;\n	}\n	.treeAnchorMac div{\n		margin-top: -3px;\n		width:25px;\n		margin-left: -6px;\n		margin-right: -2px;\n		text-align:center;\n	}\n	.treeNodeEmpty{\n		display:none;\n	}\n	.treeAnchorWin{\n		position:absolute;\n		top:0px;\n		left:0px;\n		margin:1px;\n/*		border:1px solid #999999;\n		border-left:1px solid #eeeeee;\n		border-top:1px solid #eeeeee;*/\n		width:12px;\n		height:12px;\n		cursor:pointer;\n		font-size:15px;\n		overflow:hidden;\n		color:#ffffff;\n		background:#cccccc;\n		-webkit-border-radius:6px;\n	}\n	.treeAnchorWin div{\n		margin-top: -4px;\n		width:25px;\n		margin-left: -6px;\n		margin-right: -3px;\n		text-align:center;\n	}\n	\n	.treeChildren{\n		margin-left:20px;\n	}\n	\n	.nodeEndLabelDiv, .nodeEndLabelDiv *{\n	   display:none;	\n	}\n	\n	.nodeEndLabelDivVisible{\n       margin-left:20px;\n	   padding-bottom:5px;  \n	   white-space:nowrap;\n    }\n	\n	.treeText{\n		position:relative;\n		margin:0px;\n		text-decoration:none;\n		color:#000000;\n		padding:0px;\n	\n		\n	}\n	.treePreLine{\n		position:absolute;\n		top:0px;\n		text-align:right;\n		width:45px;\n		padding-right:3px;\n		padding:0px;\n		background:#eeeeee;\n	}\n	\n	.selected3Tree > .treePreLine{\n		background:#cccccc;\n		color:blue;\n	}\n	\n	.selected3Tree > img{\n		outline: 1px solid blue;\n	}\n	.treePreText{\n		margin-left:49px;\n		padding-left:4px;\n		-khtml-user-select:auto;\n        border: 1px solid #ffffff;\n	}\n	\n	.inPlaceEditor{\n                cursor:pointer;\n                display:inline;\n                position:relative;\n     }\n	\n	/* TREE CLASSES\n	*/\n	#html2Tab{\n		overflow:hidden !important;\n	}\n	#html2Div{\n		position:absolute;\n		left:0px;\n		top:0px;\n		bottom:0px;\n		overflow:auto;\n	}\n	#html2Split{\n		position:absolute;\n		width:5px;\n		top:0px;\n		bottom:0px;\n		background:#cccccc;\n		cursor:pointer;\n	}\n	#css2Div{\n		position:absolute;\n		top:0px;\n		bottom:0px;\n		right:0px;\n	}\n	#css2TabLabels{\n		margin:0px;\n		padding:0px;\n		background:#cccccc;\n		list-style-image:none;\n		list-style-type:none;\n		position:absolute;\n		border-bottom:5px solid #666666;\n		top:0px;\n		left:0px;\n		right:0px;\n		height:20px;\n		padding-left:0px;\n	}\n	#css2TabLabels>li{\n		display:block;\n		padding:3px;\n		padding-bottom:0px;\n		margin:2px;\n		margin-left:0px;\n		margin-bottom:0px;\n		float:left;\n		height:15px;\n		background:#ffffff;\n		-webkit-border-top-left-radius:5px;\n		-webkit-border-top-right-radius:5px;		\n			cursor:pointer;\n	}\n	\n	#css2TabLabels>li.selected{\n		background:#666666;\n		color:#FFFFFF;\n	}\n	\n	\n	#css2TabPages{\n		position:absolute;\n		left:0px;\n		top:24px;\n		right:0px;\n		bottom:0px;\n		border-top:1px solid #999999;\n	}\n\n	#css2TabPages>div{\n		position:absolute;\n		left:0px;\n		top:0px;\n		bottom:0px;\n		right:0px;\n		visibility:hidden;\n		overflow:auto;\n	}\n	\n	#tabPages>div.selected  #css2TabPages>div.selected{\n		visibility:visible;\n	}\n	\n	#windowList{\n		width:100px;\n		\n	}\n	.menu {\n		position:absolute;\n		display:none;\n		background:white;\n		border-bottom:1px solid #cccccc;\n		border-right:1px solid #cccccc;		\n		font-size:12px;\n		background:#eeeeee;\n		width:170px;\n	}\n	.menu ul{\n		margin:0px;\n		padding:0px;\n		list-style-image:none;\n		list-style-type:none;\n	}\n	.menu li a{\n		display:block;\n		padding:5px;\n		color:#333333;\n		border-bottom:1px solid #eeeeee;\n		text-decoration:none;\n	}\n	.menu li a:hover{\n		background:blue;\n		color:white;\n	}\n	\n	#searchTextBox{\n		position:absolute;\n		right:20px;\n		bottom:40px;\n		display:none;\n		background:white;\n		border:1px solid #cccccc;\n		padding:5px;\n		-webkit-border-radius:5px;		\n	}\n	.searchselect{\n		-khtml-user-select:text !important;\n	}\n	pre{\n		margin:0px;\n		padding:0px;\n	}\n	.selectable, .selectable *{\n		-khtml-user-select:text !important; \n	}\n	\n	.searchselect::selection{\n		background:#38D878;                    \n	}\n	\n</style>\n<script>\n//<![CDATA[\n	var air;\n\nfunction cloneConfig()\n{\n	if(typeof config=='undefined') return;\n	for(var i in config){\n		air.Introspector.config[i]=config[i];\n	}\n}\n\nfunction doLoad(){\n\n/*	if(typeof runtime=='undefined'&&opener){\n		var air = opener.air;\n	}else{\n		loadMyAir();\n	}*/\n	cloneConfig();\n	debugWindow = new air.Introspector.DebugWindow();\n	air.Introspector.debugWindow = debugWindow;\n	try{\n		debugWindow.init(window);\n	}catch(e) { alert(e+' '+e.line); }	\n	\n	try{\n		var l =initCallbacks.length;\n		for(var i=0;i<l;i++){\n			initCallbacks[i](debugWindow);\n		}\n	}catch(e){alert(e+' '+e.line);}\n	isLoaded = true;\n\n		\n}\n\nfunction doUnload(){\n	debugWindow.dispose();\n}\n\n\nif(typeof air=='undefined') air = {};\nair.Introspector = { localIframeDebug: true };\n\n\n\n\n(function(){\n\n		//=======================================================================================================================================================\n		//introspector.js\n		//=======================================================================================================================================================\n		\n\n\n\n//----------------------------------------------------------------------------------------------------\n/**\n*	@API air.Introspector.Console\n*	@description Exposes log, warn, info, error, dump to the user\n*	THIS IS THE ONLY SUPPORTED APIs \n*/\n\nair.Introspector.Console = {\n		 log: function(){\n		   	air.Introspector.logArguments(arguments,\n			 		{htmlLoader:isAppSandbox?window.htmlLoader:null});\n		 },\n\n		 warn : function(){\n		        air.Introspector.logArguments(arguments,\n			 			{htmlLoader:isAppSandbox?window.htmlLoader:null, type:'warn'});        \n		 },\n\n		 info : function(){\n		        air.Introspector.logArguments(arguments,\n			 			{htmlLoader:isAppSandbox?window.htmlLoader:null, type:'info'});        \n		 },\n \n		 error : function(){\n		        air.Introspector.logArguments(arguments,\n			 			{htmlLoader:isAppSandbox?window.htmlLoader:null, type:'error'});        \n		 }, \n		 dump : function(obj, level){\n			air.Introspector.logArguments(air.Introspector.dump(obj, level),\n			 		{htmlLoader: isAppSandbox?window.htmlLoader:null, usePre:true});\n		 }\n};\n\n//----------------------------------------------------------------------------------------------------\n\nair.Introspector.config = {\n    showTimestamp: true,						//Make the console show time stamps before each line\n    showSender: true,							//Make the console show time stamps\n    wrapColumns: 2000,							//Source files are soft-wrapped at around 2000 columns by default \n	flashTabLabels: true,						//Console and xhr columns can flash whenever something happend to them (eg. logged something). You can turn it off\n												//by setting this to false\n	closeIntrospectorOnExit: true,				//Makes the inspector window close when the last window closed\n	debugRuntimeObjects: true,					//Also expand ActionScript objects\n	introspectorKey:122,						//Inspect key - by default it is F11 (122)\n	debuggerKey:123, 							//Toggle inspectors visibility - by default it is F12 (123)\n    useAirDebugHtml: false,						//Internal only\n};\n\n\n/**\n*	@module air.Introspector\n*/\n\nair.Introspector.extend = function(dst, src){\n	//Take every property from src and put it in dst\n    for(var i in src){\n        dst[i]=src[i];\n    }\n};\n\n//	Checking if the user has configured Introspector using global AIRIntrospectorConfig variable\nif(typeof AIRIntrospectorConfig!='undefined'){\n	air.Introspector.extend(air.Introspector.config, AIRIntrospectorConfig);\n}\n\nvar eventListeners = [];\n\n//	Can not expand ActionScript objects from remote sandbox - we can not even access ActionScript from there \n//	just disabled this feature\nif(!isAppSandbox) air.Introspector.config.debugRuntimeObjects = false;\n\n//	Made this use g/setters in order to make it easy to send its value over the bridge\nair.Introspector.__defineGetter__('inspect', function(){\n    return air.Introspector._inspect;\n});\n\nair.Introspector.__defineSetter__('inspect', function(value){\n    air.Introspector._inspect=value;\n    if(!isAppSandbox){\n        setTimeout(function(){\n			air.Introspector.noBridge(function(){\n				parentSandboxBridge.air_Introspector_setInspect(value);\n			});\n        }, 0);\n    }else{\n		if(!value){\n			try{\n				air.Introspector.hideHighlight();\n			}catch(e){}\n		}\n	}\n});\n	\nair.Introspector.extend(air.Introspector, { \n\n	/**\n	*	Makes it easier to acces runtime packages\n	*	it makes sense only in the application sandbox\n	*/\n	runtime: isAppSandbox?{ \n		HTMLLoader : window.runtime.flash.html.HTMLLoader,\n		Event : window.runtime.flash.events.Event,\n		IOErrorEvent: window.runtime.flash.events.IOErrorEvent,\n		NativeApplication: window.runtime.flash.desktop.NativeApplication,\n		URLLoader : window.runtime.flash.net.URLLoader,\n		URLRequest : window.runtime.flash.net.URLRequest,\n		NativeWindowInitOptions : window.runtime.flash.display.NativeWindowInitOptions,\n		Capabilities: window.runtime.flash.system.Capabilities,\n		trace : window.runtime.trace,\n	}:null,\n	\n	_inspect: false,\n	remoteInspect: false,\n    canClick: false,\n\n	bridgeCallbacks: [],\n	\n	\n	/**\n	*	Different coloring styles for tag names, by default 'default' is used\n	*	Undocumented feature\n	*		- you can change the color of elements while inspecting by tag name, check bellow the body: 0x00CC00 line,\n	*		  uncomment that line, duplicate and change it with your own colors\n	*/\n    highlightBgColors: {\n        'default': 0xFFCC00,\n        //body: 0x00CC00,\n        \n    },\n\n	/**\n	*	@function trimRegExp\n	*	@description Trims spaces from a string\n	*	@private\n	*/\n    trimRegExp: /^[\\s\\r\\n]*([\\s\\S]*?)[\\s\\r\\n]*$/g,\n    trim:function(str){\n    	return str.replace(air.Introspector.trimRegExp, '$1');\n    },\n\n	/**\n	*	@function blockWrap\n	*	@description Wraps a string by air.Introspector.config.wrapColumns columns\n	*/\n    blockWrap: function(str){\n    	//used for spliting large lines in <pre>\n    	var cols = air.Introspector.config.wrapColumns;\n    	var lines = str.split(/\\n/);\n    	var buffer = [];\n    	var l = lines.length;\n    	var lineNumbers = [];\n    	for(var i=0;i<l;i++){\n    		lineNumbers.push(i+1);\n    		var line = lines[i];\n    		while(line.length>cols){\n    			buffer.push(line.substr(0, cols));\n    			line = line.substr(cols);\n    			lineNumbers.push('');\n    		}\n    		buffer.push(line);\n    	}\n    	lineNumbers.push('EOF');\n    	return [buffer.join('\\n'), lineNumbers.join('\\n')];\n    },\n	\n	/**\n	*	@function getTextFormat\n	*	@description Returns a new flash TextField\n	*/\n    createTextField: function(parentSprite, fontSize, fontBold) {\n		if(isAppSandbox){\n       		var tf = new runtime.flash.text.TextField();\n	        tf.embedFonts = false;\n	        tf.autoSize = runtime.flash.text.TextFieldAutoSize.LEFT;\n	        tf.antiAliasType = runtime.flash.text.AntiAliasType.ADVANCED;\n	        tf.defaultTextFormat = air.Introspector.getTextFormat(fontSize, fontBold);\n	        tf.selectable = false;\n	        tf.mouseEnabled = true;\n	        tf.x = 4;\n	        tf.text = \"\";\n	        if(parentSprite.numChildren > 0) {\n	            var sibling = parentSprite.getChildAt(parentSprite.numChildren - 1);\n	            tf.y = sibling.y + sibling.height + 15;\n	        }\n	        parentSprite.addChild(tf);\n	        return tf;\n		}else{\n			//should not get here\n			return null;\n		}\n    },\n    /**\n	*	@function getTextFormat\n	*	Returns a new flash TextFormat\n	*	see createTextField\n	*/\n    getTextFormat: function(fontSize, fontBold){\n		if(isAppSandbox){\n        	var format = new runtime.flash.text.TextFormat();\n	        format.size = fontSize;\n	        format.font = \"Tahoma\";\n	        format.bold = fontBold;\n	        format.color = 0x330066;\n        	return format;\n		}else{\n			//should not get here\n			return null;\n		}\n    },\n    \n	/**\n	*	@function extendRect \n	*	@description Initializes the sprite with values from the rectangle\n	*/\n	extendRect: function(sprite, rect){\n		sprite.x = rect.x;\n		sprite.y = rect.y;\n		sprite.width = rect.width;\n		sprite.height = rect.height;\n		sprite.scaleX = rect.scaleX;\n		sprite.scaleY = rect.scaleY;			\n	},\n	\n	\n	/**\n	*	@function showHighlight\n	*	@description Shows a highlighting flash sprite using coordinates from rectangle\n	*/\n    showHighlight: function(rect){\n		if(isAppSandbox){\n	        //dehilight everyone else\n	        var ownedWindows = air.Introspector.getHtmlWindows();\n	        for(var i=ownedWindows.length-1;i>=0;i--){\n	                try{\n	                    ownedWindows[i].htmlLoader.window.air.Introspector.hideHighlight();\n	                }catch(e){\n	                    //no air.Introspector\n	                }\n	        }\n	        air.Introspector.extendRect(air.Introspector.highlightSprite, rect);\n		}else{\n			setTimeout(function(){\n				air.Introspector.noBridge(function(){\n					parentSandboxBridge.air_Introspector_showHighlight(rect);				\n				});\n				\n			}, 0);\n			\n			\n		}\n    },\n\n	/**\n	*	@function hideHighlight\n	*	@description Make the higlight box go away\n	*/\n    hideHighlight: function(){\n		if(isAppSandbox){\n        	air.Introspector.extendRect(air.Introspector.highlightSprite, {x:0, y:0, width:0, height:0, scaleX:0, scaleY:0});\n	        air.Introspector.highlightText.visible = false;\n		}else{\n			setTimeout(function(){\n				try{\n					parentSandboxBridge.air_Introspector_hideHighlight();\n				}catch(e){ \n						// no bridge yet\n					}\n			}, 0);\n		}\n    },\n\n	/**\n	*	@function remoteClick\n	*	@description Make the remote sandbox know that the inspection finished\n	*/\n	remoteClick: function(){\n		air.Introspector.debugWindow.finishInspect(false);\n        air.Introspector.hideHighlight();\n	},\n	\n	\n	/**\n	*	@function createHighlight\n	*	@description 	Creates a flash sprite used to higlight elements\n	*				    By using this method we are sure that no dom manipulation is done and  \n	*				    no style is changed in HTML.\n	*/\n    createHighlight: function(){\n		if(isAppSandbox){\n	        var sprite = new runtime.flash.display.Sprite();\n	        sprite.mouseEnabled =  false;\n	        sprite.width = 0;\n	        sprite.height = 0;\n	        sprite.buttonMode = true;\n	        var prevent = function(element, event, isClick){\n	            air.Introspector.addEventListener(element, event, function(e){\n	                if((air.Introspector.inspect||air.Introspector.remoteInspect) &&sprite.hitTestPoint(e.stageX, e.stageY)){\n	                    e.preventDefault();\n	                    e.stopPropagation();\n	                    e.stopImmediatePropagation();\n	                   	if(isClick&&air.Introspector.canClick){\n							if(air.Introspector.remoteInspect){\n								try{\n									air.Introspector.inspectFrame.contentWindow.childSandboxBridge.air_Introspector_remoteClick();\n								}catch(e){ air.Introspector.noChildBridge(air.Introspector.inspectFrame); }\n							}else{\n	                        	air.Introspector.debugWindow.finishInspect(false);\n		                        air.Introspector.hideHighlight();\n							}\n	                    }\n	                }\n\n	            }, true, 2000000);\n	        };\n	        var check = function(element, event){\n	            air.Introspector.addEventListener(element, event, function(e){\n	               if((air.Introspector.inspect||air.Introspector.remoteInspect)&&nativeWindow.active){\n	                    setTimeout(function(){\n	                        air.Introspector.canClick = true;\n	                    }, 100);\n	               }\n	            }, true, 200000);\n	        }\n        \n	        var labelMover = function(element, event){\n	        	air.Introspector.addEventListener(element, event, function(e){\n		           if((air.Introspector.inspect||air.Introspector.remoteInspect)){\n	                  air.Introspector.highlightText.x = e.stageX+15;\n	                  air.Introspector.highlightText.y = e.stageY+15;\n//					  air.Introspector.highlightText.visible = true;\n	               }else{\n\n	                  air.Introspector.highlightText.visible = false;\n	               }\n	        	}, true, 200000);\n	        }\n	       prevent(htmlLoader.stage, runtime.flash.events.MouseEvent.CLICK, true);\n	       prevent(htmlLoader.stage, runtime.flash.events.MouseEvent.MOUSE_DOWN);\n	       prevent(htmlLoader.stage, runtime.flash.events.MouseEvent.MOUSE_UP);\n	       prevent(htmlLoader.stage, runtime.flash.events.MouseEvent.DOUBLE_CLICK);\n	       check(htmlLoader.stage, runtime.flash.events.MouseEvent.MOUSE_MOVE);\n	       check(nativeWindow, runtime.flash.events.Event.ACTIVATE);\n	       labelMover(htmlLoader.stage, runtime.flash.events.MouseEvent.MOUSE_MOVE);\n	       window.htmlLoader.stage.addChild(sprite); \n	       air.Introspector.highlightSprite = sprite;\n\n	       air.Introspector.highlightText = new runtime.flash.display.Sprite();\n	       window.htmlLoader.stage.addChild(air.Introspector.highlightText); \n\n	       air.Introspector.highlightText.graphics.beginFill(0xeeeeee, 0.8);\n	       air.Introspector.highlightText.graphics.lineStyle(1, 0xeeeeee, 0.9, false);\n	       air.Introspector.highlightText.graphics.drawRect(0, 0, 250, 40);\n	       air.Introspector.highlightText.visible = false;\n	       air.Introspector.highlightLine1 = air.Introspector.createTextField(air.Introspector.highlightText, 16, true);\n	       air.Introspector.highlightLine2 = air.Introspector.createTextField(air.Introspector.highlightText, 10, false);\n       }else{\n			//should not be here\n	   }\n    },\n    \n	/**\n	*	@function addEventListener\n	*	@description Add a listener and stores it for future cleanup\n	*/\n	addEventListener: function(obj, eventName, listener, capture, priority){\n		eventListeners.push([obj, eventName, listener, capture]);\n		obj.addEventListener(eventName, listener, capture, priority);\n	},\n	\n	/**\n	*	@function removeEventListener\n	*	@description Removes listener\n	*/\n	removeEventListener: function(obj, eventName, listener, capture){\n		for(var i=eventListeners.length-1;i>=0;i--){\n			var l = eventListeners[i];\n			if(l[0]==obj && l[1]==eventName && l[2]==listener && l[3]==capture)\n				{\n					eventListeners.splice(i, 1);\n					break;\n				}\n		}\n		obj.removeEventListener(eventName, listener, capture);\n	},	\n	\n	/**\n	*	@function drawRect\n	*	@description Draw a rectangle using ActionScript, also use tagName to find out which color to use \n	*	@see air.Introspector.highlightBgColors\n	*/\n	drawRect: function (rect, tagName){\n			var htmlLoaderBounds = htmlLoader.getBounds(htmlLoader.stage);\n	    	rect.x += htmlLoaderBounds.x;\n		    rect.y += htmlLoaderBounds.y;\n			rect.scaleX = 1;\n		    rect.scaleY = 1;\n		    air.Introspector.showHighlight(rect);\n		    air.Introspector.highlightSprite.graphics.clear();\n		    var bgColor = air.Introspector.highlightBgColors[tagName.toLowerCase()];\n		    if(typeof bgColor=='undefined')\n		         bgColor = air.Introspector.highlightBgColors['default'];\n		    air.Introspector.highlightSprite.graphics.beginFill(bgColor, 0.2);\n		    air.Introspector.highlightSprite.graphics.lineStyle(3, bgColor, 0.9, false);\n		    air.Introspector.highlightSprite.graphics.drawRect(0, 0, rect.width, rect.height);\n	},\n	\n	/**\n	*	@function highlightElement\n	*	@description Highlight element e. Get its bounding box and send it directly or over the bridge to air.Introspector.drawRect\n	*	@also air.Introspector.drawRect\n	*/\n    highlightElement: function(e, callback){\n		var rect = air.Introspector.getBorderBox(e);\n	   	if(rect==false)\n			return;\n	\n		if(isAppSandbox){			\n			air.Introspector.drawRect(rect, e.tagName);\n		}else{\n			setTimeout(function(){\n				try{\n					if(!isNaN(rect.width)&&!isNaN(rect.x)){\n						air.Introspector.noBridge(function(){\n							parentSandboxBridge.air_Introspector_drawRect(rect, e.tagName);					\n						});\n					}\n				}catch(e){\n				}\n				if(typeof callback!='undefined') callback();\n			}, 0);\n		}\n    },\n    \n	/**\n	*	@function addKeyboardEvents\n	*	@description 	Registers events on every window that includes AIRDebug.js.\n	*\n	*	By default F11 enables the inspect tool\n	*			   F12 pops up the debug tool\n	*/\n	addKeyboardEvents: function(sprite){\n		air.Introspector.addEventListener(sprite, runtime.flash.events.KeyboardEvent.KEY_DOWN, function(e){\n            if(e.keyCode==air.Introspector.config.introspectorKey){ //F11 key pressed\n				if(typeof air.Introspector.lastElement!='undefined'&&(air.Introspector.lastElement.nodeName=='IFRAME'||air.Introspector.lastElement.nodeName=='FRAME')){\n					try{\n						var contentWindow = air.Introspector.lastElement.contentWindow;\n						if(typeof contentWindow.childSandboxBridge!='undefined'&&\n							typeof contentWindow.childSandboxBridge.air_Introspector_isDebugOpen!='undefined'&&\n							typeof contentWindow.childSandboxBridge.air_Introspector_toggleInspect!='undefined')\n						{\n							if(contentWindow.childSandboxBridge.air_Introspector_isDebugOpen()){\n								contentWindow.childSandboxBridge.air_Introspector_toggleInspect();\n								e.preventDefault();\n								e.stopPropagation();\n								return;	\n							}\n						}\n					}catch(e){\n						//it looks like no debugger in that iframe. go ahead with app sandbox debugger\n					}\n				}\n                air.Introspector.init(false, true, function(){\n                	air.Introspector.debugWindow.toggleInspect();					\n				});\n\n                e.preventDefault();\n				e.stopPropagation();\n            }else if(e.keyCode==air.Introspector.config.debuggerKey){ //F12 key pressed\n                air.Introspector.toggleWindow();\n                e.preventDefault();\n				e.stopPropagation();\n            }else if(e.keyCode==27&&air.Introspector.inspect){\n                air.Introspector.debugWindow.finishInspect();\n                air.Introspector.hideHighlight();\n                e.preventDefault();\n						e.stopPropagation();\n            }else if(e.ctrlKey==true&&e.altKey==false){\n				var tab = null;\n				switch(e.keyCode){\n					case runtime.flash.ui.Keyboard.NUMBER_1:\n						tab = 0;\n					break;\n					case runtime.flash.ui.Keyboard.NUMBER_2:\n						tab = 1;\n					break;\n					case runtime.flash.ui.Keyboard.NUMBER_3:\n						tab = 2;\n					break;\n					case runtime.flash.ui.Keyboard.NUMBER_4:\n						tab = 3;\n					break;\n					case runtime.flash.ui.Keyboard.NUMBER_5:\n						tab = 4;\n					break;\n					case runtime.flash.ui.Keyboard.NUMBER_6:\n						tab = 5;\n					break;\n				}\n				if(tab!=null){\n						air.Introspector.init(false, true, function(){\n							air.Introspector.debugWindow.setTab(tab);							\n						});\n						e.preventDefault();\n						e.stopPropagation();\n				}\n			}\n        }, true, 1000000);\n	},\n	\n	/**\n	*	@function showHighlightLabels\n	*	@description Make the tooltip labels near the highlighting box appear and tell the id/tag name/outer HTML\n	*/\n	showHighlightLabels: function(id, nodeName, outerHTML){\n			if(typeof id!='undefined'&&id.length!=0){\n                air.Introspector.highlightLine1.text = nodeName+' - '+id;\n            }else{\n                air.Introspector.highlightLine1.text = nodeName;  \n            }\n            if(air.Introspector.canClick){\n                air.Introspector.highlightLine2.text = outerHTML.substr(0, 40).replace(/\\n/g, '\\\\n')+'...';\n            }else{\n                air.Introspector.highlightLine2.text = 'Click to activate window';\n                window.clearTimeout(air.Introspector.clickToActivateTimeout);\n                air.Introspector.clickToActivateTimeout = setTimeout(function(){\n                    air.Introspector.highlightLine2.text = outerHTML.substr(0, 40).replace(/\\n/g, '\\\\n')+'...';\n                }, 400)\n            }\n        	air.Introspector.highlightText.visible = true;	\n	},\n	\n	\n	/**\n	*	@function registerUncaughtExceptionListener\n	*	@description Catches all uncaught exceptions from javascript and shows them in the console\n	*/\n	registerUncaughtExceptionListener: function(){\n		\n			air.Introspector.addEventListener(window.htmlLoader,\n					runtime.flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION , \n					function(e){\n						if(e.exceptionValue && \n								e.exceptionValue.air_Introspector_setParentSandboxBridge == true &&\n								e.exceptionValue.air_Introspector_version == air.Introspector.version)\n							{\n								air.Introspector.registerFramesParentSandboxBridge();\n								e.preventDefault();\n								return;\n							}\n						\n						air.Introspector.logError(e.exceptionValue, {htmlLoader:window.htmlLoader});\n						//	e.preventDefault();\n		        	});\n		\n		\n	},\n\n\n	/**\n	*	@function registerCloseEventListener\n	*	@description \n	*/\n	registerCloseEventListener: function(){\n		air.Introspector.addEventListener(window.nativeWindow, air.Introspector.runtime.Event.CLOSE, function(){\n	            var debugWindow = air.Introspector.findDebugWindow();\n	            if(debugWindow!=null){\n	                debugWindow.closedWindow(window.htmlLoader);\n	            }\n	\n	        });\n			\n		\n	},\n\n	/**\n	*	@function registerCompleteEventLisener\n	*	@description Make the Introspector window knwo that we are complete. Register parentSandboxBridge on every frame\n	*/\n	registerCompleteEventListener: function(){\n		air.Introspector.addEventListener(window.htmlLoader, air.Introspector.runtime.Event.COMPLETE, function(){\n					air.Introspector.removeEventListener(window.htmlLoader, air.Introspector.runtime.Event.COMPLETE, arguments.callee);\n					try{\n		           	 //announce the debugWindow to refresh DOM and assets\n			            var debugWindow = air.Introspector.findDebugWindow();\n			            if(debugWindow!=null){\n			            	if(debugWindow.isLoaded){\n			                    debugWindow.completeWindow(window.htmlLoader);\n			            	}\n			            }\n					\n						air.Introspector.registerFramesParentSandboxBridge();\n					}catch(e){\n						runtime.trace(e);\n			            runtime.trace(e.line);\n						air.Introspector.Console.log(e);\n					}\n			});\n	},\n\n	/**\n	*	@function registerFramesParentSandboxBridge\n	*	@description All frames should know about us - registering parentSandboxBridge\n	*/\n	\n	registerFramesParentSandboxBridge: function(){\n			//var modified = false;\n			var iframes = document.getElementsByTagName('iframe');\n			for(var i=iframes.length-1;i>=0;i--){\n				air.Introspector.registerFrame(iframes[i]);\n			}\n\n			var frames = document.getElementsByTagName('frame');\n			for(var i=frames.length-1;i>=0;i--){\n				air.Introspector.registerFrame(frames[i]);				\n			}\n			//return modified;\n	},\n	\n	/**\n	*	@function registerDeactivateEventLisener\n	*	@description Hides the highlighting rectangle and deactivates inspect-clicking for this window\n	*/\n	registerDeactivateEventListener: function(){\n			air.Introspector.addEventListener(window.nativeWindow, air.Introspector.runtime.Event.DEACTIVATE, function(){ air.Introspector.hideHighlight(); air.Introspector.canClick =false; });\n	},\n	\n	/**\n	*	@function registerChildSandboxBridge\n	*	@description Register childSandboxBridge for current iframe\n	*/\n	registerChildSandboxBridge: function(){\n		\n		if(typeof childSandboxBridge=='undefined')\n			childSandboxBridge={};\n			try{\n		childSandboxBridge.air_Introspector_remoteClick = function (){\n			try{\n				air.Introspector.remoteClick();\n			}catch(e){ alert(e+' '+e.line); }\n		}\n		\n		childSandboxBridge.air_Introspector_isDebugOpen = function(){\n			return typeof air.Introspector.debugWindow!='undefined';\n		}\n		\n		childSandboxBridge.air_Introspector_toggleInspect = function (){\n			air.Introspector.init(false, true, function()\n			{\n               	air.Introspector.debugWindow.toggleInspect();							\n			});\n		}\n		\n		childSandboxBridge.air_Introspector_bridgeLoaded = function(){\n			var l = air.Introspector.bridgeCallbacks;\n			for(var i=0;i<l;i++){\n				try{\n					air.Introspector.bridgeCallbacks[i]();\n				}catch(e){\n					air.Introspector.logError(e);\n				}\n			}\n			air.Introspector.bridgeCallbacks = [];\n		}\n			}\n			catch(e){}\n	},\n	\n	/**\n	*	@function createOpenConsoleButton\n	*	@description Creates a button on the top-right corent of the iframe that will open the introspector\n	*/\n	createOpenConsoleButton: function(){\n		var consoleButton = document.createElement('input');\n		consoleButton.onclick = function(){\n			air.Introspector.init(true, true, function(){ });\n		}\n		consoleButton.style.zIndex = 1000000;\n		consoleButton.style.position = 'fixed';\n		consoleButton.style.right = '10px';\n		consoleButton.style.top = '10px';\n		consoleButton.type = 'button';\n		consoleButton.value = 'Open Introspector';\n		document.body.appendChild(consoleButton);								\n	},\n	\n	/**\n	*	@function registerDOMEventListeners\n	*	@description Registers DOMSubtreeModified, DOMCharacterDataModified, mouseover\n	*/\n	registerDOMEventListeners: function(){\n		var hoverTimeout = null;\n		//debugWindow should know about any dom change\n		document.addEventListener('DOMSubtreeModified', function(e){\n            var debugWindow = air.Introspector.findDebugWindow();\n            if(debugWindow!=null&&debugWindow.isLoaded){\n				debugWindow.dom3Event(e);\n            }\n		});\n		document.addEventListener('DOMCharacterDataModified', function(e){\n            var debugWindow = air.Introspector.findDebugWindow();\n            if(debugWindow!=null&&debugWindow.isLoaded){\n				debugWindow.dom3Event(e);\n            }\n		});\n		\n\n           document.body.addEventListener('mouseover', function(e){\n               if(air.Introspector.inspect){\n				setTimeout(function(){\n					if(isAppSandbox){\n							if(!nativeWindow.active)\n								nativeWindow.activate();\n					}\n                    if(e.srcElement){\n						if(isAppSandbox){\n                        	air.Introspector.highlightElement(e.srcElement);\n							air.Introspector.showHighlightLabels(e.srcElement.id, e.srcElement.nodeName, e.srcElement.outerHTML);\n						}else{\n							air.Introspector.highlightElement(e.srcElement, function(){\n								air.Introspector.noBridge(function(){\n									parentSandboxBridge.air_Introspector_showHighlightLabels(e.srcElement.id, e.srcElement.nodeName, e.srcElement.outerHTML);								\n								});\n							});							\n						}\n						if(hoverTimeout) clearTimeout(hoverTimeout);\n						hoverTimeout = setTimeout(function(){\n	                        air.Introspector.init(false, true, function (){\n								air.Introspector.debugWindow.setInspectElement(e.srcElement);\n							});\n						}, 100); \n                    }else{\n                        air.Introspector.hideHighlight();\n                    }\n				}, 0);\n             }else if(isAppSandbox){\n						air.Introspector.lastElement = e.srcElement;\n			 }\n\n           }, true);\n\n		//document.body.addEventListener('mouseout', function(e){\n		//		air.Introspector.hideHighlight();\n        //});\n	},\n	\n	/**\n	*	@function cleanup\n	*	@description Cleans up the html loader\n	*\n	*/\n    cleanup: function(){\n			for(var i=eventListeners.length-1;i>=0;i--){\n				var l = eventListeners[i];\n				try{\n					l[0].removeEventListener(l[1], l[2], l[3]);	\n				}catch(e){}\n			}\n			eventListeners = [];\n			try{\n		    	window.htmlLoader.stage.removeChild(air.Introspector.highlightText); \n			}catch(e){}	    \n	},\n	\n	/**\n	*	@function register\n	*	@description Registers current window in debugger\n	*\n	*	Captures every XHR object created and any uncaught exception \n	*	and sends it to the debugger\n	*/\n    register: function(){\n    	\n    	if (window.XMLHttpRequest && window.XMLHttpRequest.prototype){\n                    window.XMLHttpRequest.prototype.debugopen = window.XMLHttpRequest.prototype.open;\n					window.XMLHttpRequest.prototype.debugsend = window.XMLHttpRequest.prototype.send;\n                    window.XMLHttpRequest.prototype.open = function(method, url, asyncFlag, username, password){\n						if(typeof this.doNotDebug=='undefined'){\n	                   	    var debugWindow = air.Introspector.findDebugWindow();\n			                if(debugWindow!=null){\n								debugWindow.logNet(this, method, url, asyncFlag);\n			                }\n						}\n                        return this.debugopen(method, url, asyncFlag, username, password);\n                    };\n					window.XMLHttpRequest.prototype.send = function(obj){\n						if(typeof this.doNotDebug=='undefined'){\n	                	    var self = this;\n							var debugWindow = air.Introspector.findDebugWindow();\n				            if(debugWindow!=null){\n						        	var a = this.onreadystatechange;\n		                            this.onreadystatechange = function(){\n		                            	 if (typeof a == 'function')a.call(self);\n		                            	 	debugWindow.logNet(self, 'unknown', '', false);\n				                    };\n								if(typeof self.doNotDebug=='undefined')\n		                           	 debugWindow.logNetSend(this, obj);\n			                }\n	                        var ret = this.debugsend(obj);\n							if(debugWindow!=null){\n									debugWindow.logNetSend(this, obj);\n							}\n							return ret;\n						}else{\n	                        return this.debugsend(obj);\n						}\n						\n					}\n        }\n\n		if(isAppSandbox){  \n				air.Introspector.addKeyboardEvents(window.htmlLoader);\n				air.Introspector.registerUncaughtExceptionListener();\n				air.Introspector.registerCloseEventListener();\n				air.Introspector.registerCompleteEventListener();\n	        	air.Introspector.registerDeactivateEventListener();\n	 		    air.Introspector.createHighlight();\n			}else{\n				air.Introspector.registerChildSandboxBridge();\n			}\n			air.Introspector.waitForBody(document, function(){\n		        try{\n					if(!isAppSandbox){ air.Introspector.createOpenConsoleButton(); }\n					air.Introspector.registerDOMEventListeners();\n					window.addEventListener('unload', function(){\n						try{\n							air.Introspector.cleanup();\n							if(!isAppSandbox){\n								//our debugger can NOT live without it's parent\n								air.Introspector.debugWindow.window.close();\n							}\n						}catch(e){  }\n					});\n				}catch(e){\n					if(isAppSandbox){ \n						runtime.trace(e);\n		            	runtime.trace(e.line);\n					}\n					air.Introspector.Console.log(e);\n            	}\n	     });\n\n	\n    },\n\n\n	/**\n	*	@function registerFrame\n	*	@description Makes the parentSandboxBridge available to frame \n	*/\n	registerFrame: function(frame){\n		if(typeof frame.contentWindow.parentSandboxBridge=='undefined')\n			frame.contentWindow.parentSandboxBridge = {};\n			\n		/*frame.contentWindow.parentSandboxBridge.trace = function(a){\n			runtime.trace(a);\n		};*/\n		//checking that the bridge is not already there\n		/*var modified = typeof frame.contentWindow.parentSandboxBridge.air_Introspector_hideHighlight=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_showHighlight=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_drawRect=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_setInspect=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_getWindowTitle=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_checkNativeWindow=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_writeConsoleToClipboard=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_writeConsoleToFile=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_writeConfigFile=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_readConfigFile=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_showHighlightLabels=='undefined'\n			|| typeof frame.contentWindow.parentSandboxBridge.air_Introspector_getFrameId=='undefined';*/\n		\n		frame.contentWindow.parentSandboxBridge.air_Introspector_hideHighlight = function(){\n				air.Introspector.hideHighlight();\n		};\n			\n		frame.contentWindow.parentSandboxBridge.air_Introspector_showHighlight = function(rect){\n				air.Introspector.showHighlight(rect);\n		};\n			\n		frame.contentWindow.parentSandboxBridge.air_Introspector_drawRect = function(rect, tagName){\n				var frameRect = air.Introspector.getBorderBox(frame);\n				var blw = air.Introspector.getIntProp(frame, \"border-left-width\");\n                var btw = air.Introspector.getIntProp(frame, \"border-top-width\");\n				if(frameRect==null) return;\n				rect.x+=frameRect.x+2*blw;\n				rect.y+=frameRect.y+2*btw;\n				air.Introspector.drawRect(rect, tagName);\n		};\n\n		frame.contentWindow.parentSandboxBridge.air_Introspector_setInspect = function(enabled){\n				air.Introspector.inspectFrame = enabled?frame:null;\n				air.Introspector.remoteInspect = enabled;\n				if(!enabled){\n					air.Introspector.hideHighlight();\n				}\n		};\n		frame.contentWindow.parentSandboxBridge.air_Introspector_getWindowTitle = function(){\n			return document.title;\n		};\n		frame.contentWindow.parentSandboxBridge.air_Introspector_checkNativeWindow = function(title){\n			var htmlWindows = air.Introspector.runtime.NativeApplication.nativeApplication.openedWindows;\n			for(var i=htmlWindows.length-1;i>=0;i--){\n				if(htmlWindows[i].title==title){\n					return true;\n				}\n			}\n			return false;\n		};\n		\n		frame.contentWindow.parentSandboxBridge.air_Introspector_writeConsoleToClipboard = function(str){\n			air.Introspector.writeConsoleToClipboard(str);\n		};\n		\n		frame.contentWindow.parentSandboxBridge.air_Introspector_writeConsoleToFile = function(str){\n			air.Introspector.writeConsoleToFile(str);\n		};\n		\n		frame.contentWindow.parentSandboxBridge.air_Introspector_writeConfigFile = function(config){\n			return air.Introspector.writeConfigFile(config, true);			\n		}\n		\n		frame.contentWindow.parentSandboxBridge.air_Introspector_readConfigFile = function(){\n			return air.Introspector.readConfigFile(true);\n		}\n		\n		frame.contentWindow.parentSandboxBridge.air_Introspector_showHighlightLabels = function(id, nodeName, outerHTML){\n			air.Introspector.showHighlightLabels(id, nodeName, outerHTML);\n		};\n		\n		frame.contentWindow.parentSandboxBridge.air_Introspector_getFrameId = function(){\n			return frame.id;\n		}\n		\n		frame.contentWindow.parentSandboxBridge.air_Introspector_getNextWindowId = function(){\n			return ++air.Introspector.times;\n		}\n		\n		if(typeof frame.contentWindow.childSandboxBridge!='undefined'\n				&& typeof frame.contentWindow.childSandboxBridge.air_Introspector_bridgeLoaded!='undefined'){\n			frame.contentWindow.childSandboxBridge.air_Introspector_bridgeLoaded();\n		}\n		\n		\n		//return modified;\n	},\n	\n	/**\n	*	@function waitForBody\n	*	@description Wait until document.body is available\n	*/\n	waitForBody: function(document, callback){\n		if(document.body){\n			callback();\n		}else{\n			setTimeout(air.Introspector.waitForBody, 10, document, callback);\n		}\n	},\n    \n	/**\n	*	@function toggleWindow\n	*	@description Shows/Hides the debug tool\n	*/\n    toggleWindow:function(){\n        air.Introspector.init(true, false, function(justCreated){\n			if(!justCreated)\n				air.Introspector.debugWindow.nativeWindow.visible ^= true;\n		});\n        \n    },\n	\n	\n	/**\n	*	@function init\n	*	@description Makes sure the debug tool is enabled\n	*/\n    init: function(showLoader, toggle, callback){\n		if(!air.Introspector.canInit())\n			return;\n	\n		if(typeof showLoader=='undefined') showLoader = false;\n		if(typeof toggle=='undefined') toggle = true;\n	\n		if(isAppSandbox){\n			\n			if(typeof air.Introspector.debugWindow=='undefined' || air.Introspector.debugWindow.nativeWindow.closed){\n				delete air.Introspector.debugWindow;\n	           var debugWindow = air.Introspector.findDebugWindow();\n	           if(debugWindow!=null && !debugWindow.nativeWindow.closed){\n	               air.Introspector.debugWindow = debugWindow;\n				if(toggle){\n					air.Introspector.debugWindow.nativeWindow.visible = true;			   \n					if(!showLoader){\n						nativeWindow.activate();\n					}\n				}\n				callback(false);\n	           }else{\n				   air.Introspector.loadDebugger(function(debugWindow){\n						air.Introspector.debugWindow = debugWindow;\n						callback(true);\n				   }, showLoader);\n	           }\n	        }else{\n				if(toggle){\n					if(showLoader){\n						air.Introspector.debugWindow.nativeWindow.activate(); \n					}\n				}\n				callback(false);\n			}\n		}else{\n			if(typeof activeWindow=='undefined'){\n				air.Introspector.registerChildSandboxBridge();\n			}\n			\n			if(typeof air.Introspector.debugWindow=='undefined'||\n				typeof air.Introspector.debugWindow.window.air=='undefined'){ \n/*				(air.Introspector.debugWindow.isWindowCreated\n					&&air.Introspector.debugWindow.isLoaded \n					  &&air.Introspector.debugWindow.window \n						&&!parentSandboxBridge.air_Introspector_checkNativeWindow(air.Introspector.parentWindowTitle + ': '+air.Introspector.debugWindow.window.document.title))){*/\n				delete air.Introspector.debugWindow;\n\n\n				air.Introspector.loadDebugger(function(debugWindow){\n						air.Introspector.debugWindow = debugWindow;\n						callback(true);\n				   });\n//				air.Introspector.debugWindow = new air.Introspector.DebugWindow ({activateDebug: showLoader, activeWindow: window});\n			}else if(!air.Introspector.debugWindow.isWindowCreated){\n				return;\n			}else{\n				callback(false);\n			}\n		}\n    },\n    times:0,	//make the window.open page name unique - this is the number of opened and closed introspector windows\n	/**\n	*	@function tryCreateWindow\n	*	@description window.Open in browser/remote sandbox is not allowed if the action is not iniated by the user (eg. user gesture, mouse click)\n	*				 We can only wait for that moment. Until that happends we record all the callbacks and run them when the Introspector is laoded \n	*	@runs in remote sandbox only\n	*/\n	tryCreateWindow: function(callbacks){\n//		try{\n			var self = this;\n			var w;\n			var iframeId;\n			\n/*			if(typeof parentSandboxBridge=='undefined'){\n				air.Introspector.noBridge(function(){\n					air.Introspector.tryCreateWindow(callbacks);					\n				});\n				return;\n			}*/\n\n			air.Introspector.parentWindowTitle = parentSandboxBridge.air_Introspector_getWindowTitle();\n\n			if(typeof parentSandboxBridge!='undefined'&&typeof parentSandboxBridge.air_Introspector_getFrameId!='undefined')\n				iframeId  = parentSandboxBridge.air_Introspector_getFrameId();\n			\n			if(typeof parentSandboxBridge!='undefined'&&typeof parentSandboxBridge.air_Introspector_getNextWindowId!='undefined')\n				air.Introspector.times = parentSandboxBridge.air_Introspector_getNextWindowId();\n			else\n				air.Introspector.times ++ ; //we should never be here - just in case, we should increment this\n			\n			if(typeof air.Introspector.config.useAirDebugHtml=='undefined'||air.Introspector.config.useAirDebugHtml==false){\n				w = window.open('about:blank', 'debugger'+air.Introspector.times, 'width=640,height=480,resizable=1');\n				if(w&&w.document){\n					w.isAppSandbox = isAppSandbox;\n					w.opener = window;\n					w.iframeId = iframeId;\n					w.initCallbacks = callbacks;	\n					w.activeWindow = window;\n					w.isLoaded = false;\n					w.config = air.Introspector.config;\n					w.document.open();\n					w.document.write(air.Introspector.contentString);\n					w.document.close();\n				}\n			}else{\n				w = window.open('DebugUI.html', 'debugger'+air.Introspector.times, 'width=640,height=480,resizable=1');\n				\n				if(w&&w.document){\n					w.opener = window;\n					w.iframeId = iframeId;\n					w.activeWindow = window;				\n					w.config = air.Introspector.config;\n					w.initCallbacks = callbacks;				\n					w.isLoaded = false;\n					w.isAppSandbox = isAppSandbox;\n				}\n			}\n			return w;\n//		}catch(e){\n//			alert(e+' '+e.line);\n//		}\n	},\n	\n	/**\n	*	@function loadDebugger\n	*	@description Loads the debugger window, register callbacks until it is ready\n	*	@runs in application sandbox only\n	*/\n	loadDebugger: function(callback, activateDebug){\n			var htmlLoader;\n			var loadDebugger = arguments.callee;\n			if(loadDebugger.htmlLoader && typeof loadDebugger.htmlLoader.window.isLoaded != 'undefined'){\n				if(loadDebugger.htmlLoader.window.isLoaded){\n					callback(loadDebugger.htmlLoader.window.debugWindow);\n				}else{\n					if(loadDebugger.htmlLoader.window.initCallbacks){\n						loadDebugger.htmlLoader.window.initCallbacks.push(callback); \n					}else{\n						loadDebugger.initCallbacks.push(callback); 							\n					}\n				}\n				return;\n			}\n			if(typeof loadDebugger.initCallbacks=='undefined'){\n				loadDebugger.initCallbacks = [function(){\n					delete loadDebugger.initCallbacks;\n				}, callback];\n			}else{\n				loadDebugger.initCallbacks.push(callback);\n			}\n			if(isAppSandbox){\n			    htmlLoader = air.Introspector.runtime.HTMLLoader.createRootWindow(false);\n			    air.Introspector.addEventListener(htmlLoader, air.Introspector.runtime.Event.HTML_DOM_INITIALIZE, function(){\n					try{ \n						air.Introspector.removeEventListener(htmlLoader, air.Introspector.runtime.Event.HTML_DOM_INITIALIZE, arguments.callee);\n						htmlLoader.window.initCallbacks = loadDebugger.initCallbacks;\n						htmlLoader.window.isLoaded = false;\n						htmlLoader.window.config = air.Introspector.config;\n						htmlLoader.window.activateDebug = activateDebug;\n						htmlLoader.window.isAppSandbox = isAppSandbox;\n					}catch(e){ \n						air.Introspector.runtime.trace(e); \n						air.Introspector.runtime.trace(e.line); \n					}\n				});\n				htmlLoader.window.isLoaded = false;\n\n			    var nativeWindow = htmlLoader.stage.nativeWindow;\n				nativeWindow.width = 640;\n				nativeWindow.height = 480;\n			    air.Introspector.addEventListener(htmlLoader, runtime.flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION, function(e){\n			         air.Introspector.logError(e.exceptionValue, {htmlLoader: self.htmlLoader});\n			         e.preventDefault();\n			    });\n			    if(typeof air.Introspector.config.useAirDebugHtml=='undefined'||air.Introspector.config.useAirDebugHtml==false){\n					if(typeof htmlLoader.placeLoadStringContentInApplicationSandbox!='undefined'){\n							//since AIR1.5 the htmlLoader will not allow string load in app sandbox\n							htmlLoader.placeLoadStringContentInApplicationSandbox= true;\n					}\n					htmlLoader.loadString(air.Introspector.contentString);\n					if(typeof htmlLoader.placeLoadStringContentInApplicationSandbox!='undefined'){\n							//switch it back to false after load is complete\n							htmlLoader.placeLoadStringContentInApplicationSandbox= false;\n					}\n			    }else{\n			        htmlLoader.load(new air.Introspector.runtime.URLRequest('app:/DebugUI.html'));\n			    }\n			}else{\n				air.Introspector.noBridge(function(){\n					var w = air.Introspector.tryCreateWindow(loadDebugger.initCallbacks);\n					if(w){\n						var htmlLoader = {window: w};	\n						loadDebugger.htmlLoader = htmlLoader;	\n					}\n				});\n			}	\n			loadDebugger.htmlLoader = htmlLoader;		\n	},\n\n	/**\n	*	@function findDebugWindow\n	*	@description Look up the Introspector in other windows. Maybe somebody else just opened it before us. \n	*/\n    findDebugWindow: function(){\n		if(isAppSandbox){\n			try{\n	    		if(air.Introspector.debugWindow&&air.Introspector.debugWindow.nativeWindow.closed==false)\n		    	   return air.Introspector.debugWindow;\n			}catch(e){\n			}\n			try{\n		        var htmlWindows = air.Introspector.getHtmlWindows(true);\n		        for(var i=htmlWindows.length-1;i>=0;i--){\n		            try{\n		                if(typeof htmlWindows[i].htmlLoader.window.air!='undefined'\n		                   && typeof htmlWindows[i].htmlLoader.window.air.Introspector!='undefined'\n		                       && typeof htmlWindows[i].htmlLoader.window.air.Introspector.debugWindow!='undefined'\n								&& htmlWindows[i].htmlLoader.window.air.Introspector.debugWindow.nativeWindow.closed==false \n									&& htmlWindows[i].htmlLoader.window.isAppSandbox )\n		                    {\n		                        return htmlWindows[i].htmlLoader.window.air.Introspector.debugWindow;\n		                    }\n		            }catch(e){\n		                //this window is not initialized yet\n		                //just get next window\n		            }\n		        }\n			}catch(e){}\n		}else{\n			return air.Introspector.debugWindow;\n		}\n        return null;\n    },\n\n	//application browser formats\n	//		0 - text\n	//		1 - images\n	//		2 - xml (you may want to add your own xml type here)\n    formats : { 'png':1, 'gif':1, 'zip':1, 'air':1, 'jpg':1, 'jpeg':1,\n                 'txt':0, 'html':0, 'js':0, 'xml':2, 'opml':2, 'css':0, 'htm':0, '':0 },\n    \n\n	/**\n	*	@function canInit\n	*	@description Check if we got parentSandboxBridge available\n	*	@disabled \n	*/\n	canInit: function(){\n/*		if(!isAppSandbox&&typeof parentSandboxBridge=='undefined'){\n			alert('You need to include AIRIntrospector.js in application sandbox too!');\n			return false;\n		}*/\n		return true;\n	},\n\n	/**\n	*	@function logArguments\n	*	@description \n	*/\n	logArguments: function(args, config){\n		if(!air.Introspector.canInit()) return;\n		config.timestamp = new Date();\n       	air.Introspector.init(config.type=='error', true, function(){\n			air.Introspector.debugWindow.logArguments(args, config);\n		});\n        \n    },\n    /**\n	*	@function logError\n	*	@description \n	*/\n    logError: function(error, config){\n        air.Introspector.init(false, true, function(){\n			air.Introspector.debugWindow.logError(error, config);\n		});\n    },\n    \n	/**\n	*	@function showCssElement\n	*	@description \n	*/\n	showCssElement: function(element){\n		var debugWindow = air.Introspector.findDebugWindow();\n		if(debugWindow){\n			debugWindow.showCssElement(element);\n		}\n	},\n\n	checkIfIsInstanceOfHTMLLoader: function (child){\n		var className = runtime.flash.utils.getQualifiedClassName(child);\n		if( className == \"flash.html::HTMLLoader\" ) return true;\n		if( className == \"mx.core::FlexHTMLLoader\" ) return true;\n		return false;\n	},\n	/**\n	*	@function findLoader\n	*	@description Finds the first HTMLLoader in flash display object list\n	*/\n    findLoader: function (stage, loaders){\n		try{\n	        for(var i=stage.numChildren-1;i>=0;i--){\n	            var child = stage.getChildAt(i);\n				if(air.Introspector.checkIfIsInstanceOfHTMLLoader(child)){\n				   loaders.push([child]);\n				}else if(child.htmlLoader!=null&&air.Introspector.checkIfIsInstanceOfHTMLLoader(child.htmlLoader)){\n				   loaders.push([child.htmlLoader, child.id || child.toString()]);\n				}else{\n					air.Introspector.findLoader(child, loaders);\n	            }\n	        }\n		}catch(e){\n		}\n        return null;\n    }, \n    \n	/**\n	*	@function getHtmlWindows\n	*	@description Returns an array of all HTML windows\n	*/\n    getHtmlWindows: function(includeInspectors){\n		if(isAppSandbox){\n 	       var windowNodes = [];\n	        var windows = air.Introspector.runtime.NativeApplication.nativeApplication.openedWindows;\n	        for(var i=windows.length-1;i>=0;i--){\n				var loaders = [];\n	            air.Introspector.findLoader(windows[i].stage, loaders);\n	            for(var j=loaders.length-1;j>=0;j--){\n					var loaderItem = loaders[j];\n					var loader = loaderItem[0];\n					var label = loaderItem[1];\n					if(typeof includeInspectors=='undefined' && typeof loader.window!='undefined' && typeof loader.window.air!='undefined' && typeof loader.window.air.Introspector!='undefined' &&\n						typeof loader.window.air.Introspector.localIframeDebug != 'undefined' ){\n							continue;\n						}            \n	                windowNodes.push({\n	                    nativeWindow: windows[i],\n	                    stage: windows[i].stage,\n	                    htmlLoader : loader,\n						label: label\n	                });\n	            }\n	        }\n	        return windowNodes;\n		}else{\n			//should not be here\n			return [];\n		}\n   },\n   \n	/**\n	*	@function twoDigits\n	*	@description int 2 string with two digits\n	*/\n	twoDigits: function(val){\n	     if(val<10) return '0'+val;\n	     return val+'';\n	},\n\n	/**\n	*	@function escapeHtml\n	*	@description Escapes html in order to display it in html\n	*/\n	escapeHtml: function(html){      \n	     return (html+'').replace(/&/g, '&amp;').replace(/\"/g, \"&quot;\").replace(/</g, '&lt;').replace(/>/g, '&gt;');\n	},\n\n   	tree: { },\n\n\n	/**\n	*	@function isNumberObject\n	*	@description \n	*/\n	isNumberObject: function(obj){\n	     try{\n	         //can we catch isNaN only for NaN\n	         return (obj+0==obj&&!isNaN(obj));\n	     }catch(e){\n	     }\n	     return false;\n	 },\n\n	/**\n	*	@function isStringObject\n	*	@description \n	*/\n	isStringObject: function(obj){\n	    try{\n	        return (typeof(obj.match) != \"undefined\" && obj.match.toString().indexOf(\"[native code]\")>0);\n	    }catch(e){\n	    }\n	    return false;\n	},\n\n	/**\n	*	@function isDateObject\n	*	@description \n	*/\n	isDateObject: function(obj){\n	    try{\n	        return (typeof(obj.getDate) != \"undefined\" && obj.getDate.toString().indexOf(\"[native code]\")>0);\n	    }catch(e){\n	    }\n	    return false;\n	},\n\n	/**\n	*	@function isArgumentsObject\n	*	@description \n	*/\n   isArgumentsObject: function(obj){\n       try{\n           return obj.toString()=='[object Arguments]';\n       }catch(e){\n       }\n       return false;\n   },\n\n	/**\n	*	@function isXMLObject\n	*	@description \n	*/\n	isXMLObject: function(obj){\n		try{\n			if(obj.xmlVersion&&obj.firstChild!=null)\n	        	return obj.xmlVersion!='';\n	    }catch(e){\n	    }\n	    return false;\n	},\n\n	/**\n	*	@function isArrayObject\n	*	@description \n	*/\n	isArrayObject: function(obj){\n       try{\n           return (typeof(obj.push) != \"undefined\" && obj.push.toString().indexOf(\"[native code]\")>0);\n       }catch(e){\n       }\n       return false;\n	},\n\n	/**\n	*	@function isItemNative\n	*	@description \n	*/\n	isItemNative: function(obj){\n       try{\n           return (typeof(obj.item) != \"undefined\" && obj.item.toString().indexOf(\"[native code]\")>0);\n       }catch(e){\n       }\n       return false;\n	},\n   \n\n	/**\n	*	@function dump\n	*	@description \n	*/\n\n	dump: function (obj, levels, level){\n		if(air.Introspector.isArgumentsObject(obj)&&obj.length==1)\n			return air.Introspector.dump(obj[0]);\n		if(typeof levels=='undefined') { levels=1; }\n		if(typeof level=='undefined') { level=0; }		\n        try{\n            if(typeof obj=='undefined'){ return '[undefined]'; }\n			if(obj==null){	return '[null]'; }\n			var list = [];\n//            if(air.Introspector.isXMLObject(obj)){\n//		disable for the moment\n//            	return;\n//            }  \n			if(air.Introspector.isStringObject(obj)\n				||air.Introspector.isNumberObject(obj)\n					||air.Introspector.isDateObject(obj)){\n				if(level==0){\n					try{\n						return obj+'';\n					}catch(e){ \n						return e+''; \n					};\n				}\n				return'';\n			}\n            var isItemNative = air.Introspector.isItemNative(obj);\n            var parseArray = air.Introspector.isArrayObject(obj)||air.Introspector.isArgumentsObject(obj)||isItemNative;\n            var parseHash =  !parseArray || isItemNative;\n            if (parseArray){\n				var l = obj.length;\n            	for(var i=0;i<l;i++){\n                    var value;\n                    try{\n                        value = obj[i];\n						if(typeof value=='undefined') {value = '[undefined]'};\n                    }catch(e){\n                        value = e+'';\n                    }\n					list.push([i,value]);\n                }\n            } \n            if(parseHash) {\n                for(var i in obj){\n                    var value;\n                    try{\n                        value = obj[i];\n						if(typeof value=='undefined') {value = '[undefined]'};\n                    }catch(e){\n                        value = e+'';\n                    }\n					list.push([i,value]);\n                }\n            }\n\n			if(air.Introspector.config.debugRuntimeObjects && !parseArray){\n				try{\n					var typeDescription = runtime.flash.utils.describeType(obj);\n					if(!this.domParser) this.domParser = new DOMParser();\n					var typeXml = this.domParser.parseFromString(typeDescription, \"text/xml\");\n					var child = typeXml.firstChild.firstChild;\n					while(child){\n						if(child.nodeName=='accessor'||child.nodeName=='constant'||child.nodeName=='method'||child.nodeName=='variable'){\n							var name = child.getAttribute('name');\n							if(name!=null && name!='prototype'){\n			                    try{\n									list.push([name,obj[name]]);\n			                    }catch(e){\n									list.push([name,'']+'');\n			                    }\n							}\n						}\n						child = child.nextSibling;\n					}\n				}catch(e){\n					//just hide the error\n				}\n            }\n            list.sort(function(node1, node2){\n            	var isNode1Number = parseInt(node1[0])==node1[0];\n            	var isNode2Number = parseInt(node2[0])==node2[0];\n            	if(isNode1Number&&isNode2Number){\n            		return parseInt(node1[0])-parseInt(node2[0]);\n            	} \n            	if(isNode1Number){\n            		return -1;\n            	}\n            	if(isNode2Number){\n            		return 1;\n            	}\n            	if(node1[0].toLowerCase()==node2[0].toLowerCase())\n                   return 0;\n                if(node1[0].toLowerCase()<node2[0].toLowerCase())\n                   return -1;\n                return 1;\n            });\n			if(list.length){\n				var prefix = '';\n				for(var i=level;i>0;i--) prefix+='    ';\n				var l = list.length;\n				var strList = [];\n				if(parseArray)	strList.push(prefix+'[\\r\\n');\n				else			strList.push(prefix+'{\\r\\n');\n				for(var i=0;i<l;i++){\n					try{\n						var zl = (list[i][0]+'').length+1;\n						var miniPrefix = '';\n						for(var j=0;j<zl;j++) miniPrefix+=' ';\n						if(typeof list[i][1]=='function'){\n							strList.push(prefix+'  '+list[i][0]+'=[function]\\r\\n');\n						}else if(air.Introspector.isDateObject(list[i][1])){\n							strList.push(prefix+'  '+list[i][0]+'='+(new Date(list[i][1])+'').replace(/\\n/g, '\\r\\n'+prefix+miniPrefix)+',\\r\\n');\n						}else{\n							strList.push(prefix+'  '+list[i][0]+'='+(list[i][1]+'').replace(/\\n/g, '\\r\\n'+prefix+miniPrefix)+'\\r\\n');\n						}\n					}catch(e){\n						strList.push(prefix+'  '+list[i][0]+'='+e+'\\r\\n');\n					}\n					if(level<levels){\n						strList.push(air.Introspector.dump(list[i][1], levels, level+1));\n					}\n				}\n				if(parseArray)	strList.push(prefix+']\\r\\n');\n				else			strList.push(prefix+'}\\r\\n');\n				if(level){\n					return strList.join('');\n				}else{\n					return (strList.join(''));\n				}\n			}\n        }catch(e){\n            air.Introspector.Console.error(e);\n        } \n		return '';\n	},\n\n\n\n\n    /**\n	*	---------------------------------------------------------------------------------------\n	*	@extracted This is extracted from spry framework and removed support for other browsers.\n	*	@description Finds the precise position of the dom element node\n	*/   \n	\n	/**\n	*	@function camelize\n	*	@description \n	*/\n	\n	camelize : function(stringToCamelize)\n            {\n                if (stringToCamelize.indexOf('-') == -1){\n                    return stringToCamelize;    \n                }\n                var oStringList = stringToCamelize.split('-');\n                var isFirstEntry = true;\n                var camelizedString = '';\n            \n                for(var i=0; i < oStringList.length; i++)\n                {\n                    if(oStringList[i].length>0)\n                    {\n                        if(isFirstEntry)\n                        {\n                            camelizedString = oStringList[i];\n                            isFirstEntry = false;\n                        }\n                        else\n                        {\n                            var s = oStringList[i];\n                            camelizedString += s.charAt(0).toUpperCase() + s.substring(1);\n                        }\n                    }\n                }\n            \n                return camelizedString;\n            },\n\n	/**\n	*	@function getStyleProp\n	*	@description \n	*/\n	getStyleProp : function(element, prop)\n            {\n                var value;\n                try\n                {\n                    if (element.style)\n                        value = element.style[air.Introspector.camelize(prop)];\n            \n                    if (!value)\n                    {\n                        if (document.defaultView && document.defaultView.getComputedStyle)\n                        {\n                            var css = document.defaultView.getComputedStyle(element, null);\n                            value = css ? css.getPropertyValue(prop) : null;\n                        }\n                        else if (element.currentStyle) \n                        {\n                                value = element.currentStyle[air.Introspector.camelize(prop)];\n                        }\n                    }\n                }\n                catch (e) {}\n            \n                return value == 'auto' ? null : value;\n            },\n   \n\n	/**\n	*	@function getIntProp\n	*	@description \n	*/\n	getIntProp : function(element, prop){\n                var a = parseInt(air.Introspector.getStyleProp(element, prop),10);\n                if (isNaN(a))\n                    return 0;\n                return a;\n            },\n\n\n	/**\n	*	@function getBorderBox\n	*	@description \n	*/\n	getBorderBox : function (el, doc) {\n                doc = doc || document;\n                if (typeof(el) == 'string') {\n                    el = doc.getElementById(el);\n                }\n            \n                if (!el) {\n                    return false;\n                }\n            \n                if (el.parentNode === null || air.Introspector.getStyleProp(el, 'display') == 'none') {\n                    //element must be visible to have a box\n                    return false;\n                }\n            \n                var ret = {x:0, y:0, width:0, height:0};\n                var parent = null;\n                var box;\n\n            	var str = el.nodeName;\n			\n                ret.x = el.offsetLeft;\n                ret.y = el.offsetTop;\n                ret.width = el.offsetWidth;\n                ret.height = el.offsetHeight;\n\n				parent = el.offsetParent;\n\n                if (parent != el) {\n                    while (parent) {\n                        ret.x += parent.offsetLeft;\n                        ret.y += parent.offsetTop;\n                        ret.x += air.Introspector.getIntProp(parent, \"border-left-width\");\n                        ret.y += air.Introspector.getIntProp(parent, \"border-top-width\");                        \n						str+=':'+parent.nodeName;\n                        parent = parent.offsetParent;\n                    }\n                }\n\n                // opera & (safari absolute) incorrectly account for body offsetTop\n                switch (air.Introspector.getStyleProp(el, 'position')){\n 					case 'absolute':\n                    	ret.y -= doc.body.offsetTop;\n						break;\n					case 'fixed':\n	                    ret.y += doc.body.scrollTop;\n	                    ret.x += doc.body.scrollLeft;\n						break;\n				};\n                    \n                if (el.parentNode)\n                    parent = el.parentNode;\n                else\n                    parent = null;\n                \n				if (parent!=null&&parent.nodeName){\n                    var cas = parent.nodeName.toUpperCase();\n                    while (parent && cas != 'HTML') {\n                        cas = parent.nodeName.toUpperCase();\n                        ret.x -= parent.scrollLeft;\n                        ret.y -= parent.scrollTop;\n                        if (parent.parentNode)\n                            parent = parent.parentNode;\n                        else\n                            parent = null;\n                    }\n                }\n\n/*				ret.y -= el.ownerDocument.body.scrollTop;\n				ret.x -= el.ownerDocument.body.scrollLeft;				\n*/\n                // adjust the margin\n                var gi = air.Introspector.getIntProp;\n                var btw = gi(el, \"margin-top\");\n                var blw = gi(el, \"margin-left\");\n                var bbw = gi(el, \"margin-bottom\");\n                var brw = gi(el, \"margin-right\");\n                ret.x -= blw;\n                ret.y -= btw;\n                ret.height += btw + bbw;\n                ret.width += blw + brw;\n\n			//	air.Introspector.Console.log(ret);\n                return ret;\n            },\n\n	/**\n	*	---------------------------------------------------------------------------------------\n	*/\n\n	/**\n	*	@function writeConfigFile\n	*	@description \n	*/\n	writeConfigFile: function(config, fromRemoteSandbox){\n		if(isAppSandbox){\n			var file = runtime.flash.filesystem.File.applicationStorageDirectory.resolvePath('AIRIntrospector'+(fromRemoteSandbox?'Remote':'')+'.cfg');\n			var fs = new runtime.flash.filesystem.FileStream();\n			fs.open(file, runtime.flash.filesystem.FileMode.WRITE);\n			fs.writeObject(config);\n			fs.close();\n		}else{\n			if(typeof activeWindow=='undefined'){\n				air.Introspector.noBridge(function(){\n					parentSandboxBridge.air_Introspector_writeConfigFile(config);\n				});\n			}else{\n				activeWindow.setTimeout(function(){\n					try{\n						activeWindow.air.Introspector.writeConfigFile(config);\n					}catch(e){}\n				}, 0);\n			}\n		}\n	},\n\n\n\n	/**\n	*	@function readConfigFile\n	*	@description \n	*/\n	readConfigFile: function (fromRemoteSandbox, callback){\n		if(isAppSandbox){\n			var file = runtime.flash.filesystem.File.applicationStorageDirectory.resolvePath('AIRIntrospector'+(fromRemoteSandbox?'Remote':'')+'.cfg');\n			if(file.exists){\n				var fs = new runtime.flash.filesystem.FileStream();\n				fs.open(file, runtime.flash.filesystem.FileMode.READ);\n				var config = fs.readObject();\n				fs.close();\n				return config;\n			}\n		}else{\n			if(typeof activeWindow=='undefined'){\n				air.Introspector.noBridge(function(){\n					var config = parentSandboxBridge.air_Introspector_readConfigFile();\n					callback(config);\n				});				\n			}else{\n				activeWindow.setTimeout(function(){\n					try{\n                        activeWindow.air.Introspector.readConfigFile(true, function(config){\n                            setTimeout(function(){ callback(config); }, 0);							\n                        });\n					}catch(e){}\n				}, 0);\n			}\n		}\n		return {};\n	},\n	\n	\n	\n	/**\n	*	@function writeConsoleToClipboard\n	*	@description \n	*/\n\n	writeConsoleToClipboard: function(str){\n		if(isAppSandbox){		\n			runtime.flash.desktop.Clipboard.generalClipboard.clear();\n			runtime.flash.desktop.Clipboard.generalClipboard.setData(runtime.flash.desktop.ClipboardFormats.TEXT_FORMAT, \n					str, false);		\n		}else{\n			if(typeof activeWindow=='undefined'){\n				air.Introspector.noBridge(function(){\n					parentSandboxBridge.air_Introspector_writeConsoleToClipboard(str);\n				});				\n			}else{\n				activeWindow.setTimeout(function(){\n					try{\n						activeWindow.air.Introspector.writeConsoleToClipboard(str);\n					}catch(e){}\n				});\n			}\n		}\n	},	\n\n\n	/**\n	*	@function writeConsoleToFile\n	*	@description \n	*/\n	writeConsoleToFile: function(str){\n		if(isAppSandbox){		\n			var file = runtime.flash.filesystem.File.desktopDirectory;\n			var self = this;\n			file.addEventListener(runtime.flash.events.Event.SELECT, function(evt){ \n				var newFile = evt.target;\n  			    var stream = new runtime.flash.filesystem.FileStream();\n			        stream.open(newFile, runtime.flash.filesystem.FileMode.WRITE);\n			        stream.writeUTFBytes(str);\n			        stream.close();\n				});\n			file.browseForSave('Console dump file...');\n		}else{\n			if(typeof activeWindow=='undefined'){\n				air.Introspector.noBridge(function(){\n					parentSandboxBridge.air_Introspector_writeConsoleToFile(str);\n				});				\n			}else{\n				activeWindow.setTimeout(function(){\n					try{\n						activeWindow.air.Introspector.writeConsoleToFile(str);\n					}catch(e){}\n				});\n			}\n		}\n	},\n	\n	\n	\n	\n	/**\n	*	@function noBridge\n	*	@description Alerts the user that no parent sandbox bridge is installed \n	*/\n	noBridge: function(callback){\n		try{\n			callback();\n			return;\n		}catch(e){\n			air.Introspector.bridgeCallbacks.push(callback);\n			air.Introspector.registerChildSandboxBridge();\n			setTimeout(function(){\n				throw { air_Introspector_setParentSandboxBridge: true, air_Introspector_version: air.Introspector.version , toString: function(){ return 'You need to include AIRIntrospector.js in your application sandbox.'; } };\n			}, 0);				\n		}\n		\n	},\n	\n	/**\n	*	@function noChildBridge\n	*	@description Alerts the user that no child sandbox bridge is installed \n	*/\n	noChildBridge: function(iframe){\n		if(!air.Introspector.secondBridgeTry){\n			var iframeStr = '';\n			if(typeof iframe!='undefined'){\n				iframeStr = \" Check the following iframe [id: \"+iframe.id+\"]\";\n			}\n			alert('Child sandbox bridge is not defined or has been rewritten. You need to include AIRIntrospector.js in child sandbox.'+iframeStr);			\n			air.Introspector.secondBridgeTry = true;\n		}\n	},\n	\n\n});\n\n		//-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n		//=======================================================================================================================================================\n		//TreeNode.js\n		//=======================================================================================================================================================\n		air.Introspector.tree.node = function(nodeLabel, config){\n    this.nodeLabel = nodeLabel;\n    this.openable = true;\n    this.nodeLabel2 = '';\n    this.items = [];\n    this.editable = false;\n    \n    if(typeof config!='undefined')\n       air.Introspector.extend(this, config);\n    this.unselectOnBlur = true;\n    this.created = false;\n    this.opened = false;\n    this.shouldOpenFlag = false;\n    this.shouldSelectFlag = false;\n    \n};\n\nair.Introspector.tree.node.openedTagMac = '<div>&gt;</div>';//'&rarr;';\nair.Introspector.tree.node.closedTagMac = '<div>&or;</div>';//'&darr;';\n\nair.Introspector.tree.node.openedTagWin = '<div>+</div>';//'&rarr;';\nair.Introspector.tree.node.closedTagWin = '<div>-</div>';//'&darr;';\n\n\nair.Introspector.tree.node.putDisposeInPrototype = function(e){\n	e.prototype.dispose = air.Introspector.tree.node.prototype.dispose;\n	e.prototype.clearItems = air.Introspector.tree.node.prototype.clearItems;\n	e.prototype.clearListeners = air.Introspector.tree.node.prototype.clearListeners;	\n	e.prototype.registerListener = air.Introspector.tree.node.prototype.registerListener;\n	e.prototype.registerEvents = air.Introspector.tree.node.prototype.registerEvents;\n	e.prototype.select = air.Introspector.tree.node.prototype.select;\n	e.prototype.unselect = air.Introspector.tree.node.prototype.unselect;\n}\n\nair.Introspector.tree.node.prototype={\n    onshow: function(){\n        //dummy function overriden by config\n    },\n    \n    onclick: function(){\n        //dummy function overriden by config\n    },\n    \n    onhide: function(){\n        //dummy function overriden by config\n    },\n\n	onselect: function(){\n		\n	},    \n\n    toggle: function(){\n        if(this.opened){\n            this.hide();\n        }else{\n            this.show();\n        }\n    },\n    \n    shouldOpen: function(){\n        this.opened = true;\n        this.shouldOpenFlag=true;\n    },\n    \n    shouldSelect: function(value){\n        if(typeof value=='undefined') value=true;\n        this.shouldSelectFlag = value;\n    },\n\n    addSelectedCss: function(){\n		if(self.element){\n			self.element.className += ' selected3Tree';\n		}\n	},\n\n	select: function(throwEvent){\n        this.shouldSelectFlag = true;\n		if(this.element){\n			this.element.className += ' selected3Tree';\n		}\n		\n		\n		if(this.element){\n			this.focusLink.focus();\n			if(this.nodeLabelDiv)\n				this.nodeLabelDiv.scrollIntoViewIfNeeded();\n			else\n				this.element.scrollIntoViewIfNeeded();\n		}\n		\n		if(this.onselect)\n			this.onselect(this, (typeof throwEvent=='undefined'||throwEvent));\n	},\n\n	unselect: function(){\n        this.shouldSelectFlag = false;\n		if(this.element){\n			this.element.className = this.element.className.replace(/ selected3Tree/g, '');\n		}\n\n	},\n\n	clearItems: function(){\n		if(this.items){\n			for(var i=this.items.length-1;i>=0;i--){\n				try{\n					this.items[i].dispose();\n				}catch(e){ air.Introspector.Console.log(e);}\n				this.items[i]=null;\n			}\n			this.items.length=0;\n		}\n	},\n	clearListeners: function(){\n		if(this.listeners){\n			for(var i=this.listeners.length-1;i>=0;i--){\n				var listener = this.listeners[i];\n				listener.element.removeEventListener(listener.ev, listener.fn, listener.capture);\n				listener.fn = null;\n				this.listeners[i]=null;\n			}\n		}\n		delete this.listeners;\n	},\n	dispose: function(){\n		this.clearItems();\n		this.clearListeners();\n		var self = this;\n		for(var i in self){\n			self[i] = null;\n		}\n	},\n	\n	registerListener:function(element, ev, fn, capture){\n		if(!this.listeners){\n			this.listeners = [];\n		}\n\n		this.listeners.push({element:element, ev:ev, fn: fn, capture:capture});		\n		element.addEventListener(ev, fn, capture);		\n	},\n\n	showElements: function(){\n		this.opened = true;\n        this.onshow(this);\n		this.refreshNodeAnchor();\n        this.refreshChildren();	\n	},\n    show: function(){\n        if(!this.openable)\n          return;\n		this.showElements();        \n        \n        if(air.Introspector.tree.node.traceElement){\n        	air.Introspector.tree.node.traceElement.className = air.Introspector.tree.node.traceElement.className.replace(/ selected2Tree/g, '');\n        }\n        this.element.className += ' selected2Tree';\n        air.Introspector.tree.node.traceElement = this.element;\n        var self = this;\n        setTimeout(function(){\n			if(self.element){\n				self.element.className = self.element.className.replace(/ selected2Tree/g, '');\n			}\n        },1500);\n        air.Introspector.tree.node.traceElement = this.element;\n        \n        //this.nodeChildren.scrollIntoViewIfNeeded();\n        this.element.scrollIntoViewIfNeeded();\n        \n        \n    },\n    refresh: function(){\n		this.clearListeners();\n		if(this.element){\n			var oldElement = this.element;\n			this.createDiv(oldElement.ownerDocument);\n			oldElement.parentNode.replaceChild(this.element, oldElement);\n		}\n	},\n    refreshChildren: function(){\n        if(this.created){\n            if(this.shouldOpenFlag){\n                this.onshow(this);\n                this.shouldOpenFlag = false;\n            }\n            \n            var document = this.element.ownerDocument;\n            /*if(this.nodeChildren!=null){\n                this.element.removeChild(this.nodeChildren);\n                this.nodeChildren = null;\n            }*/\n            var nodeChildren = this.nodeChildren;// document.createElement('div');\n            nodeChildren.innerHTML = '';\n            this.nodeChildren.className = 'treeChildren';\n            for(var i=0;i<this.items.length;i++){\n                 var childElement = this.items[i].createDiv(document, true);\n				 this.items[i].registerEvents(this, i);\n                 nodeChildren.appendChild(childElement);\n            }\n            //this.element.appendChild(nodeChildren);\n            //this.nodeChildren = nodeChildren;\n			if(this.nodeEndLabelDiv)\n	            this.nodeEndLabelDiv.className = 'nodeEndLabelDivVisible';\n        }\n    },\n\n	registerEvents: function(parentNode, index){\n		this.parentNode = parentNode;\n		this.parentIndex = index;\n		var self = this;\n\n		if(this.unselectOnBlur||this.readOnly)\n		{\n			this.registerListener(this.focusLink, 'blur', function(ev){\n				self.unselect();\n			}, true);\n		}\n		\n		var findFirstElement = function(node){\n			if(node==null) return null;\n			if(!node.items) return node;\n			if(!node.opened) return node;			\n			if(node.items.length==0) return node;\n			return node.items[0];\n			//return findFirstElement(node.items[0]);	\n		};\n		var findLastElement = function(node){\n			if(node==null) return null;\n			if(!node.items) return node;\n			if(!node.opened) return node;			\n			if(node.items.length==0) return node;\n			return findLastElement(node.items[node.items.length-1]);			\n		};\n\n		var findNextParent = function(node){\n			if(node==null||node.parentNode==null||node.parentNode.parentNode==null) return null;\n			if(node.parentNode.parentNode&&node.parentNode.parentNode.items.length>node.parentNode.parentIndex+1)\n				return node.parentNode.parentNode.items[node.parentNode.parentIndex+1];\n			return findNextParent(node.parentNode);\n		}\n		\n		this.registerListener(this.element, 'keydown', function(ev){\n			if(self.state){\n				ev.stopPropagation();\n				return;\n			}\n				\n			var stopPropagation = true;\n			switch(ev.keyIdentifier){\n				case 'Left':\n					if(self.opened){\n						if(self.hide)\n							self.hide();\n					}\n				break;\n				case 'Right':\n					if(!self.opened){\n						if(self.show)\n							self.show();\n					}\n				break;\n				case 'Up':\n					if(self.parentNode){\n						self.unselect();\n						if(self.parentIndex==0){\n							self.parentNode.select(true);\n						}else{\n							var element = findLastElement(self.parentNode.items[self.parentIndex-1]);\n							if(element){\n								element.select(true);\n							}\n							else\n								self.parentNode.items[self.parentIndex-1].select(true);\n						}\n					}\n				break;\n				case 'Down':\n					if(self.parentNode){\n						var element = findFirstElement(self);\n						if(element!=null&&element!=self){\n							self.unselect();\n							element.select(true);\n						}else if(self.parentIndex+1>=self.parentNode.items.length){\n							var element = findNextParent(self);\n							if(element){\n								self.unselect();\n								element.select(true);\n							}\n						}else{\n							self.unselect();\n							self.parentNode.items[self.parentIndex+1].select(true);\n						}\n					}else{\n						if(self.items.length>0){\n							self.unselect();\n							self.items[0].select(true);\n						}\n					}\n				break;\n				case 'Enter':\n					setTimeout(function(){\n						if(self.editable){\n							self.toggleEdit();\n						}\n					}, 0);\n				break;\n				default:\n					stopPropagation = false;\n			}\n			if(stopPropagation){\n//				runtime.trace(ev.keyIdentifier);\n				ev.stopPropagation();\n				ev.preventDefault();\n			}\n		});\n	},\n    \n    refreshLabel : function(){\n       if(this.created){\n           this.nodeLabelDiv.innerHTML = air.Introspector.escapeHtml(this.nodeLabel);\n			if(this.element){\n				if(this.nodeLabel2.length==0){\n					this.element.className += ' noLabel2';\n				}else{\n					this.element.className = this.element.className.replace(/ noLabel2/g, '');\n				}\n			}\n           this.nodeLabel2Div.innerHTML = air.Introspector.escapeHtml(this.nodeLabel2).substr(0, 1000);\n       }\n    },\n    \n    hide: function(){\n        if(!this.openable)\n          return;\n        this.opened = false;\n        this.onhide(this);\n		this.refreshNodeAnchor();\n        /*if(this.nodeChildren!=null){\n            this.element.removeChild(this.nodeChildren);\n            this.nodeChildren = null;\n        }*/\n        \n        if(air.Introspector.tree.node.traceElement){\n            air.Introspector.tree.node.traceElement.className = air.Introspector.tree.node.traceElement.className.replace(/ selected2Tree/g, '');\n            air.Introspector.tree.node.traceElement = null;\n        }\n        this.element.className = this.element.className.replace(/ selected2Tree/g, '');\n        this.nodeChildren.innerHTML = '';\n        this.nodeChildren.className = '';\n        \n        if(this.nodeEndLabelDiv)\n            this.nodeEndLabelDiv.className = 'nodeEndLabelDiv';\n    },\n    \n    showHover: function(visible){\n        if(visible){\n           this.element.className+=' hover';    \n        }else{\n           this.element.className = this.element.className.replace(/ hover/g, '');\n        }\n    },\n    toggleEdit: function(toggle){\n        if(!this.editVisible&&typeof toggle=='undefined'){\n            this.element.className += ' editing';\n            this.nodeEdit.value = this.getEditValue();\n	        this.editVisible = true;\n            this.nodeEdit.focus();	\n			this.addSelectedCss();\n			this.state =1;\n        }else if(this.editVisible){\n            this.element.className = this.element.className.replace(' editing', '');\n\n            if(toggle){\n                 this.setEditValue(this.nodeEdit.value);\n            }else{\n	             this.editVisible = false;\n			}\n\n			var self = this;\n			\n			setTimeout(function(){\n				self.select();\n            	self.editVisible = false;\n			}, 0);\n			this.state = 0;\n        }\n    },\n    \n	refreshNodeAnchor: function(){\n		if(!this.nodeAnchor) return;\n		if(!this.openable){\n			this.nodeAnchor.innerHTML= '';\n			this.nodeAnchor.className = 'treeNodeEmpty';\n		}else if(!isAppSandbox){\n				this.nodeAnchor.innerHTML = this.opened?air.Introspector.tree.node.closedTagMac:air.Introspector.tree.node.openedTagMac;\n				this.nodeAnchor.className='treeAnchorMac';	\n		}else if(air.Introspector.runtime.Capabilities.os.substr(0,3).toLowerCase() == 'mac'){\n			this.nodeAnchor.innerHTML = this.opened?air.Introspector.tree.node.closedTagMac:air.Introspector.tree.node.openedTagMac;\n			this.nodeAnchor.className='treeAnchorMac';\n		}else{\n			this.nodeAnchor.innerHTML = this.opened?air.Introspector.tree.node.closedTagWin:air.Introspector.tree.node.openedTagWin;\n			this.nodeAnchor.className='treeAnchorWin';\n		}\n		\n	},\n	\n    createDiv: function(document, isChild){\n        var self = this;\n        var element = document.createElement('span');\n		//element.href= \"javascript:void(0)\"; \n		this.focusLink = document.createElement(\"a\");\n		this.focusLink.href=\"#\";\n		element.appendChild(this.focusLink);\n	\n        element.className='treeNode';\n        this.element = element;\n        \n        var nodeLabelDiv = document.createElement('div');\n        nodeLabelDiv.innerHTML = air.Introspector.escapeHtml(this.nodeLabel);\n        nodeLabelDiv.className='treeLabel'; //+ (this.shouldSelectFlag?' selectedTreeLabel':'');\n		\n		\n		if(this.shouldSelectFlag){\n			this.addSelectedCss();\n		}\n		\n		if(this.onselect){\n			this.onselect(this, false);\n		}\n		\n        if(this.openable){\n           this.registerListener(nodeLabelDiv, 'click', function(e){ if(!self.opened) self.show(); self.onclick(); 	self.select(); } );\n        }else{\n           this.registerListener(nodeLabelDiv, 'click', function(e){ self.onclick(); 	self.select(); } );\n        }\n        this.registerListener(nodeLabelDiv, 'mouseover', function(e){ self.showHover(true) } );\n        this.registerListener(nodeLabelDiv, 'mouseout', function(e){ self.showHover(false) } );\n        \n        element.appendChild(nodeLabelDiv);\n        this.nodeLabelDiv = nodeLabelDiv;\n        \n        var nodeLabel2 = document.createElement('div');\n        nodeLabel2.innerHTML = air.Introspector.escapeHtml(this.nodeLabel2).substr(0, 1000);\n        nodeLabel2.className='treeLabel2';\n        if(this.openable){\n            this.registerListener(nodeLabel2, 'click', function(e){ if(!self.opened) self.show() } );\n        }else if(this.editable){\n            this.editVisible = false;\n            this.registerListener(nodeLabel2, 'click', function(e){ self.toggleEdit() } );\n            var nodeEdit = document.createElement('input');\n            nodeEdit.value = '';\n            nodeEdit.className = 'treeEdit';\n            element.appendChild(nodeEdit);\n            \n            this.registerListener(nodeEdit, 'blur', function(e){  self.toggleEdit(true); } );\n            this.registerListener(nodeEdit, 'keypress', function(e){ if(e.keyCode == 13) { self.toggleEdit(true); return false;}  else if(e.keyCode == 27){ self.toggleEdit(false); return false;}} );\n            this.nodeEdit = nodeEdit;\n        }\n        this.registerListener(nodeLabel2, 'mouseover', function(e){ self.showHover(true) } );\n        this.registerListener(nodeLabel2, 'mouseout', function(e){ self.showHover(false) } );\n        \n        element.appendChild(nodeLabel2);\n        this.nodeLabel2Div = nodeLabel2;\n        \n		if(this.nodeLabel2.length==0){\n			this.element.className += ' noLabel2';\n		}\n        var nodeAnchor = document.createElement('div');\n        this.nodeAnchor = nodeAnchor;\n		this.refreshNodeAnchor();\n        element.appendChild(nodeAnchor);\n        this.registerListener(nodeAnchor, 'click', function(e){ self.select(); self.toggle() } );\n        //nodeAnchor.style.visibility = this.openable?'visible':'hidden';\n\n        this.created = true;\n        \n        \n        var nodeChildren =  document.createElement('div');\n        \n        element.appendChild(nodeChildren);\n        this.nodeChildren = nodeChildren;\n        \n        if(this.opened){\n           this.refreshChildren();\n        }\n        \n		setTimeout(function(){\n			if(self.shouldSelectFlag)\n				self.focusLink.focus();\n	\n		}, 0);\n	\n		if(!isChild){\n			this.registerEvents(null, 0);\n		}\n        return element;\n    }\n};\n\nair.Introspector.tree.textNode = function(value){\n    this.nodeValue = value;\n};\n\nair.Introspector.tree.textNode.prototype = {\n    createDiv: function(document){\n	    var element = document.createElement('span');\n//element.href= \"javascript:void(0)\"; \nthis.focusLink = document.createElement(\"a\");\nthis.focusLink.href=\"#\";\nelement.appendChild(this.focusLink);\n	    element.className='treeText';\n	    \n	    var elementText = document.createElement('div');\n	    elementText.className='treePreText';\n	    var elementLines = document.createElement('div');\n	    elementLines.className='treePreLine';\n	    var splitText = air.Introspector.blockWrap(this.nodeValue);\n	    elementText.innerHTML = '<pre>'+air.Introspector.escapeHtml(splitText[0])+'\\n\\n </pre>';\n	    \n	    elementLines.innerHTML = '<pre>'+splitText[1]+'</pre>';\n	    \n	    element.appendChild(elementLines);\n	    element.appendChild(elementText);\n	    \n	    this.element = element;\n	    this.elementText = elementText;\n        this.elementLines = elementLines;\n	    return element;\n    }\n};\n\nair.Introspector.tree.node.putDisposeInPrototype(air.Introspector.tree.textNode);\n\nair.Introspector.tree.textDownloadNode = function(file){\n    this.file = file;\n};\n\nair.Introspector.tree.textDownloadNode.prototype = {\n    createDiv: function(document){\n        var element = document.createElement('span');\n//element.href= \"javascript:void(0)\"; \nthis.focusLink = document.createElement(\"a\");\nthis.focusLink.href=\"#\";\nelement.appendChild(this.focusLink);\n        element.className='treeText';\n\n        var elementText = document.createElement('div');\n        elementText.className='treePreText';\n        var elementLines = document.createElement('div');\n        elementLines.className='treePreLine';\n        \n        elementText.innerHTML ='Loading...';\n        \n        \n        element.appendChild(elementLines);\n        element.appendChild(elementText);\n		var self = this;\n        if(isAppSandbox){\n        	var scriptLoader = new air.Introspector.runtime.URLLoader();\n	        scriptLoader.addEventListener(air.Introspector.runtime.Event.COMPLETE, function(e){\n	        	    var value = air.Introspector.blockWrap(scriptLoader.data);\n		        	elementText.innerHTML = '<pre>'+air.Introspector.escapeHtml(value[0])+'\\n\\n</pre>';\n			        elementLines.innerHTML = '<pre>'+value[1]+'</pre>';\n					scriptLoader = null;\n		        });\n			scriptLoader.addEventListener(air.Introspector.runtime.IOErrorEvent.IO_ERROR, function(e){\n				var value = air.Introspector.blockWrap('Error reading file \"'+self.file+'\"');\n	        	elementText.innerHTML = '<pre>'+air.Introspector.escapeHtml(value[0])+'\\n\\n</pre>';\n		        elementLines.innerHTML = '<pre>'+value[1]+'</pre>';\n			});\n			scriptLoader.load(new air.Introspector.runtime.URLRequest(this.file));\n		}else{\n			var myWindow = window;\n			if(typeof activeWindow!='undefined'){\n				var self = this;\n				activeWindow.setTimeout(function(){\n					var xhr = new activeWindow.XMLHttpRequest();\n					xhr.doNotDebug = true;\n					xhr.onreadystatechange = function(){\n						if(this.readyState == 4){\n						 	if(this.status == 200) {\n								var responseText = xhr.responseText;\n								myWindow.setTimeout(function(){\n										var value = air.Introspector.blockWrap(responseText);\n							        	elementText.innerHTML = '<pre>'+air.Introspector.escapeHtml(value[0])+'\\n\\n</pre>';\n								        elementLines.innerHTML = '<pre>'+value[1]+'</pre>';\n								}, 0);\n							}else{\n								myWindow.setTimeout(function(){\n									var value = air.Introspector.blockWrap('Error reading file \"'+self.file+'\"');\n						        	elementText.innerHTML = '<pre>'+air.Introspector.escapeHtml(value[0])+'\\n\\n</pre>';\n							        elementLines.innerHTML = '<pre>'+value[1]+'</pre>';\n								}, 0);\n							}\n							xhr = null;\n						}\n					};\n					xhr.open('GET', self.file, true);\n					xhr.send();\n				}, 0);\n			}\n		}\n        this.element = element;\n        this.elementText = elementText;\n        this.elementLines = elementLines;\n        return element;\n    }\n};\nair.Introspector.tree.node.putDisposeInPrototype(air.Introspector.tree.textDownloadNode);\n\nair.Introspector.tree.imageDownloadNode = function(file){\n    this.file = file;\n};\n\nair.Introspector.tree.imageDownloadNode.prototype = {\n    createDiv: function(document){\n        var element = document.createElement('span');\n//element.href= \"javascript:void(0)\"; \nthis.focusLink = document.createElement(\"a\");\nthis.focusLink.href=\"#\";\nelement.appendChild(this.focusLink);\n        element.className='treeImage';\n        var imgElement = document.createElement('img');\n        imgElement.src = this.file;\n        element.appendChild(imgElement);\n        this.element = element;\n        this.imgElement = imgElement;\n        return element;\n    }\n};\nair.Introspector.tree.node.putDisposeInPrototype(air.Introspector.tree.imageDownloadNode);\n\nair.Introspector.tree.domNode = function(domNode, config){\n   this.domNode = domNode;\n   this.readOnly = false;\n   air.Introspector.tree.node.call(this, '', config);\n   this.openable = true;\n   this.unselectOnBlur = false;\n};\n\nair.Introspector.tree.domNode.prototype = {\n	createAttribute: function(document, att){\n		var element = document.createElement('span');\n		\n		element.appendChild(document.createTextNode(' '));\n		\n		 var tagName = document.createElement('span');\n         tagName.className = 'tagDomNodeAttribute';\n         tagName.innerHTML = att.nodeName;\n         element.appendChild(tagName);\n		 element.appendChild(document.createTextNode('=\"'));\n		\n		var editor = new air.Introspector.tree.inPlaceEditor(function(){ return att.nodeValue.replace(/\\n/g, '\\\\n') }, \n		function(value){att.nodeValue = value.replace(/\\\\n/g, '\\n')});\n		 editor.attributeName = att.nodeName;\n		this.registerEditor(editor);\n		element.appendChild(editor.createDiv(document));\n		element.appendChild(document.createTextNode('\"'));\n		\n		this.registerListener(element, 'mousedown', function(e){ air.Introspector.debugWindow.setHoverDomElementAttribute(att); }, true );\n//        this.registerListener(element, 'mouseout', function(e){ air.Introspector.debugWindow.clearHoverDomElementAttribute(); }, true );\n		\n		return element;\n	},\n	\n	\n	toggleAttribute: function(attributeName){\n		for(var i=this.editors.length-1;i>=0;i--){\n			if(typeof this.editors[i].attributeName!='undefined'&&this.editors[i].attributeName==attributeName){\n				this.editors[i].toggleEditing();\n				return;	\n			}\n		}\n	},\n	\n	registerEditor: function(editor){\n		if(!this.editors)\n			this.editors = [];\n		editor.parent = this;\n		this.editors.push(editor);\n	},\n	clearEditors: function(){\n		if(this.editors){\n			for(var i=this.editors.length-1;i>=0;i--){\n				this.editors[i].dispose();\n			}\n		}\n	},\n	dispose: function(){\n		this.clearEditors();\n		air.Introspector.tree.node.prototype.dispose.call(this);\n	},\n	showDomHover:function(visible){\n		//air.Introspector.init();\n		if(visible){\n			air.Introspector.debugWindow.highlight(this.domNode);\n			if(!this.readOnly)\n				{air.Introspector.debugWindow.setHoverDomElement(this);}\n		}else{\n			air.Introspector.debugWindow.highlight();\n			if(!this.readOnly)			\n				{air.Introspector.debugWindow.clearHoverDomElement();}\n		}\n	},\n	onselect: function(sender, throwevent){\n		if(this.readOnly)\n			return;\n			\n		if(air.Introspector.tree.domNode.lastSelectedNode&&\n			air.Introspector.tree.domNode.lastSelectedNode.unselect&&\n				air.Introspector.tree.domNode.lastSelectedNode!=sender){\n					air.Introspector.tree.domNode.lastSelectedNode.unselect();\n		}\n						\n   	   air.Introspector.tree.domNode.lastSelectedNode = sender;\n	\n	   if(typeof throwevent=='undefined'||throwevent==true){\n	   		air.Introspector.showCssElement(this.domNode);\n	   }	\n	},\n	\n	expandAll: function(){\n		this.show();\n		for(var i=this.items.length-1;i>=0;i--)\n			this.items[i].expandAll();\n	},\n	\n	collapse: function(){\n		for(var i=this.items.length-1;i>=0;i--)\n			this.items[i].collapse();\n		this.hide();\n	},\n	\n	refreshAttributes: function(){\n		var attributesTag  = this.attributesTag;\n        var atts  = this.domNode.attributes;\n		attributesTag.innerHTML = '';\n        if(atts&&atts.length>0){\n        	attributesTag.appendChild(document.createTextNode(' '));\n             for(var i=0;i<atts.length;i++){\n				if(atts[i].nodeName.toLowerCase()=='id'){\n                	attributesTag.appendChild(this.createAttribute(document, atts[i]));\n				}\n             }\n             for(var i=0;i<atts.length;i++){\n				if(atts[i].nodeName.toLowerCase()!='id'){\n                	attributesTag.appendChild(this.createAttribute(document, atts[i]));\n				}\n             }\n        }\n	},\n    createDiv: function(document, isChild){\n         var self = this;\n        var element = document.createElement('span');\n		//element.href= \"javascript:void(0)\"; \n		this.focusLink = document.createElement(\"a\");\n		this.focusLink.href=\"#\";\n		element.appendChild(this.focusLink);\n\n        element.className='treeNode domTreeNode';\n        this.element = element;\n        \n        var nodeLabelDiv = document.createElement('div');\n        var nodeEndLabelDiv = null;\n        //should add parameters here\n        //nodeLabelDiv.innerHTML = air.Introspector.escapeHtml(this.domNode.nodeName);\n        var shouldAddEndTag = false;\n        \n        switch(this.domNode.nodeType){\n        	case Node.DOCUMENT_NODE:\n        	case Node.ELEMENT_NODE:\n		        nodeLabelDiv.appendChild(document.createTextNode('<'));\n		        var tagName = document.createElement('span');\n		        tagName.className = 'tagDomNodeName';\n				var nodeName = this.domNode.nodeName;\n				if(this.domNode.nodeType==Node.DOCUMENT_NODE)\n		 		    nodeName = 'Root';\n	 		    tagName.innerHTML = nodeName;\n		        nodeLabelDiv.appendChild(tagName);\n		\n		\n				var attributesTag = document.createElement('span');\n				this.attributesTag = attributesTag;\n				nodeLabelDiv.appendChild(attributesTag);\n				this.refreshAttributes();\n				\n		        if(this.domNode.hasChildNodes()){\n		        	shouldAddEndTag = this.domNode.firstChild.nextSibling!=null || this.domNode.firstChild.nodeType!=Node.TEXT_NODE;\n		        	if(!shouldAddEndTag){\n		        		nodeLabelDiv.appendChild(document.createTextNode('>'));\n		        		var editor = new air.Introspector.tree.inPlaceEditor(function(){ return self.domNode.firstChild.nodeValue.replace(/\\n/g, '\\\\n') }, \n                            function(value){self.domNode.firstChild.nodeValue = value.replace(/\\\\n/g, '\\n')});\n							this.registerEditor(editor);\n                        nodeLabelDiv.appendChild(editor.createDiv(document));\n                        \n                        var endTagName = document.createElement('span');\n                        endTagName.className = 'tagDomNodeName';\n                        endTagName.innerHTML = nodeName;\n                        nodeLabelDiv.appendChild(document.createTextNode('</'));\n                        nodeLabelDiv.appendChild(endTagName);\n		        		nodeLabelDiv.appendChild(document.createTextNode('>'));\n		\n		\n		        	}else{\n		        		 nodeLabelDiv.appendChild(document.createTextNode('>'));\n		        	}\n		        }else{\n		        	   nodeLabelDiv.appendChild(document.createTextNode('/>'));\n		        }\n	            this.openable = shouldAddEndTag;\n	            if(shouldAddEndTag){\n	                    nodeEndLabelDiv = document.createElement('span');\n                	    nodeEndLabelDiv.className = this.opened?'nodeEndLabelDivVisible':'nodeEndLabelDiv';\n	            	    var endTagName = document.createElement('span');\n                        endTagName.className = 'tagDomNodeName';\n                        endTagName.innerHTML = nodeName;\n                        \n                        nodeEndLabelDiv.appendChild(document.createTextNode('</'));\n                        nodeEndLabelDiv.appendChild(endTagName);\n                        nodeEndLabelDiv.appendChild(document.createTextNode('>'));\n                       \n	            	\n                   // nodeLabelDiv.addEventListener('click', function(e){ self.toggle(); e.stopPropagation(); } );\n                    var nodeAnchor = document.createElement('div');\n			        element.appendChild(nodeAnchor);\n\n					\n			        this.registerListener(nodeAnchor, 'mouseover', function(e){ self.showDomHover(true);  self.showHover(true); e.stopPropagation();} );\n                    this.registerListener(nodeAnchor, 'mouseout', function(e){ self.showDomHover(false);  self.showHover(false); e.stopPropagation(); } );\n        			this.nodeAnchor = nodeAnchor;\n					this.refreshNodeAnchor();\n					\n			        this.registerListener(nodeEndLabelDiv, 'mouseover', function(e){ self.showDomHover(true);  self.showHover(true); e.stopPropagation();} );\n                    this.registerListener(nodeEndLabelDiv, 'mouseout', function(e){ self.showDomHover(false);  self.showHover(false); e.stopPropagation(); } );\n\n                    this.registerListener(nodeAnchor, 'click', function(e){ self.select(); self.toggle(); e.stopPropagation(); } );\n					if(this.domNode.nodeType==Node.DOCUMENT_NODE)\n						this.shouldOpen();\n                }else{\n                	this.opened = false;\n                }\n            break;\n            case Node.TEXT_NODE:\n               var editor = new air.Introspector.tree.inPlaceEditor(function(){ return self.domNode.nodeValue.replace(/\\n/g, '\\\\n') }, \n                            function(value){self.domNode.nodeValue = value.replace(/\\\\n/g, '\\n')});\n                   this.registerEditor(editor);\n               nodeLabelDiv.appendChild(editor.createDiv(document));\n               this.openable = false;\n               this.opened = false;\n        	break;\n			default:\n				nodeLabelDiv.appendChild(document.createTextNode('<'));\n		        var tagName = document.createElement('span');\n		        tagName.className = 'tagDomNodeName';\n	 		    tagName.innerHTML = this.domNode.nodeName;\n		        nodeLabelDiv.appendChild(tagName);\n				nodeLabelDiv.appendChild(document.createTextNode('>'));\n			break;\n        }\n        \n         /*var child = this.domNode.firstChild;\n         while(child)\n         {\n                node.items.push(this.createDomTreeNode(child)); //, this.createGetter(obj, i), this.createSetter(obj, i)));\n                child = child.nextSibling;\n         }*/   \n        \n        nodeLabelDiv.className='treeLabel';// + (this.shouldSelectFlag?' selectedTreeLabel':'');\n\n		if(this.shouldSelectFlag){\n			this.addSelectedCss();\n		}\n        \n\n       this.registerListener( nodeLabelDiv, 'mouseover', function(e){ self.showDomHover(true);  self.showHover(true); e.stopPropagation(); }, true );\n       this.registerListener(nodeLabelDiv, 'mouseout', function(e){ self.showDomHover(false);  self.showHover(false); e.stopPropagation(); }, true );\n\n        element.appendChild(nodeLabelDiv);\n        this.nodeLabelDiv = nodeLabelDiv;\n\n       this.registerListener(nodeLabelDiv, 'click', function(e){\n			self.select();\n			   //self.toggle();\n			   self.show();\n               air.Introspector.debugWindow.showDomElementPath(self.domNode);\n		});\n        \n        this.registerListener(element, 'dblclick', function(e){\n			   	e.stopPropagation();  \n		//		self.toggle();\n		//		self.select();\n               //air.Introspector.debugWindow.gotoConsoleTab();\n//               air.Introspector.debugWindow.showDomElementPath(self.domNode);\n                } );\n        \n        \n        //nodeAnchor.style.visibility = this.openable?'visible':'hidden';\n\n        this.created = true;\n        \n        \n        var nodeChildren =  document.createElement('div');\n        element.appendChild(nodeChildren);\n        this.nodeChildren = nodeChildren;\n        \n        if(nodeEndLabelDiv){\n			this.registerListener(nodeEndLabelDiv, 'click', function(e){\n//					self.toggle();\n					self.select();\n	               air.Introspector.debugWindow.showDomElementPath(self.domNode);\n			});\n	 		element.appendChild(nodeEndLabelDiv);\n		}\n        this.nodeEndLabelDiv = nodeEndLabelDiv;\n        \n        if(this.opened){\n          this.refreshChildren();\n        }\n       \n 		if(!isChild){\n			this.registerEvents(null, 0);\n		}\n		\n        return element;\n    }\n};\n\nair.Introspector.tree.domNode.prototype.__proto__ = air.Introspector.tree.node.prototype;\n\nair.Introspector.tree.inPlaceEditor = function(getter, setter, className){\n    this.getter = getter;\n    this.setter = setter; \n    if(typeof className!='undefined'){\n        this.className = ' '+className;\n    }else{\n        this.className = '';\n    }\n};\n\nair.Introspector.tree.inPlaceEditor.prototype = {\n	noZeroLength: function(e){\n		try{\n		  var str = e+'';\n		  if(air.Introspector.trim(e).length==0){\n		  	return '[Empty string - click to edit]';\n		  }\n		  return str;\n		}catch(e){\n			return e+'';\n		}\n	},\n	toggleEditing: function(){\n		this.onclick();\n	},\n	selectParent: function(){\n		if(this.parent&&this.parent.select){\n			this.parent.select(true);\n		}\n	},\n	\n	onclick: function(){\n		var self = this;\n		this.selectParent();\n		if(this.parent&&this.parent.readOnly)\n			{return;}\n		if(this.state==0){//not editing\n		  var editor = document.createElement('input');\n		  editor.type = 'text';\n          \n		  try{\n	         editor.value = this.getter();\n	      }catch(e){\n	         editor.value = e;  \n	      }\n          \n          if (this.element.clientWidth > 0) {\n              editor.style.width = this.element.clientWidth + 'px';\n          }    \n          else {\n              // newer versions of webkit return 0 as clientWidth for inline elements like span unlike Safari 3.x which was used in AIR1.x\n              //  AIR 2.0 uses Safari 4.x WebKit and therefore must use getBoundingClientRect to get the computed width for the span element\n              // getBoundingClientRect support was added in WebKit starting with http://trac.webkit.org/changeset/40837\n              // and bug https://bugs.webkit.org/show_bug.cgi?id=15897\n              editor.style.width = this.element.getBoundingClientRect().width + 'px';  \n          }      \n		  this.editor = editor;\n		  this.element.innerHTML = '';\n		  this.element.appendChild(editor);\n		  this.saveValue = true;\n		  \n		  this.registerListener(editor,'dblclick', function(e){\n                        e.stopPropagation(); \n          }, true );\n		  this.registerListener(editor, 'click', function(e){ e.stopPropagation(); }, true );\n		  this.registerListener(editor, 'keypress', function(e){ if(self.state) { if(e.keyCode == 13) { self.saveValue=true; editor.blur(); return false;} else if(e.keyCode == 27){ self.saveValue=false; editor.blur(); return false;}}} );\n		  this.registerListener(editor, 'blur', function(){ if(self.state) self.onclick(); } );\n		  editor.focus();\n		}else{ //editing mode\n			//set the value to setter\n			if(this.saveValue){\n			  try{\n	            this.setter(this.editor.value);		  \n			  }catch(e){\n			  }\n			}\n		  setTimeout(function(){\n		      try{\n	            self.element.innerHTML = self.noZeroLength(air.Introspector.escapeHtml(self.getter()));\n		      }catch(e){\n		        //self.element.innerHTML = air.Introspector.escapeHtml(e);  \n		      } \n	      }, 100);\n		}\n		this.state ^= 1 ;\n		if(this.parent)\n			this.parent.state = this.state;\n	},\n    createDiv: function(document){\n		var element = document.createElement('div');\n        element.className='inPlaceEditor'+this.className;\n\n    	var self = this;\n    	this.state = 0; //not editing\n\n        \n        try{\n            element.innerHTML = this.noZeroLength(air.Introspector.escapeHtml(this.getter()));\n        }catch(e){\n            element.innerHTML = air.Introspector.escapeHtml(e);	\n        }\n        \n        this.registerListener(element, 'click', function(e){ if(self.state==0) self.onclick(); e.stopPropagation(); } , true );\n        \n      //  element.addEventListener('dblclick', function(e){\n      //                  e.stopPropagation(); \n      //          }, true );\n        \n        \n        this.element = element;\n        return element;\n    }\n};\nair.Introspector.tree.node.putDisposeInPrototype(air.Introspector.tree.inPlaceEditor);\n\nair.Introspector.split = function(element, leftElement, rightElement, firstWidth, minWidth){\n	this.element = element;\n	this.leftElement = leftElement;\n	this.rightElement = rightElement;\n	var self = this;\n	this.dragging = false;\n	\n	this.element.style.right = (firstWidth)+'px';\n	this.leftElement.style.right = (firstWidth+this.element.clientWidth)+'px';\n	this.rightElement.style.width = (firstWidth)+'px';	\n	this.firstWidth = firstWidth;\n	this.minWidth = minWidth;\n	if(isAppSandbox){\n		this.element.ownerDocument.defaultView.nativeWindow.stage.addEventListener(runtime.flash.events.MouseEvent.MOUSE_MOVE, function(ev){\n			self.mousemove(ev);\n		}, true);\n	}else{\n		this.element.ownerDocument.addEventListener(\"mousemove\", function(ev){self.mousemove(ev);}, true);\n	}\n	this.element.ownerDocument.addEventListener(\"mouseup\", function(ev){ self.mouseup(ev); }, true);\n	this.element.addEventListener(\"mousedown\", function(ev){self.mousedown(ev)}, true);		\n};\n\nair.Introspector.split.prototype = {\n	mousemove:function(ev){\n		if(this.dragging){\n			if(isAppSandbox){\n				var delta = this.firstX-ev.localX;\n			}else{\n				var delta = this.firstX-ev.clientX;\n			}\n				\n			var currentWidth = this.firstWidth + delta;\n\n			if(currentWidth<this.minWidth){\n				currentWidth=this.minWidth;\n			}\n			\n			this.currentWidth = currentWidth;\n			this.element.style.right = (currentWidth)+'px';\n			this.leftElement.style.right = (currentWidth+this.element.clientWidth)+'px';\n			this.rightElement.style.width = (currentWidth)+'px';	\n			if(isAppSandbox){\n				ev.stopImmediatePropagation();\n			}\n			ev.stopPropagation();	\n			ev.preventDefault();\n		}\n	},\n	mousedown: function(ev){\n		this.dragging = true;\n		this.firstX = ev.clientX;\n		this.currentWidth = this.firstWidth;\n		ev.stopPropagation();		\n		ev.preventDefault();\n	},\n	mouseup: function(ev){\n		if(this.dragging){\n\n			this.dragging = false;\n			this.firstWidth = this.currentWidth;\n			ev.stopPropagation();\n			ev.preventDefault();\n		}\n	}\n};\n\n\n		//-------------------------------------------------------------------------------------------------------------------------------------------------------\n		\n	    air.Introspector.getCssGroups = function(){\n			var cssGroupNames = {\n	0: \"Background\",\n	1: \"Box Model\",\n	2: \"Layout\",\n	3: \"Text\",\n	4: \"Other\",\n	length: 5\n};\n\nvar cssGroups = [];\n\n/*\n$group = 0;\n//Background - 0\ncssGroups['background-attachment']=$group;\ncssGroups['background-color']=$group;\ncssGroups['background-image']=$group;\ncssGroups['background-position']=$group;\ncssGroups['background-repeat']=$group;\ncssGroups['opacity']=$group;\ncssGroups['-webkit-background-clip']=$group;\ncssGroups['-webkit-background-composite']=$group;\ncssGroups['-webkit-background-origin']=$group;\ncssGroups['-webkit-background-size']=$group;\n\n$group = 1;\n//Box Model - 1\ncssGroups['border-bottom-color']=$group;\ncssGroups['border-bottom-style']=$group;\ncssGroups['border-bottom-width']=$group;\ncssGroups['border-collapse']=$group;\ncssGroups['border-left-color']=$group;\ncssGroups['border-left-style']=$group;\ncssGroups['border-left-width']=$group;\ncssGroups['border-right-color']=$group;\ncssGroups['border-right-style']=$group;\ncssGroups['border-right-width']=$group;\ncssGroups['border-top-color']=$group;\ncssGroups['border-top-style']=$group;\ncssGroups['border-top-width']=$group;\ncssGroups['bottom']=$group;\ncssGroups['height']=$group;\ncssGroups['left']=$group;\ncssGroups['top']=$group;\ncssGroups['right']=$group;\ncssGroups['width']=$group;\ncssGroups['padding-bottom']=$group;\ncssGroups['padding-left']=$group;\ncssGroups['padding-right']=$group;\ncssGroups['padding-top']=$group;\ncssGroups['margin-bottom']=$group;\ncssGroups['margin-left']=$group;\ncssGroups['margin-right']=$group;\ncssGroups['margin-top']=$group;\ncssGroups['-webkit-border-fit']=$group;\ncssGroups['-webkit-border-horizontal-spacing']=$group;\ncssGroups['-webkit-border-vertical-spacing']=$group;\ncssGroups['-webkit-box-align']=$group;\ncssGroups['-webkit-box-direction']=$group;\ncssGroups['-webkit-box-flex']=$group;\ncssGroups['-webkit-box-flex-group']=$group;\ncssGroups['-webkit-box-lines']=$group;\ncssGroups['-webkit-box-ordinal-group']=$group;\ncssGroups['-webkit-box-orient']=$group;\ncssGroups['-webkit-box-pack']=$group;\ncssGroups['-webkit-box-shadow']=$group;\ncssGroups['-webkit-border-bottom-left-radius']=$group;\ncssGroups['-webkit-border-bottom-right-radius']=$group;\ncssGroups['-webkit-border-top-left-radius']=$group;\ncssGroups['-webkit-border-top-right-radius']=$group;\ncssGroups['-webkit-margin-bottom-collapse']=$group;\ncssGroups['-webkit-margin-top-collapse']=$group;\n\n\n$group = 2;\n//Layout - 2\ncssGroups['position']=$group;\ncssGroups['visibility']=$group;\ncssGroups['display']=$group;\ncssGroups['z-index']=$group;\ncssGroups['overflow-x']=$group;\ncssGroups['overflow-y']=$group;\ncssGroups['white-space']=$group;\ncssGroups['clear']=$group;\ncssGroups['float']=$group;\ncssGroups['-webkit-box-sizing']=$group;\n\n$group = 3;\n//Text - 3\ncssGroups['text-align']=$group;\ncssGroups['text-decoration']=$group;\ncssGroups['text-indent']=$group;\ncssGroups['text-shadow']=$group;\ncssGroups['text-transform']=$group;\ncssGroups['font-family']=$group;\ncssGroups['font-size']=$group;\ncssGroups['font-style']=$group;\ncssGroups['font-variant']=$group;\ncssGroups['font-weight']=$group;\ncssGroups['letter-spacing']=$group;\ncssGroups['line-height']=$group;\ncssGroups['-webkit-text-decorations-in-effect']=$group;\ncssGroups['-webkit-text-fill-color']=$group;\ncssGroups['-webkit-text-security']=$group;\ncssGroups['-webkit-text-stroke-color']=$group;\ncssGroups['-webkit-text-stroke-width']=$group;\ncssGroups['word-spacing']=$group;\ncssGroups['word-wrap']=$group;\n\n\n\n$group = 4;\n//Other - 4\n\ncssGroups['caption-side']=$group;\ncssGroups['color']=$group;\ncssGroups['cursor']=$group;\ncssGroups['direction']=$group;\ncssGroups['empty-cells']=$group;\n\n\ncssGroups['list-style-image']=$group;\ncssGroups['list-style-position']=$group;\ncssGroups['list-style-type']=$group;\ncssGroups['max-height']=$group;\ncssGroups['max-width']=$group;\ncssGroups['min-height']=$group;\ncssGroups['min-width']=$group;\n\ncssGroups['orphans']=$group;\ncssGroups['outline-color']=$group;\ncssGroups['outline-style']=$group;\ncssGroups['outline-width']=$group;\n\n\ncssGroups['page-break-after']=$group;\ncssGroups['page-break-before']=$group;\ncssGroups['page-break-inside']=$group;\n\ncssGroups['resize']=$group;\n\ncssGroups['table-layout']=$group;\n\ncssGroups['unicode-bidi']=$group;\ncssGroups['vertical-align']=$group;\n\n\ncssGroups['widows']=$group;\n\ncssGroups['-webkit-appearance']=$group;\ncssGroups['-webkit-column-break-after']=$group;\ncssGroups['-webkit-column-break-before']=$group;\ncssGroups['-webkit-column-break-inside']=$group;\ncssGroups['-webkit-column-count']=$group;\ncssGroups['-webkit-column-gap']=$group;\ncssGroups['-webkit-column-rule-color']=$group;\ncssGroups['-webkit-column-rule-style']=$group;\ncssGroups['-webkit-column-rule-width']=$group;\ncssGroups['-webkit-column-width']=$group;\ncssGroups['-webkit-highlight']=$group;\ncssGroups['-webkit-line-break']=$group;\ncssGroups['-webkit-line-clamp']=$group;\ncssGroups['-webkit-marquee-direction']=$group;\ncssGroups['-webkit-marquee-increment']=$group;\ncssGroups['-webkit-marquee-repetition']=$group;\ncssGroups['-webkit-marquee-style']=$group;\ncssGroups['-webkit-nbsp-mode']=$group;\ncssGroups['-webkit-rtl-ordering']=$group;\ncssGroups['-webkit-user-drag']=$group;\ncssGroups['-webkit-user-modify']=$group;\ncssGroups['-webkit-user-select']=$group;\ncssGroups['-webkit-dashboard-region']=$group;\n\n*/\n\ncssGroups[0]=['background-attachment', 'background-color', 'background-image', 'background-position', 'background-repeat', 'opacity', '-webkit-background-clip', '-webkit-background-composite', '-webkit-background-origin', '-webkit-background-size', ];\n\n//Box Model - 1\ncssGroups[1]=['border-bottom-color', 'border-bottom-style', 'border-bottom-width', 'border-collapse', 'border-left-color', 'border-left-style', 'border-left-width', 'border-right-color', 'border-right-style', 'border-right-width', 'border-top-color', 'border-top-style', 'border-top-width', 'bottom', 'height', 'left', 'top', 'right', 'width', 'padding-bottom', 'padding-left', 'padding-right', 'padding-top', 'margin-bottom', 'margin-left', 'margin-right', 'margin-top', '-webkit-border-fit', '-webkit-border-horizontal-spacing', '-webkit-border-vertical-spacing', '-webkit-box-align', '-webkit-box-direction', '-webkit-box-flex', '-webkit-box-flex-group', '-webkit-box-lines', '-webkit-box-ordinal-group', '-webkit-box-orient', '-webkit-box-pack', '-webkit-box-shadow', '-webkit-border-bottom-left-radius', '-webkit-border-bottom-right-radius', '-webkit-border-top-left-radius', '-webkit-border-top-right-radius', '-webkit-margin-bottom-collapse', '-webkit-margin-top-collapse', ];\n\n\n//Layout - 2\ncssGroups[2]=['position', 'visibility', 'display', 'z-index', 'overflow-x', 'overflow-y', 'white-space', 'clear', 'float', '-webkit-box-sizing', ];\n\n//Text - 3\ncssGroups[3]=['text-align', 'text-decoration', 'text-indent', 'text-shadow', 'text-transform', 'font-family', 'font-size', 'font-style', 'font-variant', 'font-weight', 'letter-spacing', 'line-height', '-webkit-text-decorations-in-effect', '-webkit-text-fill-color', '-webkit-text-security', '-webkit-text-stroke-color', '-webkit-text-stroke-width', 'word-spacing', 'word-wrap', ];\n\n\n//Other - 4\n\ncssGroups[4]=['caption-side', 'color', 'cursor', 'direction', 'empty-cells', \n	'list-style-image', 'list-style-position', 'list-style-type', 'max-height', 'max-width', 'min-height', 'min-width', \n	'orphans', 'outline-color', 'outline-style', 'outline-width', \n	'page-break-after', 'page-break-before', 'page-break-inside', \n	'resize', \n	'table-layout', \n	'unicode-bidi', 'vertical-align', \n	'widows', \n	'-webkit-appearance', '-webkit-column-break-after', '-webkit-column-break-before', '-webkit-column-break-inside', '-webkit-column-count', '-webkit-column-gap', '-webkit-column-rule-color', '-webkit-column-rule-style', '-webkit-column-rule-width', '-webkit-column-width', '-webkit-highlight', '-webkit-line-break', '-webkit-line-clamp', '-webkit-marquee-direction', '-webkit-marquee-increment', '-webkit-marquee-repetition', '-webkit-marquee-style', '-webkit-nbsp-mode', '-webkit-rtl-ordering', '-webkit-user-drag', '-webkit-user-modify', '-webkit-user-select', '-webkit-dashboard-region',];\n\n\n\n\n\n			return [cssGroupNames, cssGroups];\n		}	\n		\n		//=======================================================================================================================================================\n		//DebugWindow.js\n		//=======================================================================================================================================================\n		\n\nair.Introspector.DebugWindow = function(config){\n    var self = this;\n    this.logLines = [];\n    this.domList = [];\n    this.isLoaded =  false;\n\n	if(isAppSandbox){\n    	this.activeWindow = air.Introspector.runtime.NativeApplication.nativeApplication.activeWindow;\n	}else{\n		//will get it from config later\n		this.activeWindow = activeWindow;\n	}\n\n    this.isInspecting = false;\n    this.evalHistory = [];\n    this.evalHistoryPos = -1;\n    this.selectedTab = 'console';\n    this.scrollDisabled = false;\n    this.requestLog = [];\n    this.activeTab = 0;\n    this.tabs = ['console', 'html2', 'dom','assets','source','net'];\n	this.cssTabs = ['css2Dom', 'css2Style', 'css2Box'];\n	this.activeCssTab = 0;\n	this.activateDebug = false;\n	this.isWindowCreated = false;\n	this.isMenuVisible = false;\n    //var initOptions = new air.Introspector.runtime.NativeWindowInitOptions();\n    //initOptions.transparent = true;\n    //initOptions.systemChrome = \"none\";\n    if(typeof config!='undefined'){\n		air.Introspector.extend(this, config);\n	}\n	var css = air.Introspector.getCssGroups();\n	this.cssGroupNames = css[0];\n	this.cssGroups = css[1];\n	this.isAppSandbox = isAppSandbox;\n}\n\n		//-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n		air.Introspector.DebugWindow.prototype = \n		{\n\n		//=======================================================================================================================================================\n		//DebugWindow.INIT.js\n		//=======================================================================================================================================================\n		saveConfig: function(force){\n	if(this.evalHistory&&this.evalHistory.length>30){\n		this.evalHistory.splice(0, this.evalHistory.length-30);\n		this.evalHistoryPos = this.evalHistory.length;\n	}\n	\n	var config = {\n		evalHistory : this.evalHistory\n	};\n	\n	if(isAppSandbox){\n		if(this.nativeWindow.displayState==runtime.flash.display.NativeWindowDisplayState.NORMAL){\n			config.rect = {\n				x:this.nativeWindow.x,\n				y:this.nativeWindow.y,\n				width:this.nativeWindow.width,\n				height:this.nativeWindow.height\n			};\n		}else if(this.lastConfig){\n			config.rect = this.lastConfig.rect;\n		}\n		config.windowState = this.nativeWindow.displayState;\n	}else{\n		config.rect = {\n			x:this.window.screenX,\n			y:this.window.screenY,\n			width:this.window.outerWidth,\n			height:this.window.outerHeight\n		};\n	}\n\n	var ok = typeof force!='undefined'?force:false;\n	if(!ok&&this.lastConfig){\n		if(!ok&&this.lastConfig.rect&&config.rect){\n			if(config.rect.x!=this.lastConfig.rect.x) ok=true;\n			if(config.rect.y!=this.lastConfig.rect.y) ok=true;\n			if(config.rect.width!=this.lastConfig.rect.width) ok=true;\n			if(config.rect.height!=this.lastConfig.rect.height) ok=true;			\n		}else{ ok=true; }\n		if(!ok&&this.lastConfig.windowState&&config.windowState){\n			if(config.windowState!=this.lastConfig.windowState) ok=true;			\n		}else{ ok=true; }\n	}\n	if(!ok)return;\n	if(this.writeTimeout){\n		clearTimeout(this.writeTimeout);\n		this.writeTimeout = null;\n	}\n	\n	this.writeTimeout = setTimeout(function(){ \n		air.Introspector.writeConfigFile(config);		\n	}, 300);\n\n	this.lastConfig = config;\n},\n\nreadConfig: function(config){\n	if(config.evalHistory){\n		this.evalHistory = config.evalHistory;\n		this.evalHistoryPos = config.evalHistory.length;\n	}\n	if(isAppSandbox){\n		if(config.rect){\n			this.nativeWindow.x = config.rect.x;\n			this.nativeWindow.y = config.rect.y;\n			this.nativeWindow.width = config.rect.width;\n			this.nativeWindow.height = config.rect.height;\n		}\n		if(config.windowState){\n			switch(config.windowState){\n				case runtime.flash.display.NativeWindowDisplayState.MAXIMIZED:\n					this.nativeWindow.maximize();					\n					break;\n				case runtime.flash.display.NativeWindowDisplayState.MINIMIZED:\n					this.nativeWindow.minimize();					\n					break;\n			}\n		}\n	}else{\n		if(config.rect){\n			this.window.moveTo(config.rect.x, config.rect.y);\n			this.window.resizeTo(config.rect.width, config.rect.height);\n		}\n	}\n	this.lastConfig = config;\n},\n\n\ninitConfigFile: function(){\n	var self = this;\n\n	if(isAppSandbox){\n		var config = air.Introspector.readConfigFile();\n		if(typeof config=='undefined') config = {};\n		this.readConfig(config);\n		this.nativeWindow.addEventListener(runtime.flash.events.NativeWindowBoundsEvent.MOVE , function(){ self.saveConfig(); });\n		this.nativeWindow.addEventListener(runtime.flash.events.NativeWindowBoundsEvent.RESIZE , function(){ self.saveConfig(); });	\n	}else{\n		air.Introspector.readConfigFile(true, function(config){\n			if(typeof config=='undefined') config = {};\n			self.readConfig(config);\n			setInterval(function() { self.saveConfig();  }, 900);\n		});\n	}\n},\n\n\n\nloadUIElements: function(){\n		this.consoleDiv = this.htmlLoader.window.document.getElementById('console');\n	    this.windowsDiv = this.htmlLoader.window.document.getElementById('windowList');\n	    this.tabLabels = this.htmlLoader.window.document.getElementById('tabLabels');\n\n	//        this.consoleTabLabel = this.htmlLoader.window.document.getElementById('consoleTabLabel');\n	//        this.html2TabLabel = this.htmlLoader.window.document.getElementById('html2TabLabel');\n\n	    this.evalConsoleText = this.htmlLoader.window.document.getElementById('evalConsoleText');\n	    this.tabPages = this.htmlLoader.window.document.getElementById('tabPages');\n\n	    this.cssTabLabels = this.htmlLoader.window.document.getElementById('css2TabLabels');\n	    this.cssTabPages = this.htmlLoader.window.document.getElementById('css2TabPages');\n\n\n	    this.domDiv = this.htmlLoader.window.document.getElementById('domTab');\n	    //this.htmlDiv = this.htmlLoader.window.document.getElementById('htmlTab');\n	    this.netTabDiv = this.htmlLoader.window.document.getElementById('netTab');\n	    this.html2TabDiv = this.htmlLoader.window.document.getElementById('html2Tab');\n		this.html2Div = this.htmlLoader.window.document.getElementById('html2Div');\n		this.html2Split = this.htmlLoader.window.document.getElementById('html2Split');\n		this.css2Div = this.htmlLoader.window.document.getElementById('css2Div');\n		this.css2SplitObj = new air.Introspector.split(this.html2Split, this.html2Div, this.css2Div , 300, 150);\n	    this.assetsTabDiv = this.htmlLoader.window.document.getElementById('assetsTab');\n	    this.sourcesTabDiv = this.htmlLoader.window.document.getElementById('sourceTab');\n	    this.inspectToolLabel = this.htmlLoader.window.document.getElementById('inspectToolLabel');\n	    this.consoleMenuDiv = this.htmlLoader.window.document.getElementById('consoleMenuDiv');\n	    this.domMenuDiv = this.htmlLoader.window.document.getElementById('domMenuDiv');	\n		this.menuDiv = this.htmlLoader.window.document.getElementById('menuDiv');	\n\n		this.domRemoveAttributeMenuDiv = this.htmlLoader.window.document.getElementById('domRemoveAttributeMenuDiv');\n\n		this.css2DomTab = this.htmlLoader.window.document.getElementById('css2DomTab');\n		this.css2StyleTab = this.htmlLoader.window.document.getElementById('css2StyleTab');\n\n		this.refreshActiveWindowButton = this.htmlLoader.window.document.getElementById('refreshActiveWindow');\n	\n	},\n	\n\ncreateMenu: function(){\n	var self = this;\n	if(isAppSandbox){\n		var consoleMenu = new runtime.flash.display.NativeMenu();\n		var domMenu = new runtime.flash.display.NativeMenu();\n		\n		var clearMenu = new runtime.flash.display.NativeMenuItem('Clear console');\n		clearMenu.addEventListener(runtime.flash.events.Event.SELECT, function(){ self.clearConsole(); });\n\n		var saveMenu = new runtime.flash.display.NativeMenuItem('Save console to file...');\n		saveMenu.addEventListener(runtime.flash.events.Event.SELECT, function(){ self.saveConsoleToFile(); });\n\n		var clipboardMenu = new runtime.flash.display.NativeMenuItem('Save console to clipboard');\n		clipboardMenu.addEventListener(runtime.flash.events.Event.SELECT, function(){ self.saveConsoleToClipboard(); });\n\n\n		var copyMenu = new runtime.flash.display.NativeMenuItem('Copy');\n		copyMenu.addEventListener(runtime.flash.events.Event.SELECT, function(){ air.Introspector.runtime.NativeApplication.nativeApplication.copy() });\n\n\n		\n		var domMenuExpand = new runtime.flash.display.NativeMenuItem('Expand All');\n		domMenuExpand.addEventListener(runtime.flash.events.Event.SELECT, function(){ self.expandHoverDomElement(); });		\n		this.domMenuExpand = domMenuExpand;\n		\n		var domMenuCollapse = new runtime.flash.display.NativeMenuItem('Collapse');\n		domMenuCollapse.addEventListener(runtime.flash.events.Event.SELECT, function(){ self.collapseHoverDomElement(); });				\n		this.domMenuCollapse = domMenuCollapse;\n		\n		var domMenuAddAttribute = new runtime.flash.display.NativeMenuItem('Add attribute');\n		domMenuAddAttribute.addEventListener(runtime.flash.events.Event.SELECT, function(){ self.addHoverDomElementAttribute(); });		\n		this.domMenuAddAttribute = domMenuAddAttribute;\n		\n		var domMenuRemoveAttribute = new runtime.flash.display.NativeMenuItem('Remove attribute');\n		domMenuRemoveAttribute.addEventListener(runtime.flash.events.Event.SELECT, function(){ self.removeHoverDomElementAttribute(); });		\n		this.domMenuRemoveAttribute = domMenuRemoveAttribute;\n		\n		\n		\n		consoleMenu.addItem(clearMenu);\n		consoleMenu.addItem(saveMenu);	\n		consoleMenu.addItem(clipboardMenu);	\n		consoleMenu.addItem(new runtime.flash.display.NativeMenuItem('', true));\n		consoleMenu.addItem(copyMenu);			\n	\n		domMenu.addItem(domMenuExpand);\n		domMenu.addItem(domMenuCollapse);		\n		domMenu.addItem(domMenuAddAttribute);	\n		domMenu.addItem(domMenuRemoveAttribute);			\n			\n		this.consoleMenu = consoleMenu;\n		this.domMenu = domMenu;\n	}else{\n		//preventing click when menu is visible\n		this.htmlLoader.window.document.addEventListener('click', function(evt){\n				if(self.isMenuVisible){\n					var parent = evt.srcElement;\n					while(parent){\n						if(parent==self.menuDiv)\n							return;\n						parent = parent.parentNode;\n					}\n					evt.stopPropagation();\n					self.hideMenu();\n				}\n			}, true);\n			\n		\n		var preventClosingListener = function(){\n				if(this.style.display=='block'){\n					if(self.menuTimeout){\n						clearTimeout(self.menuTimeout);\n						delete self.menuTimeout;\n					}\n				}\n			};\n\n		var hideMenuListener = function(){\n				if(this.style.visibility=='visible'){\n					if(!self.menuTimeout)\n						self.menuTimeout = setTimeout(function(){ self.hideMenu(); }, 400);\n				}	\n			};\n\n		this.consoleMenuDiv.addEventListener('mouseover', preventClosingListener, true);\n		this.domMenuDiv.addEventListener('mouseover', preventClosingListener, true);\n		\n		this.consoleMenuDiv.addEventListener('mouseout',hideMenuListener , true);\n		this.domMenuDiv.addEventListener('mouseout',hideMenuListener , true);		\n	}\n	\n},	\n\n\n\n\n\nattachUIWindow: function(window){\n	if(!isAppSandbox){\n		this.window = window;\n		this.htmlLoader = { window: window };\n		this.window.document.title = 'Non Application Sandbox - frame id=\"'+iframeId+'\"';\n	}else{\n		this.htmlLoader = window.htmlLoader;\n		this.nativeWindow = window.nativeWindow;\n		this.nativeWindow.width = 640;\n	    this.nativeWindow.height = 480;\n		this.window = window;\n	}\n},\n\ndispose: function(){\n	try{\n		this.finishInspect();\n		window.closed = true;\n	}catch(e){}    \n},\n\ninit: function(window){\n   var self = this;\n\n   this.isWindowCreated = true;\n   this.attachUIWindow(window);\n\n\n\n   this.initConfigFile();\n\n\n\n	\n   this.loadUIElements();\n   this.createMenu();\n\n\n\n	//restore inspecting to initial state\n	if(this.isInspecting){\n        this.inspectToolLabel.className+=' selected';\n    }else{\n        this.finishInspect();\n    }\n\n\n    this.consoleDiv.addEventListener('scroll', function(){self.scrollDisabled = self.consoleDiv.scrollTop != self.consoleDiv.scrollHeight-self.consoleDiv.clientHeight;});\n    \n	this.activateTab();\n	this.activateCssTab();\n\n    \n    this.isLoaded = true;\n    if(this.logLines.length>0){\n        this.refreshConsole();\n    }\n    \n    if(this.requestLog.length>0){\n        this.refreshNetConsole();\n    }\n    \n\n	this.refreshWindows();\n    \n	if(isAppSandbox){\n        this.nativeWindow.visible = true;\n        if(typeof window.activateDebug!='undefined'&&window.activateDebug==false)\n        {\n            try{\n               this.activeWindow.activate();\n//               this.activeDebugWindow.orderToFront();\n            }catch(e){\n            }\n        }\n      \n	   air.Introspector.addKeyboardEvents(this.htmlLoader.stage);\n    }\n\n   this.refreshDomPanel();\n\n},\n\nrefreshWindows: function(){\n    if(this.isAppSandbox){\n        this.ownedWindows = air.Introspector.getHtmlWindows();\n        this.windowsDiv.options.length = 0;\n		var windowsCount = 0;\n		var activeWindowFound = false;\n		var firstWindow = null;\n		var firstHtmlLoader = null;\n        for(var i=this.ownedWindows.length-1;i>=0;i--){\n			var item = this.ownedWindows[i];\n            if(item.nativeWindow==this.nativeWindow) continue;\n			try{\n				if((item.htmlLoader.window.alert+'').indexOf(\"[native code]\")<0) continue;\n			}catch(e){ continue; }\n				windowsCount ++;\n			firstWindow = item.nativeWindow;\n			firtHtmlLoader = item.htmlLoader;\n			if(item.nativeWindow==this.activeWindow){\n				activeWindowFound = true;\n				this.activeHtmlLoader = item.htmlLoader;\n			}\n           var selected = this.ownedWindows[i].nativeWindow==this.activeWindow;\n		   var label = item.label? ' - ' + item.label : '' ;\n           var option = new Option(item.nativeWindow.title + label, i, selected, selected);\n			option.innerHTML += \"&nbsp;\";\n           this.windowsDiv.options.add(option);\n        }\n\n		if(windowsCount==0){\n			if(air.Introspector.runtime.NativeApplication.nativeApplication.autoExit\n					&&air.Introspector.config.closeIntrospectorOnExit){			\n				air.Introspector.runtime.NativeApplication.nativeApplication.exit();\n				return;\n			}\n		}\n		if(!activeWindowFound){\n			this.activeWindow = firstWindow;\n			if(this.windowsDiv.options.length>0)\n				this.windowsDiv.options[0].selected = true;\n			this.activeHtmlLoader = firstHtmlLoader;\n		}\n        this.refreshDomPanel();\n        this.createAssetsTree();\n        this.createSourcesTree();\n	}else{\n		this.windowsDiv.style.display='none';\n		this.refreshActiveWindowButton.value='Refresh';\n		 this.refreshDomPanel();\n	     this.createAssetsTree();\n	     this.createSourcesTree();\n	}\n},\n\n\n   refreshDomPanel: function(){\n       this.makeDomDiv();\n       this.makeHtmlDiv();\n   },\n\n completeWindow: function(htmlLoader){\n        //clear dom related to this htmlLoader\n        var self = this;\n        var activeHtmlLoader = this.getActiveHtmlLoader();\n        if(activeHtmlLoader==htmlLoader){\n            this.createAssetsTree();\n            this.createSourcesTree();\n        }else{\n            this.refreshWindows();\n        }\n    },\n\n  setActiveWindowById: function(id){\n		if(isAppSandbox){\n			var selectedWindow = this.ownedWindows[id];\n 	        this.activeWindow = selectedWindow.nativeWindow;\n			var label = selectedWindow.label? ' - ' + selectedWindow.label : '' ;\n	        this.activeHtmlLoader = selectedWindow.htmlLoader;\n	        if(this.activeWindow!=null){\n	            try{\n	               this.logBuffer('\"'+this.activeWindow.title+label+'\" window selected');\n	            }catch(e){\n	            }\n	        }\n	        this.refreshDomPanel();\n	        this.createAssetsTree();\n	        this.createSourcesTree();\n		}\n    },\n\n    setActiveWindowByDocument: function(document){\n		if(isAppSandbox){\n	        for(var i=this.windowsDiv.options.length-1;i>=0;i--){\n	        	try{\n	        		var option = this.windowsDiv.options[i];\n		        	var windowId = parseFloat(option.value);\n		        	if(this.ownedWindows[windowId].htmlLoader.window.document==document){\n		        	   option.selected = true;\n		        	   this.setActiveWindowById(windowId);\n		        	   return;\n		        	}\n	        	}catch(e){\n	        	}\n	        }\n		}\n    },\n\n  getActiveHtmlLoader: function(){\n		if(isAppSandbox){\n	        return this.activeHtmlLoader;\n		}else{\n			return {window: this.activeWindow };\n		}\n    },\n\n	setTab: function(tab){\n		this.activeTab = tab;\n        if(this.isLoaded){\n			this.activateTab();\n		}\n		\n    },\n	activateTab: function(){\n        this.clearTabs();\n		\n		var tabName = this.tabs[this.activeTab];\n		this.activeTabDiv = this.htmlLoader.window.document.getElementById(tabName+'Tab');\n		window.SearchBox.attachToNode(this.activeTabDiv);\n		this.htmlLoader.window.document.getElementById(tabName+'Label').className = 'selected';\n        this.activeTabDiv.className = 'selected';\n\n		if(this.activeTab==0){\n			this.evalConsoleText.focus();\n		}\n	},\n    setTool: function(toolName){\n        switch(toolName){\n            case 'inspect':\n              this.toggleInspect();\n            break;\n        }\n    },\n    clearTabs: function(){\n        var child = this.tabLabels.firstChild;\n        while(child!=null){\n            if(child.nodeType==1)  child.className = child.className.replace(/selected/, '');\n            child=child.nextSibling;\n        }\n        var child = this.tabPages.firstChild;\n        while(child!=null){\n            if(child.nodeType==1) child.className = child.className.replace(/selected/, '');\n            child=child.nextSibling;\n        }\n    },\n\n  \n\n	timerBounce: function(tag){\n		var bounceTimer = 1300;\n		var hideBounce = function(){\n			if(tag.className.indexOf('bounce')==-1) return;\n			tag.className = tag.className.replace(/bounceOn/g, \"bounceOff\");\n			tag.innerHTML +=''; //force render\n			setTimeout(showBounce, bounceTimer);\n		};\n		var showBounce = function(){\n			if(tag.className.indexOf('bounce')==-1) return;\n			tag.className = tag.className.replace(/bounceOff/g, \"bounceOn\");\n			tag.innerHTML +='';	//force render		\n			setTimeout(hideBounce, bounceTimer);			\n		};\n		setTimeout(hideBounce, bounceTimer);\n	},\n	\n	bounceTab: function(tab){\n		if(!air.Introspector.config.flashTabLabels)\n			return;\n		\n		if(this.isLoaded&&this.activeTab!=tab){\n			try{\n				var tabName = this.tabs[tab];\n				var tag =  this.htmlLoader.window.document.getElementById(tabName+'Label');\n				if(tag.className.indexOf('bounce')==-1){\n					tag.className += ' bounceOn';\n					this.timerBounce(tag);\n				}\n			}catch(e){\n				//wrong tab...\n			}\n		}\n	},\n	\n	\n	loadUrl: function(url, callback){\n    	var loader = new air.Introspector.runtime.URLLoader();\n        loader.addEventListener(air.Introspector.runtime.Event.COMPLETE, function(e)\n        {\n        	callback(loader.data);\n        });\n        loader.load(new air.Introspector.runtime.URLRequest(activeHtmlLoader.location));\n    },\n    \n    \n    \n    closedWindow: function(htmlLoader){\n		var self = this;\n		this.htmlLoader.window.setTimeout(function(){\n        	self.refreshWindows();\n		}, 0);\n    },\n   \n	hideMenu: function(ev){\n		this.isMenuVisible=false;\n		this.consoleMenuDiv.style.display = '';\n		this.domMenuDiv.style.display = '';		\n		this.menuHoverDomElement = null;		\n	},\n	\n	showMenu: function(ev){\n		if(ev.srcElement&&ev.srcElement.nodeName.toLowerCase()==\"input\") return;\n		if(isAppSandbox){\n			var self = this;\n			var menu =  this.activeTab==0?this.consoleMenu:null;\n\n			if(this.hoverDomElement){\n				this.menuHoverDomElement = this.hoverDomElement;\n				this.menuHoverDomElementAttribute = this.hoverDomElementAttribute;\n				this.domMenuRemoveAttribute.enabled = this.hoverDomElementAttribute?true:false;\n				menu = this.domMenu;\n			}\n						\n			if(menu){\n				menu.display(nativeWindow.stage, ev.pageX, ev.pageY);\n				return false;\n			}\n			\n		}else{	\n			\n			\n			var menuDiv = this.activeTab==0?this.consoleMenuDiv:null;\n			\n			if(this.hoverDomElement){\n				this.menuHoverDomElement = this.hoverDomElement;\n				menuDiv = this.domMenuDiv;\n			}\n			\n			if(this.hoverDomElementAttribute){\n				this.menuHoverDomElementAttribute=this.hoverDomElementAttribute;\n				this.domRemoveAttributeMenuDiv.style.display = ''; 				\n			}else{\n				this.domRemoveAttributeMenuDiv.style.display = 'none'; \n			}\n			\n			if(menuDiv){\n				this.isMenuVisible = true;\n				menuDiv.style.left=(ev.pageX-4)+'px';\n				menuDiv.style.top=(ev.pageY-4)+'px';			\n				menuDiv.style.display = 'block';\n				return false;\n			}\n			\n		}\n\n		return true;	\n	},\n	\n	\n\n\n		//-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n		//=======================================================================================================================================================\n		//DebugWindow.ASSETS.js\n		//=======================================================================================================================================================\n		createLinksTree: function(document){\n	return function(){\n		var alreadyAdded = {};\n    	this.items = [];\n    	for(var i=0;i<document.links.length;i++){\n    		if(alreadyAdded[document.links[i].href]) continue;\n    		if(document.links[i].name&&document.links[i].name.length!=0){\n    		     var node = new air.Introspector.tree.node(document.links[i].name, { nodeLabel2: document.links[i].href, openable:false});\n    		}else{\n    			 var node = new air.Introspector.tree.node(document.links[i].href, { nodeLabel2: '', openable:false});\n    		}\n    		this.items.push(node);\n    		alreadyAdded[document.links[i].href]=true;\n    	}\n	};\n},\n\ncreateImagesTree: function(document){\n    return function(){\n    	var alreadyAdded = {};\n        this.items = [];\n        for(var i=0;i<document.images.length;i++){\n        	if(alreadyAdded[document.images[i].src]) continue;\n			var title = document.images[i].src;\n			if(isAppSandbox){\n				try{\n				var file = new runtime.flash.filesystem.File(document.images[i].src);\n				if(file.exists){\n					title += ' [size: '+(Math.round(file.size/10.24)/100)+' KB]';\n				}else{\n					title += ' [NOT FOUND]';\n				}\n				}catch(e){\n					// we'll be here if the image src is not correct\n					// just ignore it; \n				}\n			}\n            var node = new air.Introspector.tree.node(title, {\n                src : document.images[i].src,\n                onshow:function(){\n                    if(this.items.length==0){\n                           this.items = [ new air.Introspector.tree.imageDownloadNode(this.src) ];\n                    }       \n                }, onhide: function(){\n                	//this.items.length = 0;\n					this.clearItems();\n                }\n            });\n            this.items.push(node);\n            alreadyAdded[document.images[i].src] = true;\n        }\n    };\n},\n\n\ncreateCssTree: function(document){\n    return function(){\n        this.items = [];\n        for(var i=0;i<document.styleSheets.length;i++){\n    		var node;\n            if(document.styleSheets[i].href){\n            	node = new air.Introspector.tree.node (document.styleSheets[i].href, {\n                    src : document.styleSheets[i].href,\n                    onshow:function(){\n                        if(this.items.length==0)\n                              this.items = [ new air.Introspector.tree.textDownloadNode(this.src) ];       \n                    }\n                });\n            }else{\n            	 node = new air.Introspector.tree.node ('<style>', {\n                    text: document.styleSheets[i].ownerNode.innerHTML,\n                    onshow:function(){\n                        if(this.items.length==0)\n                            this.items = [ new air.Introspector.tree.textNode(this.text) ];        \n                    }\n                }); \n            }\n            this.items.push(node);\n        }\n    };\n},\n\n\ncreateProjectTree: function(){\n	if(isAppSandbox){\n		var self = this;\n    	var formats = air.Introspector.formats;\n    	var extendTree = function(parentNode, file){\n            this.items = [];\n            var files = file.getDirectoryListing();\n            for(var i=0;i<files.length;i++){\n                var node;\n                if(files[i].isDirectory){\n                     node = new air.Introspector.tree.node (files[i].name  , {\n                        src : files[i],\n                        onshow:function(){\n                            extendTree(this, this.src);\n                        },\n                        onhide:function(){\n                        	//this.items.length=0;\n							this.clearItems();\n                        }\n                    });\n                }else{\n						var title = files[i].name;\n						var format = formats[files[i].extension];\n\n						if(isAppSandbox && format==1){\n							var file = files[i];\n							if(file.exists){\n								title += ' [size: '+(Math.round(file.size/10.24)/100)+' KB]';\n							}else{\n								title += ' [NOT FOUND]';\n							}\n						}						\n						\n                	    node = new air.Introspector.tree.node (title , {\n	                        src : 'file:///'+files[i].nativePath,\n							format: formats[files[i].extension], \n	                        onshow:function(){\n	                            if(this.items.length==0){\n	                            	if(this.format==0){\n	                                  this.items = [ new air.Introspector.tree.textDownloadNode(this.src) ];\n	                            	}else if(this.format==1){\n	                            	   this.items = [ new air.Introspector.tree.imageDownloadNode(this.src) ];\n	                            	}else if(this.format==2){\n										if(this.items.length==0){\n											var selfNode = this;\n											if(isAppSandbox){ //can not be something else\n									        	var scriptLoader = new air.Introspector.runtime.URLLoader();\n										        scriptLoader.addEventListener(air.Introspector.runtime.Event.COMPLETE, function(e){\n														var domParser = new DOMParser();\n														try{\n															var xmlData = domParser.parseFromString(scriptLoader.data, \"text/xml\");\n															self.extendDom2TreeNode(selfNode, xmlData, true);\n														}catch(e){\n															try{\n					                                  			selfNode.items = [ new air.Introspector.tree.textNode(scriptLoader.data) ];																\n															}catch(err){\n																selfNode.items = [ new air.Introspector.tree.textNode(err+'') ];																\n															}\n														}\n														selfNode.show();\n														scriptLoader = null;\n											        });\n												scriptLoader.addEventListener(air.Introspector.runtime.IOErrorEvent.IO_ERROR, function(e){\n													selfNode.items = [ new air.Introspector.tree.textNode(\"error loading file \"+e) ];\n													selfNode.show();\n													air.Introspector.logError(e);\n												});\n												scriptLoader.load(new air.Introspector.runtime.URLRequest(this.src));\n											}\n											selfNode.items = [ new air.Introspector.tree.textNode(\"Loading...\") ];\n										}\n	                            	}\n	                            }       \n	                        }, onhide: function(){ this.clearItems(); }\n	                    });\n                }\n                parentNode.items.push(node);\n            }\n        };\n    \n        node = new air.Introspector.tree.node ('Application files'  , {\n                        src : runtime.flash.filesystem.File.applicationDirectory,\n                        onshow:function(){\n                            extendTree(this, this.src);\n                        },\n                        onhide:function(){\n                            //this.items.length=0;\n							this.clearItems();\n                        }\n                    });\n        return node;\n	}else{\n		return null;\n	}\n},\n    \n\ncreateScriptsTree: function(document){\n    return  function(){\n        this.items = [];\n        for(var i=0;i<document.scripts.length;i++){\n			var node;\n        	if(document.scripts[i].src){\n        		node = new air.Introspector.tree.node (document.scripts[i].src, {\n        			src : document.scripts[i].src,\n        			onshow:function(){\n	    				if(this.items.length==0){	\n							if(this.src.length>=3&&this.src.substr(this.src.length-3).toLowerCase()=='swf'){\n								this.items = [ new air.Introspector.tree.textNode(\"SWF file\") ];        \n							}else{\n								this.items = [ new air.Introspector.tree.textDownloadNode(this.src) ];		\n							}\n						}\n        			}\n        		});\n        	}else{\n                node = new air.Introspector.tree.node ('<script>', {\n                	text: document.scripts[i].innerText,\n                	onshow:function(){\n                		if(this.items.length==0)\n                            this.items = [ new air.Introspector.tree.textNode(this.text) ];        \n                    }\n                });	\n        	}\n            this.items.push(node);       \n        }\n    };\n    \n},    \n\ncreateAssetsTree: function(){\n    this.assetsTabDiv.innerHTML = '';\n	if(this.assetsTabDivNode){\n		this.assetsTabDivNode.dispose();\n		this.assetsTabDivNode = null;\n	}\n    var activeHtmlLoader = this.getActiveHtmlLoader();\n    if(activeHtmlLoader!=null){\n        var document = activeHtmlLoader.window.document;\n		if(!document)return;\n        var self = this;\n        var node = new air.Introspector.tree.node(\"Assets\",{\n            onshow: function(){\n                  this.items = [\n                      new air.Introspector.tree.node(\"Links\",{openable:document.links.length!=0,  onshow:  self.createLinksTree(document) } ),\n                      new air.Introspector.tree.node(\"Images\",{openable:document.images.length!=0, onshow: self.createImagesTree(document) } ),\n                      new air.Introspector.tree.node(\"CSS (\"+document.styleSheets.length+')',{openable:document.styleSheets.length!=0, onshow:  self.createCssTree(document) } ),\n                      new air.Introspector.tree.node(\"JS (\"+document.scripts.length+')',{openable:document.scripts.length!=0, onshow:  self.createScriptsTree(document) } ),\n                  ];\n            },\n            onhide: function(){\n            	//this.items.length = 0;\n				this.clearItems();\n            }\n        });\n        node.shouldOpen();\n		this.assetsTabDivNode = node;\n        this.assetsTabDiv.appendChild(node.createDiv(this.htmlLoader.window.document));\n    }\n\n},\n\ncreateSourcesTree: function(){\n    this.sourcesTabDiv.innerHTML = '';\n\n	if(this.sourceTabDivNodes){\n		for(var i=this.sourceTabDivNodes.length-1;i>=0;i--){\n			if(this.sourceTabDivNodes[i]){\n				this.sourceTabDivNodes[i].dispose();\n				this.sourceTabDivNodes[i] = null;\n			}\n		}\n		this.sourceTabDivNodes = null;\n	}\n	\n	this.sourceTabDivNodes = [];\n    var activeHtmlLoader = this.getActiveHtmlLoader();\n    if(activeHtmlLoader!=null){\n        var document = activeHtmlLoader.window.document;\n        var self = this;\n        var node = new air.Introspector.tree.node(\"Actual source\",{\n        	src: activeHtmlLoader.window.location, \n            onshow: function(){\n                this.items = [ new air.Introspector.tree.textDownloadNode(this.src) ]; \n            },\n            onhide: function(){\n                //this.items.length = 0;\n				this.clearItems();\n            }\n        });\n		this.sourceTabDivNodes.push(node);\n        this.sourcesTabDiv.appendChild(node.createDiv(this.htmlLoader.window.document));\n        \n        var node = new air.Introspector.tree.node(\"Parsed source\",{\n        	//text: ,\n            onshow: function(){\n                var parsedSource = [];\n                var node = document.firstChild;\n                while(node) {\n                    var nodeSource = node.outerHTML;\n                    if (typeof nodeSource != 'undefined') {\n                        parsedSource.push(nodeSource);\n                    }\n                    node = node.nextSibling;\n                }\n                this.items = [ new air.Introspector.tree.textNode(parsedSource.join(\"\\n\")) ];\n            },\n            onhide: function(){\n                //this.items.length = 0;\n				this.clearItems();\n            }\n        });\n		this.sourceTabDivNodes.push(node);\n        this.sourcesTabDiv.appendChild(node.createDiv(this.htmlLoader.window.document));\n\n		if(isAppSandbox){\n            var node = this.createProjectTree();\n			this.sourceTabDivNodes.push(node);\n            this.sourcesTabDiv.appendChild(node.createDiv(this.htmlLoader.window.document));\n		}\n    }\n},\n\n\n\n\n\n		//-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n		//=======================================================================================================================================================\n		//DebugWindow.CONSOLE.js\n		//=======================================================================================================================================================\n		\n\n\n\n\n extendTreeNode: function(node, obj){\n        try{\n            var self = this;\n            var items = [];\n            if(typeof obj=='undefined'||obj==null)\n               return;\n            if(air.Introspector.isXMLObject(obj)){\n            	this.extendDom2TreeNode(node, obj);\n            	return;\n            }  \n            var isItemNative = air.Introspector.isItemNative(obj);\n            var parseArray = air.Introspector.isArrayObject(obj)||air.Introspector.isArgumentsObject(obj)||isItemNative;\n            var parseHash =  !parseArray || isItemNative;\n            if (parseArray){\n				var l = obj.length;\n            	for(var i=0;i<l;i++){\n                    var value;\n                    try{\n                        value = obj[i];\n                    }catch(e){\n                        value = e;\n                    }\n                    items.push(this.createJsTreeNode(i, value, this.createGetter(obj, i), this.createSetter(obj, i)));             \n                }\n            } \n            if(parseHash) {\n                for(var i in obj){\n                    var value;\n                    try{\n                        value = obj[i];\n                    }catch(e){\n                        value = e;\n                    }\n                    items.push(this.createJsTreeNode(i, value, this.createGetter(obj, i), this.createSetter(obj, i)));\n                }\n            }\n\n			if(air.Introspector.config.debugRuntimeObjects && !parseArray){\n				try{\n					var typeDescription = runtime.flash.utils.describeType(obj);\n					if(!this.domParser) this.domParser = new DOMParser();\n					var typeXml = this.domParser.parseFromString(typeDescription, \"text/xml\");\n					var child = typeXml.firstChild.firstChild;\n					while(child){\n						if(child.nodeName=='accessor'||child.nodeName=='constant'||child.nodeName=='method'||child.nodeName=='variable'){\n							var name = child.getAttribute('name');\n							if(name!=null && name!='prototype'){\n			                    try{\n									items.push(this.createJsTreeNode(name, obj[name], this.createGetter(obj, name), this.createSetter(obj, name)));		\n			                    }catch(e){\n									items.push(this.createJsTreeNode(name, '', this.createGetter(obj, name), this.createSetter(obj, name), e));\n			                    }\n							}\n						}\n						child = child.nextSibling;\n					}\n				}catch(e){\n					//just hide the error\n				}\n            }\n            items.sort(function(node1, node2){\n            	var isNode1Number = parseInt(node1.nodeLabel)==node1.nodeLabel;\n            	var isNode2Number = parseInt(node2.nodeLabel)==node2.nodeLabel;\n            	if(isNode1Number&&isNode2Number){\n            		return parseInt(node1.nodeLabel)-parseInt(node2.nodeLabel);\n            	}\n            	if(isNode1Number){\n            		return -1;\n            	}\n            	if(isNode2Number){\n            		return 1;\n            	}\n            	if(node1.nodeLabel.toLowerCase()==node2.nodeLabel.toLowerCase())\n                   return 0;\n                if(node1.nodeLabel.toLowerCase()<node2.nodeLabel.toLowerCase())\n                   return -1;\n                return 1;\n            });\n        }catch(e){\n            this.logError(e);\n        }\n		node.items = items;\n    },\n\n    createGetter: function(obj, i){\n        return function(){ \n           try{\n               return obj[i];\n           }catch(e){}\n        }\n    },\n\n    createSetter: function(obj, i){\n        return function(value){ \n           try{\n               obj[i] = value;\n           }catch(e){}\n        }\n    },\n\n\n\n\n	createJsTreeNode : function(stringValue, value, getter, setter, error){\n      var self = this;\n\n      var config = {\n            editable:false,\n              onshow: function(sender){\n					self.extendTreeNode(sender, value);\n              }, \n              onhide: function(){\n					this.clearItems();\n//                    this.items.length = 0;\n              },\n              onclick: function(){\n              	if(typeof getter!='undefined'){\n              	   self.clicked = getter();\n              	}\n              },\n              getEditValue: function(){\n                  if(typeof getter!='undefined')\n                  {\n                      switch(this.valueType){\n                          case 0:\n                             return getter();\n                          case 1:\n                             return getter().replace(/\\n/g, \"\\\\n\");\n                      }\n                  }\n              },\n              setEditValue: function(value)\n              {\n                  if(typeof setter!='undefined'){\n                      switch(this.valueType){\n                          case 0:\n                          var lowerCaseValue = value.toLowerCase();\n                          if(lowerCaseValue=='true')\n                            setter(true);\n                          else if(lowerCaseValue=='false')\n                            setter(false);\n                          else\n                            setter(parseFloat(value));\n                          break;\n                          case 1:\n                           setter(value.replace(/\\\\n/g, \"\\n\"));\n                          break;\n                   }\n                   setTimeout(function(self){\n                      if(typeof getter!='undefined'){\n                              var value = getter();\n                              if(typeof value!='undefined'&&value!=null){\n                                switch(self.valueType){\n                                  case 0:\n                                   self.nodeLabel2 = value;\n                                   break;\n                                  case 1:\n                                   var newValue = value.replace(/\\n/g, \"\\\\n\");\n                                   if(newValue.length == 0) newValue = '[empty string - click to edit]';\n                                       else newValue = '\"'+newValue +'\"';\n                                   self.nodeLabel2 = newValue;\n                                   break;\n                                }\n                                self.refreshLabel();\n                              }\n                         }\n                     },0,this);\n                  }\n              }\n          };\n\n      var openable = false;\n      var value2 = '';\n\n      if(typeof value=='undefined'){\n         openable = false;\n		value2 = '[undefined]';\n      }else if(value==null){\n          openable = false;\n		value2 = '[null]';\n      }else{\n		\n		\n          openable = false;\n          for(var i in value){\n              openable=true;\n              break;\n          }\n		var hasASValues = false;\n		var isItemNative = air.Introspector.isItemNative(value);\n        var parseArray = air.Introspector.isArrayObject(value)||air.Introspector.isArgumentsObject(value)||isItemNative;\n		if(air.Introspector.config.debugRuntimeObjects && !parseArray){\n			try{\n				var typeDescription = runtime.flash.utils.describeType(value);\n				if(!this.domParser) this.domParser = new DOMParser();\n				var typeXml = this.domParser.parseFromString(typeDescription, \"text/xml\");\n				var child = typeXml.firstChild.firstChild;\n				while(child){\n					if(child.nodeName=='accessor'||child.nodeName=='method'||child.nodeName=='constant'||child.nodeName=='variable'){\n						if(child.getAttribute('declaredBy') != 'flash.html::__HTMLScriptFunction'){\n							openable = true;\n							hasASValues = true;	\n						}						\n						break;\n					}\n					child=child.nextSibling;\n				}\n			}catch(e){\n				//hide the error\n			}\n		}\n	if(typeof error!='undefined'){\n		\n	}else  if(air.Introspector.isNumberObject(value)){\n              value2 = value;\n              if(typeof setter!='undefined'){\n                  config.editable = true;\n                  config.valueType = 0;\n              }\n              openable = false;\n          }else if(air.Introspector.isStringObject(value)){\n               value2 = value.replace(/\\n/g, \"\\\\n\");\n               if(value2.length == 0) value2 = '[empty string - click to edit]';\n                   else value2 = '\"'+value2 +'\"';\n\n              if(typeof setter!='undefined'){\n                  config.editable = true;\n                  config.valueType = 1; \n              }\n              openable = false;\n          }else if(air.Introspector.isArgumentsObject(value)){\n              value2 = '[Arguments '+value.length+']';\n              openable = true;\n          }else if(air.Introspector.isArrayObject(value)||(air.Introspector.isItemNative(value)&&typeof value.length!='undefined')){\n              value2 = '[Array '+value.length+']';\n              openable = true;\n          }else if(typeof value=='function' && !hasASValues ){\n				openable = false;\n				value2 = \"[function]\";\n		  }else{\n              try{\n                 value2 = value+'';\n              }catch(e){\n                 value2 = e+'';\n              }\n          }\n      }\n\n      config.nodeLabel2 = value2;\n      config.openable = openable; \n\n      if(air.Introspector.isStringObject(stringValue)&&stringValue.length==0){\n      	stringValue = value2;\n      	config.nodeLabel2 = '';\n      }\n      return new air.Introspector.tree.node(stringValue,config);\n  },\n\n\n	    logArguments: function(args, config){\n	        if(typeof config=='undefined') config = {};\n	        config.buffer='';\n	        if(args.length==1)\n	           this.logObject(args[0], config);\n	        else\n	           this.logObject(args, config);\n	    },\n	\n	\n	 logObject: function(obj, config){\n	        if(typeof config=='undefined') config = {};\n	        if(this.isLoaded){\n	       		if(typeof obj != 'undefined')\n				{\n	        		var node = this.createJsTreeNode('', obj);\n	        		var addElement = true;\n	        		if(node.openable&&config.buffer==''){\n	        			try{\n							if(air.Introspector.isArrayObject(obj)||air.Introspector.isArgumentsObject(obj)){\n								var l = obj.length;\n								var str = '';\n								for(var i=0;i<l;i++){\n									try{\n										if(typeof obj[i]=='undefined')\n	                            			str+= '[undefined], ';			\n										else if(air.Introspector.isArrayObject(obj[i]))\n											str+='[Array '+obj[i].length+'], ';\n										else if(air.Introspector.isArgumentsObject(obj[i]))\n											str+='[Arguments '+obj[i].length+'], ';\n										else\n	                            			str+= obj[i]+', ';									\n									}catch(e){\n										str+='['+e+'], ';\n									}\n								}\n								config.buffer = str;\n							}\n		                }catch(e){\n		                }\n	        		}\n	        		if(typeof config.buffer=='undefined'||config.buffer==''){\n	        			try{\n	        	           config.buffer = obj+'';\n	        	           addElement = node.openable;\n	        			}catch(e){\n	        				config.buffer = e;\n	        			}\n	        		}\n	        		if(addElement)\n	        		  config.element = node.createDiv(this.htmlLoader.window.document);	\n	        	}else if(typeof config.fromConsole=='undefined'||config.fromConsole==false){\n					var node = this.createJsTreeNode('[undefined]');\n					config.element = node.createDiv(this.htmlLoader.window.document);	\n				}\n	            this.logBuffer(config.buffer, config);\n				this.bounceTab(0);\n	        }else{\n	           air.Introspector.extend(config, {obj: obj, isObject:true, doNotLog:true});\n	           this.logLines.push(config);\n	        }\n	    },\n\n	    showLogItem: function(logItem){\n	        if(this.isLoaded){\n	            var listItem = this.consoleDiv.ownerDocument.createElement('li');\n	            var listItemText = this.consoleDiv.ownerDocument.createElement('div');\n				if(logItem.usePre)\n				{\n					var pre = \"<pre>\"+air.Introspector.escapeHtml(logItem.buffer).replace(/\\n/g, '</pre><pre>') + \"</pre>\";\n	            	listItemText.innerHTML = logItem.specialBuffer + pre;\n				}else\n	            	listItemText.innerHTML = logItem.specialBuffer + air.Introspector.escapeHtml(logItem.buffer);\n	            listItemText.className = '	consoleItemText';\n	            listItem.appendChild(listItemText);\n	            this.consoleDiv.appendChild(listItem);\n	            if(typeof logItem.element!='undefined'){\n	                listItem.appendChild(logItem.element);\n	            }\n	            if(typeof logItem.type!='undefined'){\n	                listItem.className += ' '+logItem.type;\n	                var listItemType = this.consoleDiv.ownerDocument.createElement('div');\n	                listItemType.className = 'typeBox';\n	                switch(logItem.type){\n	                    case 'warn':\n	                       listItemType.innerHTML = '!';\n	                      break;\n	                    case 'info':\n	                       listItemType.innerHTML = 'i';\n	                      break;\n	                    case 'error':\n	                       listItemType.innerHTML = 'x';\n	                      break;\n	                }\n	                listItem.appendChild(listItemType);\n	            }\n	            this.scrollConsole();\n				logItem.displayObject = listItem;\n	        }\n	    },\n	    logBuffer: function(buffer, config){\n	        if(typeof config=='undefined') config = {};\n	        if(typeof buffer=='undefined') buffer = '';\n	        var specialBuffer = '';\n			var textSpecialBuffer = '';\n			\n	        if(air.Introspector.config.showTimestamp){\n	           var date = typeof config.timestamp=='undefined'?new Date():config.timestamp;\n				var dateStr = air.Introspector.twoDigits(date.getHours())+':'+air.Introspector.twoDigits(date.getMinutes())+':'+air.Introspector.twoDigits(date.getSeconds());\n	           specialBuffer='<span class=\"consoleTimestamp\">['+dateStr+']</span> '+specialBuffer;\n				textSpecialBuffer=  '['+dateStr+']'+textSpecialBuffer;\n	        }\n	        if(air.Introspector.config.showSender&&config.htmlLoader){\n	            try{\n				  var locationStr = config.htmlLoader.window.location;\n	              specialBuffer='<span class=\"consoleFrom\">['+locationStr+']</span>'+specialBuffer;\n				  textSpecialBuffer=  '['+locationStr+']'+textSpecialBuffer;\n	            }catch(e){\n	              //no htmlLoader provided - use current window\n	              buffer='[Debugger]'+buffer;\n	            }   \n	        }\n	        var logItem = {buffer: buffer, specialBuffer:specialBuffer, textSpecialBuffer:textSpecialBuffer};\n	        delete config.buffer;\n	        air.Introspector.extend(logItem, config);\n	        this.showLogItem(logItem);\n	        if(typeof config.doNotLog=='undefined'){\n	            this.logLines.push(logItem);\n	        }\n	    },\n	    scrollConsole:function(){\n	    	if(!this.scrollDisabled)\n	        {\n	        	var self = this;\n	            setTimeout(function(){ self.consoleDiv.scrollTop = self.consoleDiv.scrollHeight; self.scrollDisabled = false; }, 0);\n	        }\n	    },\n	    refreshConsole: function(){\n	        this.consoleDiv.innerHTML = '';\n	        for(var i=0;i<this.logLines.length;i++){\n	            if(typeof this.logLines[i].isObject!='undefined'){\n	                //air.Introspector.is an Object log\n	                this.logObject(this.logLines[i].obj, this.logLines[i] );\n	            }else{\n	                this.showLogItem(this.logLines[i]);\n	            }\n	        }\n	        this.scrollConsole();\n	    },\n	\n	\n	 aireval : function(src, realWindow, result, error){\n	        var self = this;\n			var myAir = {\n	                Introspector: { \n	                   loadedEval: src, \n	                   mainWindow: realWindow,\n	                   loaded: function(returnValue){\n	                       if(typeof result=='function'){\n	                           result.call(self, returnValue);\n	                       }\n	                   },\n	                   error : function(returnValue){\n	                       if(typeof error=='function'){\n	                           error.call(self, returnValue);\n	                       }\n	                   },  \n	                }\n	           };\n\n			if(isAppSandbox){\n	               var htmlLoader = new  air.Introspector.runtime.HTMLLoader();\n	               htmlLoader.addEventListener(air.Introspector.runtime.Event.HTML_DOM_INITIALIZE, function(){\n	               	   htmlLoader.window.clicked = self.clicked;\n/*					   htmlLoader.window.toXML = function(xml){\n							var domParser = new DOMParser();\n							return domParser.parseFromString(xml, \"text/xml\");\n					   };*/\n	                   htmlLoader.window.air = myAir;\n	               });\n                   \n	               if ( typeof htmlLoader.placeLoadStringContentInApplicationSandbox != 'undefined' ) {\n		              //since AIR1.5 the htmlLoader will not allow string load in app sandbox\n		              //don't need to switch this back to false, because the htmlLoader will die after this call\n		              htmlLoader.placeLoadStringContentInApplicationSandbox = true;\n	               }\n                   \n	               htmlLoader.loadString(\"<script>var result; var evalSource = air.Introspector.loadedEval; try { result = eval('with(air.Introspector.mainWindow){'+ evalSource +'}'); air.Introspector.loaded(result); }catch(e){air.Introspector.error(e)}</\"+\"script>\");\n			}else{\n				//we just don't need all that stuff - real eval is there (we actually run this peace of code in the same sandbox)\n				var resultvalue; \n				var evalSource = myAir.Introspector.loadedEval; \n				try {\n					with(realWindow){ \n						resultvalue=realWindow.eval(evalSource); \n					};\n					myAir.Introspector.loaded(resultvalue); \n				}catch(e){  \n					myAir.Introspector.error(e); \n				}\n			}\n	    },\n	\n	    historyUserInput: function(step){\n	        if(typeof step!='undefined'){\n	            if(this.evalHistoryPos==this.evalHistory.length){\n	                this.evalHistorySaved = this.evalConsoleText.value;\n	            }\n	            var newEvalHistoryPos = this.evalHistoryPos + step;\n	            if(newEvalHistoryPos>=0){\n	                if(newEvalHistoryPos<this.evalHistory.length){\n	                  this.evalConsoleText.value = this.evalHistory[newEvalHistoryPos];\n	                }else if(newEvalHistoryPos==this.evalHistory.length){\n	                  this.evalConsoleText.value = this.evalHistorySaved;\n	                }else{\n	                    return;\n	                }\n	                this.evalHistoryPos = newEvalHistoryPos;\n	                this.evalConsoleText.selectionStart = this.evalConsoleText.value.length;\n	            }\n	        }else if(this.evalHistoryPos<this.evalHistory.length&&this.evalConsoleText.value!=this.evalHistory[this.evalHistoryPos]){\n	            this.evalHistoryPos=this.evalHistory.length;\n	            this.evalHistorySaved = this.evalConsoleText.value;\n	        }\n	    },\n\n	    evalUserInput: function(){\n	        var htmlLoader = this.getActiveHtmlLoader();\n	        if(htmlLoader==null){\n	            this.logBuffer(null, 'No active window.');\n	            return;\n	        }\n	        try{\n	            var userEval = this.evalConsoleText.value;\n\n	            if(air.Introspector.trim(userEval).length==0)\n	                return;\n\n				this.scrollDisabled = false;\n\n	            this.evalHistory.push(userEval);\n	            this.evalHistoryPos = this.evalHistory.length; \n	\n	 			this.saveConfig(true);\n\n	            this.aireval(userEval, htmlLoader.window, function(result){\n	                //if(typeof result!='undefined'){\n		                    this.logObject(result, {htmlLoader:htmlLoader, buffer: '>>>'+userEval, fromConsole:true });\n	                //}\n	            }, function(error){\n	                this.logError(error, {htmlLoader:htmlLoader, buffer: '>>>'+userEval });\n	            });\n\n	            this.evalConsoleText.value = '';\n	        }catch(e){\n	            this.logError(e, {htmlLoader:htmlLoader, buffer: '>>>eval console' });\n	        }\n	    },\n\n	    logError: function(error, config){\n	        if(typeof config=='undefined')\n	           config = {};\n	        config.type = 'error';\n	        this.logObject(error, config);\n	    },\n\n		gotoConsoleTab: function(){\n	    	this.setTab(0);\n	    },\n\n\n		clearConsole: function(){\n			this.logLines = [];\n			this.refreshConsole();\n		},\n		\n		\n				\n	\n	saveConsole: function(){\n		var str = '';\n	    for(var i=0;i<this.logLines.length;i++){\n			var logItem = this.logLines[i];\n			if(typeof logItem.type!='undefined'){\n	                switch(logItem.type){\n	                    case 'warn':\n	                       str += '[warn ]';\n	                      break;\n	                    case 'info':\n	                       str += '[info ]';\n	                      break;\n	                    case 'error':\n	                       str += '[error]';\n	                      break;\n	                }\n	            }\n		   str+=logItem.textSpecialBuffer+': ';\n           str+=logItem.buffer+'\\r\\n';\n        }	\n		return str;\n	},\n\n	saveConsoleToFile: function(){\n		try{\n			air.Introspector.writeConsoleToFile(this.saveConsole());\n		}catch(e){this.logError(e);}\n	},\n	saveConsoleToClipboard: function(){\n		try{\n			air.Introspector.writeConsoleToClipboard(this.saveConsole());\n		}catch(e){this.logError(e);}		\n	},\n\n		//-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n		//=======================================================================================================================================================\n		//DebugWindow.HTML.js\n		//=======================================================================================================================================================\n		makeHtmlDiv: function(){\n		if(!this.isLoaded) return;\n       try{\n         var htmlLoader = this.getActiveHtmlLoader();\n         if(htmlLoader!=null){\n	          /*this.htmlDiv.innerHTML = '';\n	          var domTreeDiv = this.createDomTreeNode(htmlLoader.window.document).createDiv(this.htmlLoader.window.document);\n	          this.htmlDiv.appendChild(domTreeDiv);*/\n	          this.html2Div.innerHTML = '';\n				if(this.html2Node){\n					this.html2Node.dispose();\n					this.html2Node = null;\n				}\n\n	          if(htmlLoader.window.document&&htmlLoader.window.document.firstChild){\n				    var node = this.createDom2TreeNode(htmlLoader.window.document);\n	                var domTreeDiv = node.createDiv(this.htmlLoader.window.document);\n					this.html2Node = node;\n	          		this.html2Div.appendChild(domTreeDiv);					\n	          }\n\n         }\n       }catch(e){\n       	air.Introspector.Console.log(e);\n       }\n   },\n\n\n		//-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n		//=======================================================================================================================================================\n		//DebugWindow.XHR.js\n		//=======================================================================================================================================================\n		\n    \n    logNet: function(xhr, method, url, asyncFlag){\n    	var requestLog = this.requestLog;\n    	for(var i=requestLog.length-1;i>=0;i--){\n            if(requestLog[i].xhr == xhr){\n                this.refreshRequestObject(requestLog[i]);\n                return;	\n            } 		\n    	}\n    	var request = {\n    		xhr: xhr, \n    		method: method, \n    		url: url,\n			async: asyncFlag,\n    		element: null\n    	};\n    	if(this.isLoaded){\n    	   this.viewRequestObject(request);\n    	}\n    	requestLog.push(request);\n		this.bounceTab(5);\n    },\n\n	logNetSend: function(xhr, obj){\n    	var requestLog = this.requestLog;\n    	for(var i=requestLog.length-1;i>=0;i--){\n            if(requestLog[i].xhr == xhr){\n				requestLog[i].obj = obj;\n                this.refreshRequestObject(requestLog[i]);\n				return;	\n            } 		\n    	}\n    	var request = {\n    		xhr: xhr, \n			obj: obj,\n    		method: 'unknown',\n    		url: '', \n    		element: null\n    	};\n    	if(this.isLoaded){\n    	   this.viewRequestObject(request);\n    	}\n    	requestLog.push(request);\n		this.bounceTab(5);\n	},\n    \n    refreshRequestObject: function(request){\n    	var self =this;\n    	var src = '';\n		if(!request.node)\n			return;\n    		request.node.items = [];\n    	request.node.items.push( new air.Introspector.tree.node('readyState' , { openable: false, nodeLabel2:request.xhr.readyState } ));\n    	try{\n    		request.node.items.push( new air.Introspector.tree.node('status' , { openable: false, nodeLabel2:request.xhr.status } ));\n    	}catch(e){\n    	}\n\n    	try{\n			if(typeof request.async=='undefined')\n				request.async = true;\n    		request.node.items.push( new air.Introspector.tree.node('async' , { openable: false, nodeLabel2:request.async } ));\n    	}catch(e){\n    	}\n\n    	try{\n            request.node.items.push( new air.Introspector.tree.node('statusText' , { openable: false, nodeLabel2:request.xhr.statusText } ));\n    	}catch(e){}\n\n			try{\n				if(typeof request.obj!='undefined'&&request.obj!=null){\n					if(this.isXMLObject(request.obj)){\n			            request.node.items.push( new air.Introspector.tree.node('sent' , { openable: true, \n			                src: request.obj.firstChild,\n			                onshow: function(){\n			                    if(this.items.length==0){\n			                        this.items = [self.createDom2TreeNode(this.src)];\n			                    }\n			            } } ));\n					}else{\n			    		request.node.items.push( new air.Introspector.tree.node('sent' , { openable: true, \n			    			src: request.obj+'',\n			    			onshow: function(){\n				    			if(this.items.length==0){\n				    				this.items = [new air.Introspector.tree.textNode(this.src)];\n				    			}\n			    		} } ));\n					}\n				}\n			}catch(e){\n			}\n\n    	try{\n    		request.node.items.push( new air.Introspector.tree.node('responseText' , { openable: true, \n    			src: request.xhr.responseText,\n    			onshow: function(){\n	    			if(this.items.length==0){\n	    				this.items = [new air.Introspector.tree.textNode(this.src)];\n	    			}\n    		} } ));\n    	}catch(e){\n    	}\n    	\n	\n    	\n    	try{\n			request.node.items.push( new air.Introspector.tree.node('responseXml' , { openable: true, \n                src: request.xhr.responseXML,\n                onshow: function(){\n                    if(this.items.length==0){\n						self.extendDom2TreeNode(this, this.src, true);\n//                        this.items = [self.createDom2TreeNode(this.src)];\n                    }\n	            },\n				onhide: function(){\n					//this.items.length = 0;\n					this.clearItems();\n				}\n 			} ));\n        }catch(e){\n        }\n    	\n		try{\n			var headers = request.xhr.getAllResponseHeaders();\n			request.node.items.push( new air.Introspector.tree.node('responseHeaders' , { openable: true, \n    			src: headers,\n    			onshow: function(){\n	    			if(this.items.length==0){\n	    				this.items = [new air.Introspector.tree.textNode(headers)];\n	    			}\n    		} } ));\n		}catch(e){\n	\n		}\n		\n	\n			\n    	if(request.node.opened){\n    		request.node.refreshChildren();\n    	}\n    	request.element.scrollIntoViewIfNeeded();\n    },\n    \n    viewRequestObject: function(request){\n    	try{\n    		var self = this;\n	    	var requestElement = this.htmlLoader.window.document.createElement(\"div\");\n	    	requestElement.className = \"requestElement\";\n	    	var node = new air.Introspector.tree.node (request.method.toUpperCase()+' '+request.url, {\n	    		onshow: function(){\n	               if(this.items.length==0){\n	               	  self.refreshRequestObject(request);\n	               }    		     \n	    	    }, \n	    		onhide: function(){\n	    			//this.items.length = 0;\n					this.clearItems();\n	    		}\n	    	});\n	//    	node.shouldOpen();\n	    	request.node = node;\n	    	request.element = requestElement;\n            this.netTabDiv.appendChild(requestElement);	    	\n	    	requestElement.appendChild(node.createDiv(this.htmlLoader.window.document));\n\n    	}catch(e){\n    		this.logError(e);\n    	}\n    },\n    \n    refreshNetConsole: function(){\n    	var requestLog = this.requestLog;\n        for(var i=0;i<requestLog.length;i++){\n            this.viewRequestObject(requestLog[i]);\n        }\n        \n    },\n		//-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n		//=======================================================================================================================================================\n		//DebugWindow.XHR.js\n		//=======================================================================================================================================================			\n		makeDomDiv: function(){\n    this.domDiv.innerHTML = '';\n	if(this.domDivNode){\n		this.domDivNode.dispose();\n		this.domDivNode = null;\n	}\n    try{\n        var htmlLoader = this.getActiveHtmlLoader();\n		\n		var node = this.createJsTreeNode('window', htmlLoader.window);\n        var treeDiv = node.createDiv(this.htmlLoader.window.document);\n		this.domDivNode = node;\n        this.domDiv.appendChild(treeDiv);\n    }catch(e){\n    }\n},\n\ndom3Event: function(ev){\n	try{\n		var node = ev.srcElement || ev.target;\n		if(!node) return;\n		if(node.nodeType!=Node.DOCUMENT_NODE&&node.nodeType!=Node.ELEMENT_NODE){\n			node = node.parentNode;\n			if(!node) return;\n		}\n	\n		var i = this.findDomListElement(node);\n		if(i!=-1&&this.domList[i].node2)\n		{\n			var node2 = this.domList[i].node2;\n			if(this.domList[i].node2.opened){\n				node2.clearItems();\n				node2.onshow(node2);\n			}\n			node2.refresh();\n			ev.stopPropagation();\n			\n			this.openVisibleDomTags();\n		}\n\n	}catch(e){\n	}	\n},\n\nfindDomListElement: function(element){\n    var list = this.domList;\n    for(var i=list.length-1;i>=0;i--){\n        if(list[i].element==element)\n          return i;\n    }\n    return -1;\n},\n\nremoveDomListElement: function(element){\n    var index =  this.findDomListElement(element);\n    if(index==-1)\n       return;\n    this.domList.splice(index, 1);\n    \n    var child = element.firstChild;\n    while(child)\n    {\n       this.removeDomListElement(child);\n       child = child.nextSibling;\n    }    \n},\n\n\n extendDom2TreeNode: function(node, obj, readOnly){\n	if(typeof readOnly=='undefined'){readOnly = false;}\n    try{\n        var self = this;\n        node.items.length = 0;\n        if(typeof obj=='undefined'||obj==null)\n           return;\n         var child = obj.firstChild;\n         while(child)\n         {\n//             	if(child.nodeType==Node.ELEMENT_NODE||child.nodeType==Node.TEXT_NODE){\n         		if(child.nodeType==Node.TEXT_NODE){\n         			var value = air.Introspector.trim(child.nodeValue);\n         			if(value.length==0)\n         			{   \n         				child = child.nextSibling;\n         			    continue;\n         			}\n         		}\n                node.items.push(this.createDom2TreeNode(child, readOnly)); \n//             	}else{\n//					air.Introspector.Console.log(child);\n//				}\n            child = child.nextSibling;\n         }\n    }catch(e){\n        this.logError(e);\n    }\n},\n\ncreateDom2TreeNode : function(child, readOnly){\n    var self = this;\n    \n    var config = {\n		  readOnly: readOnly,\n          editable:false,\n          openable:false,\n            onshow: function(sender){\n                var domListIndex = self.findDomListElement(child);\n                if(domListIndex!=-1){\n                     self.domList[domListIndex].opened = true;\n                }\n                self.extendDom2TreeNode(sender, child, readOnly);\n            }, \n            onhide: function(sender){\n                self.removeDomListElement(child); //also remove children\n                //this.items.length = 0;\n				this.clearItems();\n            }\n        };\n    var node = new air.Introspector.tree.domNode(child, config);\n   \n    var domListIndex = this.findDomListElement(child);\n    if(domListIndex!=-1){\n        this.domList[domListIndex].node2 = node;\n        if(this.domList[domListIndex].opened)\n            node.shouldOpen();\n        if(this.domList[domListIndex].selected)\n            node.shouldSelect();\n    }else{\n        this.domList.push({\n            element:child, \n            node2: node,\n            node: null,\n            opened: false,\n            selected: false\n        });\n    }\n    \n    return node;\n},\n    \ncreateDomElementPath: function(element, first){\n	var ret = false;\n    if(typeof first=='undefined') first = false;\n    var domListIndex = this.findDomListElement(element);\n    if(domListIndex==-1){\n        this.domList.push({\n            element:element, \n//                node: null, \n            node2 :null,\n            opened: true, \n            selected: first\n        });\n		ret=true;\n    }else if(!first){\n		if(this.domList[domListIndex].node2){\n			if(!this.domList[domListIndex].node2.opened && this.domList[domListIndex].node2.showElements)\n				this.domList[domListIndex].node2.showElements();\n		}else{\n			ret = true;\n		}\n        this.domList[domListIndex].opened = true;\n    }else{\n        this.domList[domListIndex].selected = true;\n		if(this.domList[domListIndex].node2&&this.domList[domListIndex].node2.select){\n			this.domList[domListIndex].node2.select(false);\n		}else{\n			ret = true;\n		}\n    }\n    \n    var parentNode = element.parentNode;\n    if(parentNode){\n        ret|=this.createDomElementPath(parentNode);\n    }\n	return ret;\n},\n\nshowDomElementPath: function(element){\n    var list = this.domList;\n    for(var i=list.length-1;i>=0;i--){\n        list[i].selected = false;\n		if(list[i].node2&&list[i].node2.unselect){\n			list[i].node2.unselect();\n		}\n    }\n    var shouldRecreate = this.createDomElementPath(element, true);\n    \n    var htmlLoader = this.getActiveHtmlLoader();\n    if(htmlLoader!=null&&htmlLoader.window.document==element.ownerDocument){\n		if(shouldRecreate){\n        	this.makeHtmlDiv(); 	\n		}\n    }else{\n    	this.setActiveWindowByDocument(element.ownerDocument);\n    }\n    \n   \n	this.scrollSelectedDomItemIntoView();\n},\n\n\nputInList: function(element){\n	var domListIndex = this.findDomListElement(element);\n    if(domListIndex!=-1){\n		this.domList[domListIndex].opened = true;\n	}\n},\n\n	setHoverDomElement: function(node){\n		this.hoverDomElement = node;\n	},\n	\n	clearHoverDomElement: function(){\n		this.hoverDomElement = null;\n		this.hoverDomElementAttribute = null;\n	},\n\n	setHoverDomElementAttribute: function(att){\n		this.hoverDomElementAttribute = att;\n	},\n	\n	expandHoverDomElement: function(){\n		if(this.menuHoverDomElement)\n			this.menuHoverDomElement.expandAll();\n	},\n	\n	collapseHoverDomElement: function(){\n		if(this.menuHoverDomElement)\n			this.menuHoverDomElement.collapse();\n	},\n	\n	addHoverDomElementAttribute: function(){\n		try{\n		if(this.menuHoverDomElement){\n			var attributeName = prompt('Attribute name');\n			if(attributeName&&attributeName.length){\n				if(!this.menuHoverDomElement.domNode.getAttribute(attributeName))\n					this.menuHoverDomElement.domNode.setAttribute(attributeName, '');\n				this.menuHoverDomElement.refreshAttributes();\n				this.menuHoverDomElement.toggleAttribute(attributeName);\n			}\n		}}catch(e){\n			alert(\"Invalid attribute name!\");\n		}\n	},\n	\n	removeHoverDomElementAttribute: function(){\n		if(this.menuHoverDomElement&&this.menuHoverDomElementAttribute){\n				this.menuHoverDomElement.domNode.removeAttribute(this.menuHoverDomElementAttribute.nodeName);\n				this.hoverDomElementAttribute = null;\n				this.menuHoverDomElement.refreshAttributes();\n		}\n	},\n\n	openVisibleDomTags: function(){\n//		this.scrollSelectedDomItemIntoView();\n//		return;\n		var list = this.domList;\n		var clone = [];\n		 for(var i=list.length-1;i>=0;i--)\n			clone.push(list[i].element);\n		 for(var i=clone.length-1;i>=0;i--){\n			var element = clone[i];\n			var parentNode = element.parentNode;\n			if(parentNode){\n	            this.putInList(parentNode);\n			}\n		}\n	},\n\n    scrollSelectedDomItemIntoView: function(){\n		 var list = this.domList;\n		 for(var i=list.length-1;i>=0;i--){\n	            if(list[i].selected){\n	            	if(list[i].node2){\n						if(list[i].node2.nodeLabelDiv)\n							list[i].node2.nodeLabelDiv.scrollIntoViewIfNeeded();\n						else if(list[i].node2.element)\n	            			list[i].node2.element.scrollIntoViewIfNeeded();\n	            		//air.Introspector.Console.log(list[i].node2);\n	            		//air.Introspector.Console.log(this.html2Div);\n						break;\n	            	}\n	            }\n	        }\n	},\n	\n	\n	setInspect: function(value){\n        this.isInspecting = value;\n        if(this.inspectToolLabel){\n            if(value){\n                if((this.inspectToolLabel.className+'').indexOf('selected')==-1){\n                  this.inspectToolLabel.className += ' selected';\n                }\n            }else{\n                this.inspectToolLabel.className = this.inspectToolLabel.className.replace(' selected', '');\n            }\n        }\n		if(value){\n			this.switchToHtmlTab();\n		}\n	\n		\n		if(isAppSandbox){\n	        var ownedWindows = air.Introspector.getHtmlWindows();\n	        for(var i=ownedWindows.length-1;i>=0;i--){\n	            try{\n	              ownedWindows[i].htmlLoader.window.air.Introspector.inspect=value;\n	              ownedWindows[i].htmlLoader.window.air.Introspector.canClick=false;\n	            }catch(e){\n	            }\n	        }\n		}else{\n			try{\n				this.activeWindow.air.Introspector.inspect = value;\n				this.activeWindow.air.Introspector.canClick=false;\n			}catch(e){}\n		}\n    },\n    toggleInspect: function(){\n        this.isInspecting ^= true;\n        if(this.isInspecting){\n           this.startInspect();\n        }else{\n           this.finishInspect();\n        }\n    },\n    startInspect: function()\n    {\n        this.setInspect(true);\n        this.inspectElement = null;\n    },\n    \n    finishInspect: function(canceled){\n        this.setInspect(false);\n        if(typeof canceled=='undefined')\n           canceled = true;\n        if(!canceled&&typeof this.inspectElement!='undefined'&&this.inspectElement){\n           this.showCssElement(this.inspectElement);	\n           this.showDomElementPath(this.inspectElement);\n        }else{\n			if(this.selectedElement){\n				this.showDomElementPath(this.selectedElement);\n           		this.showCssElement(this.selectedElement);					\n			}\n		}\n        delete inspectElement;\n    }, \n    \n	showCssElement: function(element){\n		if(!element || !element.ownerDocument || !element.ownerDocument.defaultView) return;\n		if(this.selectedElement==element){ return };\n		this.selectedElement = element;\n		var self = this;\n		if(this.showCssElementTimer){\n			clearTimeout(this.showCssElementTimer);\n			this.showCssElementTimer = null;\n		}\n		this.clearCssElement();\n		this.showCssElementTimer = setTimeout(function(){\n			self.showCssElementTimer = null;\n			self.showCssElementTimeout(element);\n		}, 300);\n	},\n	clearCssElement:function(){\n		if(!this.isLoaded) return;\n		this.css2DomTab.innerHTML = '';\n		this.css2StyleTab.innerHTML = '';\n		\n		if(this.cssElementJsNode){\n			this.cssElementJsNode.dispose();\n			this.cssElementJsNode = null;\n		}\n	},\n	showCssElementTimeout: function(element){\n		if(!this.isLoaded) return;		\n		var value = '';\n/*		try{\n			value = 'DOM (' + element+')';\n		}catch(e){}*/\n		var jsNode = this.createJsTreeNode(value, element);\n		jsNode.shouldOpen();\n        this.css2DomTab.appendChild(jsNode.createDiv(this.htmlLoader.window.document));\n		this.cssElementJsNode = jsNode;\n\n		if(this.cssElementCssNode){\n			this.cssElementCssNode.dispose();\n			this.cssElementCssNode = null;\n		}\n\n		var cssNode = this.createCssTreeNode('CSS', element);\n		cssNode.shouldOpen();\n        this.css2StyleTab.appendChild(cssNode.createDiv(this.htmlLoader.window.document));\n		this.cssElementCssNode =  cssNode;	\n	},\n	\n	createCssTreeNode: function (stringValue, element){\n		var self = this;\n		var config = {\n            editable:false,\n              onshow: function(sender){\n                  self.extendCssTreeNode(sender, element);\n              }, \n              onhide: function(sender){\n                  //this.items.length = 0;\n					this.clearItems();\n              }\n          };\n		 return new air.Introspector.tree.node(stringValue,config);\n	},\n\n\n	extendCssTreeNode: function(node, element){\n		try{\n			var self = this;\n			if(!element.ownerDocument || !element.ownerDocument.defaultView) return;\n			var obj = element.ownerDocument.defaultView.getComputedStyle(element);\n			\n			if(obj){\n				var cssGroupNames = this.cssGroupNames;\n				var cssGroups = this.cssGroups;				\n				\n				var groupsCount=cssGroupNames.length;\n\n				for(var z=0;z<groupsCount;z++){\n					var groupNode = new air.Introspector.tree.node(cssGroupNames[z], \n							{\n								group: cssGroups[z],\n								onshow: function(){\n									if(this.items.length==0){\n										var l = this.group.length;\n										for(var i=0;i<l;i++){\n											var name = this.group[i], value;\n							                try{\n							                    value = obj[name];\n							                }catch(e){\n							                    value = e;\n							                }\n							                this.items.push(self.createJsTreeNode(name, value));\n							            }\n									}\n								}\n							});\n					groupNode.shouldOpen();\n					node.items.push(groupNode);\n				}\n			}\n		}catch(e){\n			this.logError(e);\n		}\n	},\n\n	switchToHtmlTab: function () {\n		this.setTab(1);\n	},\n\n    setInspectElement: function(element){\n        this.inspectElement = element;\n        this.showDomElementPath(this.inspectElement);\n    },\n    highlight: function(domNode){\n    	var htmlLoader = this.getActiveHtmlLoader();\n        if(htmlLoader!=null){\n        	try{\n        		if(typeof domNode!='undefined'){\n        	       htmlLoader.window.air.Introspector.highlightElement(domNode);\n				\n        		}\n        	    else\n        	       htmlLoader.window.air.Introspector.hideHighlight();\n        	}catch(e){\n        		//no air debug highlighter..\n        	}\n        }\n    	\n    },\n\n	  setCssTab: function(tab){\n			this.activeCssTab = tab;\n	        if(this.isLoaded){\n				this.activateCssTab();\n			}\n\n	    },\n		activateCssTab: function(){\n	//		if(!this.isLoaded) return;\n			try{\n		        this.clearCssTabs();\n				var tabName = this.cssTabs[this.activeCssTab];\n\n				this.htmlLoader.window.document.getElementById(tabName+'Label').className = 'selected';\n		        this.htmlLoader.window.document.getElementById(tabName+'Tab').className = 'selected';\n			}catch(e){}\n		},\n\n	 	clearCssTabs: function(){\n	        var child = this.cssTabLabels.firstChild;\n	        while(child!=null){\n	            if(child.nodeType==1)  child.className = child.className.replace(/selected/, '');\n	            child=child.nextSibling;\n	        }\n	        var child = this.cssTabPages.firstChild;\n	        while(child!=null){\n	            if(child.nodeType==1) child.className = child.className.replace(/selected/, '');\n	            child=child.nextSibling;\n	        }\n	    },\n		//-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n		//convert DebugUI.html\n\n		};\n				\n	\n	//=======================================================================================================================================================\n	//SearchBox.js\n	//=======================================================================================================================================================			\n	(function(){\n	\n	function SearchBox(){ \n		var that = this;\n		var m_node = null;\n		var m_visible = false;\n		var m_created = false;\n		var m_search_value = null;\n		var m_last_highlight = null;\n		//dom elements\n		var m_text_box = null;\n		var m_search_box = null;\n		\n		function show(){\n			if(!m_visible){\n				if(!m_created) createElements();\n				m_search_box.style.display = 'block';\n				m_visible = true;\n			}\n			setTimeout(function()\n			{\n				m_text_box.select();								\n			}, 0);\n\n		};\n		\n		function hide(){\n			if(m_visible&&m_created){\n				m_search_box.style.display = 'none';				\n				hideLastHighlight();\n				m_visible = false;	\n			}\n		};\n		\n		function getSearchValue(){\n			return m_text_box.value.toUpperCase();\n		}\n		\n		function hideLastHighlight(){\n			if(m_last_highlight&&m_last_highlight.parentNode){          \n				m_last_highlight.parentNode.className = (m_last_highlight.parentNode.className+'').replace(/searchselect/g, '');\n				m_last_highlight=null;\n			}\n		}\n		\n		function searchNext(){\n			var searchedNode = m_node || document.body;\n			m_node.className += ' selectable';\n			hideLastHighlight();\n			var first = null;\n			while(window.find(getSearchValue(), false, false, true,\n			            false, true, false)){\n				try{ \n					var selection = window.getSelection();\n					if(first==null){\n						first = selection.extentNode;\n					}else if(selection.extentNode===first){\n						//don't enter an infinite loop\n						break;\n					}\n					if(!selection.isCollapsed){\n						var range = selection.getRangeAt(0);\n						var  node = range.commonAncestorContainer;\n				   		if(node&&node.parentNode){\n							node.parentNode.className += ' searchselect'; \n							m_last_highlight = node;\n						}\n						break;\n					}\n		    	}catch(e){\n				}\n			}\n			m_node.className = m_node.className.replace(/selectable/g, '');\n		}\n		\n		function checkParent(node){\n			while(node){\n				if(node==m_node) return true;\n				node = node.parentNode;\n			}\n			return false;\n		}\n		\n	    \n		function createElements(){\n			m_search_box = document.createElement(\"div\");\n			m_text_box = document.createElement(\"input\");\n			m_search_box.appendChild(m_text_box);			\n			m_text_box.addEventListener('keydown', function (evt){\n				if(m_visible&&evt.keyCode==13){\n					searchNext();\n				}\n			});\n			m_search_box.setAttribute('style', 'position:absolute;right:50px;bottom:50px;display:none;padding:10px;border:1px solid #cccccc;-webkit-border-radius:5px;background:#cccccc');\n			document.body.appendChild(m_search_box);\n			m_created = true;\n		}\n		\n		function registerKeyboardEvents(){\n			document.addEventListener('keydown', function(evt){\n					if((evt.ctrlKey||evt.metaKey)==true&&evt.altKey==false&&evt.keyCode==70){\n						//ctrl/cmd - F\n						show();\n						evt.preventDefault();\n					}else if( evt.keyCode==27&&(evt.ctrlKey||evt.metaKey||evt.altKey)==false){\n						//escape key was pressed\n						hide();\n						evt.preventDefault();					\n					}if( ((evt.ctrlKey||evt.metaKey)==true&&evt.altKey==false&&evt.keyCode==71)\n						|| (evt.keyCode==114&&(evt.ctrlKey||evt.metaKey||evt.altKey)==false)){\n							//ctrl/cmd - G or F3\n						searchNext();\n						evt.preventDefault();\n					}\n				});\n		}\n		\n		function init(){\n			registerKeyboardEvents();\n		}\n		\n		this.attachToNode = function SearchBox_attachToNode(node){\n			if(node) \n				m_node = node;\n			else\n				m_node = document;\n		}\n		\n		init();\n	};\n	\n	window.SearchBox = new SearchBox;\n	\n}());\n	//-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n				\n		air.Introspector.version = \"1.5\";\n	\n\n})();\n// ]]>\n</script>\n\n</head>\n\n<body onload='doLoad()' onunload=\"doUnload()\" oncontextmenu='return debugWindow.showMenu(event);'>\n	<ul id=\"toolsLabels\">\n		ADOBE<span>&copy;</span> AIR&trade; Introspector\n	</ul>\n    <ul id=\"toolToggle\">\n<li onclick=\"debugWindow.setTool('inspect')\" id='inspectToolLabel'>Inspect</li></ul>\n	<ul id=\"tabLabels\">\n   	  <li onclick=\"debugWindow.setTab(0)\" id='consoleLabel'>Console</li>    	\n        <li onclick=\"debugWindow.setTab(1)\" id='html2Label'>HTML</li>\n		<li onclick=\"debugWindow.setTab(2)\" id='domLabel'>DOM</li>\n        <li onclick=\"debugWindow.setTab(3)\" id='assetsLabel'>Assets</li>\n        <li onclick=\"debugWindow.setTab(4)\" id='sourceLabel'>Source</li>\n		<li onclick=\"debugWindow.setTab(5)\" id='netLabel'>XHR</li>\n	</ul>\n    <div id=\"tabPages\">\n<div id=\"consoleTab\">\n        	<ul id=\"console\"></ul>\n            <div id=\"evalConsole\"><span id=\"evalConsoleLabel\">&gt;&gt;&gt;</span><input type=\"text\" id=\"evalConsoleText\" value=\"\" onkeyup=\"if(event.keyCode==13){ debugWindow.evalUserInput();return true;} else if(event.keyCode==38){ debugWindow.historyUserInput(-1); return true;} else if(event.keyCode==40){ debugWindow.historyUserInput(1); return true;} else debugWindow.historyUserInput();\" /></div>\n        </div>\n\n		<div id=\"html2Tab\">\n          <div id=\"html2Div\">\n		  </div>\n		  <div id=\"html2Split\">\n		  </div>\n		  <div id=\"css2Div\">\n			<ul id=\"css2TabLabels\">\n		    	<li onclick=\"debugWindow.setCssTab(0)\" id='css2DomLabel'>DOM</li>    	\n		        <li onclick=\"debugWindow.setCssTab(1)\" id='css2StyleLabel'>Computed style</li>\n		    </ul>\n			<div id=\"css2TabPages\">\n				<div id='css2DomTab'></div>    	\n		        <div id='css2StyleTab'></div>\n			</div>\n	      </div>\n			\n        </div>    \n    	<div id=\"domTab\">\n        	\n        </div>\n    	<div id=\"assetsTab\">\n        	\n        </div> \n        <div id=\"sourceTab\">\n        	\n        </div>\n		<div id=\"netTab\">\n            \n        </div>    \n</div>\n    \n<div id=\"windowSelector\">\n<input id='refreshActiveWindow' type=\"button\" value=\"Refresh active window:\" onclick=\"debugWindow.refreshWindows()\" />\n	 <select id=\"windowList\" onchange=\"debugWindow.setActiveWindowById(parseFloat(this.options[this.options.selectedIndex].value))\"></select>\n       \n</div>\n\n\n\n<div id=\"menuDiv\">\n	<div id=\"consoleMenuDiv\" class=\"menu\">\n		<ul>\n			<li><a href=\"javascript:void(0)\" onclick='debugWindow.clearConsole();debugWindow.hideMenu();'>Clear console</a></li>\n			<li><a href=\"javascript:void(0)\" onclick='debugWindow.saveConsoleToFile();debugWindow.hideMenu();'>Save console to file...</a></li>\n			<li><a href=\"javascript:void(0)\" onclick='debugWindow.saveConsoleToClipboard();debugWindow.hideMenu();'>Save console to clipboard</a></li>		\n		</ul>\n	</div>\n	<div id=\"domMenuDiv\" class=\"menu\">\n		<ul>\n				<li><a href=\"javascript:void(0)\" onclick='debugWindow.expandHoverDomElement();debugWindow.hideMenu();'>Expand all</a></li>\n				<li><a href=\"javascript:void(0)\" onclick='debugWindow.collapseHoverDomElement();debugWindow.hideMenu();'>Collapse</a></li>\n				<li><a href=\"javascript:void(0)\" onclick='debugWindow.addHoverDomElementAttribute();debugWindow.hideMenu();'>Add attribute</a></li>\n				<li id=\"domRemoveAttributeMenuDiv\"><a href=\"javascript:void(0)\" onclick='debugWindow.removeHoverDomElementAttribute();debugWindow.hideMenu();'>Remove attribute</a></li>				\n		</ul>\n	</div>\n</div>\n\n\n<div id=\"searchTextBox\">\n	Search filter: <input type=\"text\" id='txtSearch' value='' onkeydown='debugWindow.searchKeyDown(event)' onkeyup='debugWindow.doFilter(this.value);' />\n	\n</div>\n  \n</body>\n</html>\n",air.Introspector.register();